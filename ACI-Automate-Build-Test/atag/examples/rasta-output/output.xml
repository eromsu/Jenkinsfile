<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.6.7 on linux)" generated="20190524 10:06:34.684" rpa="false">
<suite id="s1" name="Aci Tests" source="/atag/aci_tests.robot">
<kw name="setup-test" type="setup">
<kw name="use testbed &quot;${testbed}&quot;" library="ats.robot.pyATSRobot">
<doc>Load testbed YAML file and instantiate testbed object</doc>
<status status="PASS" starttime="20190524 10:06:38.584" endtime="20190524 10:06:38.622"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.583" endtime="20190524 10:06:38.623"></status>
</kw>
<test id="s1-t1" name="Verify ACI Fabric BGP Configuration - Route Reflector Node '101'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/fabric/bgpInstP-default/as</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:38.626" level="INFO">${uri} = /api/node/mo/uni/fabric/bgpInstP-default/as</msg>
<status status="PASS" starttime="20190524 10:06:38.625" endtime="20190524 10:06:38.626"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:38.628" level="INFO">No active ACI REST session found towards apic1, loggin in before continuing execution</msg>
<msg timestamp="20190524 10:06:38.628" level="INFO">Sending REST POST request to https://10.49.96.69:443/api/aaaLogin.json
Payload: b'{"aaaUser": {"attributes": {"name": "admin", "pwd": "Cisco123"}}}'
Cookies: None</msg>
<msg timestamp="20190524 10:06:38.671" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"aaaLogin":{"attributes":{"token":"IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ==","siteFingerprint":"npq5AiKRgtj6fsIp","refreshTimeoutSeconds":"600","maximumLifetimeSeconds":"86400","guiIdleTimeoutSeconds":"1200","restTimeoutSeconds":"90","creationTime":"1558664445","firstLoginTime":"1558664445","userName":"admin","remoteUser":"false","unixUserId":"15374","sessionId":"DAwAKgBzRXayw1yOW1sQXA==","lastName":"","firstName":"","changePassword":"no","version":"3.2(1m)","buildTime":"Fri May 25 05:17:37 PDT 2018","node":"topology/pod-1/node-1"},"children":[{"aaaUserDomain":{"attributes":{"name":"all","rolesR":"admin","rolesW":"admin"},"children":[{"aaaReadRoles":{"attributes":{}}},{"aaaWriteRoles":{"attributes":{},"children":[{"role":{"attributes":{"name":"admin"}}}]}}]}},{"DnDomainMapEntry":{"attributes":{"dn":"uni/tn-common","readPrivileges":"admin","writePrivileges":"admin"}}},{"DnDomainMapEntry":{"attributes":{"dn":"uni/tn-infra","readPrivileges":"admin","writePrivileges":"admin"}}},{"DnDomainMapEntry":{"attributes":{"dn":"uni/tn-mgmt","readPrivileges":"admin","writePrivileges":"admin"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:38.671" level="INFO">Authentication cookie saved {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.671" level="INFO">Authentication refresh timeout 600 seconds</msg>
<msg timestamp="20190524 10:06:38.672" level="INFO">Authentication session created at 1558692398</msg>
<msg timestamp="20190524 10:06:38.672" level="INFO">Continuing original execution</msg>
<msg timestamp="20190524 10:06:38.672" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:38.672" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/fabric/bgpInstP-default/as.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.693" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"bgpAsP":{"attributes":{"annotation":"","asn":"65500","childAction":"","descr":"","dn":"uni/fabric/bgpInstP-default/as","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:32.412+00:00","monPolDn":"uni/fabric/monfab-default","name":"bgp65500","nameAlias":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:38.696" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5faf65c710&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.627" endtime="20190524 10:06:38.696"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:38.698" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.697" endtime="20190524 10:06:38.698"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.699" endtime="20190524 10:06:38.700"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.payload[0].bgpAsP.attributes.asn}</arg>
<arg>65500</arg>
<arg>BGP AS Number not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.payload[0].bgpAsP.attributes.asn}</arg>
<arg>65500</arg>
<arg>BGP AS Number not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.703" endtime="20190524 10:06:38.703"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.701" endtime="20190524 10:06:38.703"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/fabric/bgpInstP-default/rr/node-101</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:38.705" level="INFO">${uri} = /api/node/mo/uni/fabric/bgpInstP-default/rr/node-101</msg>
<status status="PASS" starttime="20190524 10:06:38.705" endtime="20190524 10:06:38.706"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:38.707" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:38.707" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/fabric/bgpInstP-default/rr/node-101.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.728" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"bgpRRNodePEp":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/fabric/bgpInstP-default/rr/node-101","extMngdBy":"","id":"101","lcOwn":"local","modTs":"2019-05-23T00:35:32.412+00:00","monPolDn":"uni/fabric/monfab-default","name":"","nameAlias":"","podId":"1","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:38.731" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e552b0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.707" endtime="20190524 10:06:38.731"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (BGP RR)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:38.733" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.733" endtime="20190524 10:06:38.733"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node not defined as Fabric BGP Route Refelector</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node not defined as Fabric BGP Route Refelector</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.737" endtime="20190524 10:06:38.738"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.735" endtime="20190524 10:06:38.738"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.payload[0].bgpRRNodePEp.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID for Node not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.payload[0].bgpRRNodePEp.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID for Node not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.740" endtime="20190524 10:06:38.741"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.739" endtime="20190524 10:06:38.741"></status>
</kw>
<doc>Verifies that ACI Fabric BGP Configuration are configured with the expected parameters
- Policy Name: default
- BGP AS Number: 65500
- BGP Route Reflector POD ID: 1
- BGP Route Reflector Node: 101</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-bgp</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:38.623" endtime="20190524 10:06:38.741" critical="yes"></status>
</test>
<test id="s1-t2" name="Checking ACI Fabric BGP Configuration for Faults">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/fabric/bgpInstP-default/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:38.745" level="INFO">${uri} = /api/node/mo/uni/fabric/bgpInstP-default/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:38.745" endtime="20190524 10:06:38.745"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:38.747" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:38.747" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/fabric/bgpInstP-default/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.770" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/fabric/bgpInstP-default/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:38.773" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e55e80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.747" endtime="20190524 10:06:38.773"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:38.775" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.774" endtime="20190524 10:06:38.775"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.776" endtime="20190524 10:06:38.777"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:38.779" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:38.779" endtime="20190524 10:06:38.779"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:38.781" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:38.781" endtime="20190524 10:06:38.781"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:38.784" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:38.783" endtime="20190524 10:06:38.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.785" endtime="20190524 10:06:38.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.787" endtime="20190524 10:06:38.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.789" endtime="20190524 10:06:38.790"></status>
</kw>
<doc>Verifies ACI faults for Fabric BGP Configuration
- Policy Name: default
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-bgp</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:38.743" endtime="20190524 10:06:38.791" critical="yes"></status>
</test>
<test id="s1-t3" name="Verify ACI DNS Profile Configuration - Profile 'local', Domain Name 'cisco.com'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/fabric/dnsp-local</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:38.794" level="INFO">${uri} = /api/mo/uni/fabric/dnsp-local</msg>
<status status="PASS" starttime="20190524 10:06:38.794" endtime="20190524 10:06:38.794"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:38.796" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:38.797" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/fabric/dnsp-local.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.819" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"dnsProfile":{"attributes":{"IPVerPreference":"IPv4","annotation":"","childAction":"","descr":"","dn":"uni/fabric/dnsp-local","epgDn":"uni/tn-mgmt/mgmtp-default/oob-default","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:33.201+00:00","name":"local","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:38.822" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e63be0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.796" endtime="20190524 10:06:38.822"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (DNS Profile)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:38.825" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.824" endtime="20190524 10:06:38.825"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>DNS Profile not defined</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.827" endtime="20190524 10:06:38.829"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].dnsProfile.attributes.epgDn}"</arg>
<arg>"uni/tn-mgmt/mgmtp-default/oob-default"</arg>
<arg>Management EPG not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].dnsProfile.attributes.epgDn}"</arg>
<arg>"uni/tn-mgmt/mgmtp-default/oob-default"</arg>
<arg>Management EPG not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.832" endtime="20190524 10:06:38.833"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.831" endtime="20190524 10:06:38.833"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/fabric/dnsp-local/dom-cisco.com</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:38.835" level="INFO">${uri} = /api/mo/uni/fabric/dnsp-local/dom-cisco.com</msg>
<status status="PASS" starttime="20190524 10:06:38.835" endtime="20190524 10:06:38.835"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:38.838" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:38.838" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/fabric/dnsp-local/dom-cisco.com.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.859" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"dnsDomain":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/fabric/dnsp-local/dom-cisco.com","extMngdBy":"","isDefault":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:33.201+00:00","name":"cisco.com","nameAlias":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:38.861" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e5b9e8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.837" endtime="20190524 10:06:38.862"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (Domain Name)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:38.863" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.863" endtime="20190524 10:06:38.864"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Domain Name not associated with DNS Profile</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.865" endtime="20190524 10:06:38.866"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].dnsDomain.attributes.isDefault}"</arg>
<arg>"yes"</arg>
<arg>Default Domain Name Setting not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].dnsDomain.attributes.isDefault}"</arg>
<arg>"yes"</arg>
<arg>Default Domain Name Setting not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.869" endtime="20190524 10:06:38.869"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.868" endtime="20190524 10:06:38.869"></status>
</kw>
<doc>Verifies that ACI DNS Profile 'local' are configured with the expected parameters
- Profile Name: local
- Description:
- Management EPG: oob
- Domain Name: cisco.com
- Default Domain Name: yes</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-dns</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:38.792" endtime="20190524 10:06:38.870" critical="yes"></status>
</test>
<test id="s1-t4" name="Verify ACI DNS Profile Configuration - Profile 'local', DNS Server '1.1.1.1'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/fabric/dnsp-local/prov-[1.1.1.1]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:38.873" level="INFO">${uri} = /api/mo/uni/fabric/dnsp-local/prov-[1.1.1.1]</msg>
<status status="PASS" starttime="20190524 10:06:38.873" endtime="20190524 10:06:38.874"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:38.875" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:38.876" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/fabric/dnsp-local/prov-[1.1.1.1].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.900" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"dnsProv":{"attributes":{"addr":"1.1.1.1","annotation":"","childAction":"","dn":"uni/fabric/dnsp-local/prov-[1.1.1.1]","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:33.426+00:00","name":"dns1","nameAlias":"","preferred":"yes","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:38.904" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e5bb00&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.875" endtime="20190524 10:06:38.904"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:38.906" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.906" endtime="20190524 10:06:38.906"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>DNS Provider not defined</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.908" endtime="20190524 10:06:38.909"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].dnsProv.attributes.preferred}"</arg>
<arg>"yes"</arg>
<arg>Preferred DNS Server Setting not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].dnsProv.attributes.preferred}"</arg>
<arg>"yes"</arg>
<arg>Preferred DNS Server Setting not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.911" endtime="20190524 10:06:38.912"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.910" endtime="20190524 10:06:38.912"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].dnsProv.attributes.name}"</arg>
<arg>"dns1"</arg>
<arg>DNS Server Name not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].dnsProv.attributes.name}"</arg>
<arg>"dns1"</arg>
<arg>DNS Server Name not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.914" endtime="20190524 10:06:38.915"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.913" endtime="20190524 10:06:38.915"></status>
</kw>
<doc>Verifies that ACI DNS Provider '1.1.1.1' under Profile 'local' are configured with the expected parameters
- DNS Profile Name: local
- DNS Server Name: dns1
- DNS Server Address: 1.1.1.1
- Preferred DNS Server: yes</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-dns</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:38.871" endtime="20190524 10:06:38.916" critical="yes"></status>
</test>
<test id="s1-t5" name="Verify ACI DNS Profile Configuration - Profile 'local', DNS Server '1.1.1.2'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/fabric/dnsp-local/prov-[1.1.1.2]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:38.919" level="INFO">${uri} = /api/mo/uni/fabric/dnsp-local/prov-[1.1.1.2]</msg>
<status status="PASS" starttime="20190524 10:06:38.919" endtime="20190524 10:06:38.919"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:38.922" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:38.922" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/fabric/dnsp-local/prov-[1.1.1.2].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.940" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"dnsProv":{"attributes":{"addr":"1.1.1.2","annotation":"","childAction":"","dn":"uni/fabric/dnsp-local/prov-[1.1.1.2]","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:33.655+00:00","name":"dns2","nameAlias":"","preferred":"no","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:38.942" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e5bd30&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.921" endtime="20190524 10:06:38.942"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:38.945" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.944" endtime="20190524 10:06:38.945"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>DNS Provider not defined</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.946" endtime="20190524 10:06:38.947"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].dnsProv.attributes.preferred}"</arg>
<arg>"no"</arg>
<arg>Preferred DNS Server Setting not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].dnsProv.attributes.preferred}"</arg>
<arg>"no"</arg>
<arg>Preferred DNS Server Setting not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.951" endtime="20190524 10:06:38.951"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.949" endtime="20190524 10:06:38.952"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].dnsProv.attributes.name}"</arg>
<arg>"dns2"</arg>
<arg>DNS Server Name not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].dnsProv.attributes.name}"</arg>
<arg>"dns2"</arg>
<arg>DNS Server Name not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.955" endtime="20190524 10:06:38.956"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.953" endtime="20190524 10:06:38.956"></status>
</kw>
<doc>Verifies that ACI DNS Provider '1.1.1.2' under Profile 'local' are configured with the expected parameters
- DNS Profile Name: local
- DNS Server Name: dns2
- DNS Server Address: 1.1.1.2
- Preferred DNS Server: no</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-dns</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:38.917" endtime="20190524 10:06:38.956" critical="yes"></status>
</test>
<test id="s1-t6" name="Verify ACI Datetime Profile Configuration - Profile 'local'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/fabric/time-local</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:38.959" level="INFO">${uri} = /api/mo/uni/fabric/time-local</msg>
<status status="PASS" starttime="20190524 10:06:38.959" endtime="20190524 10:06:38.959"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:38.961" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:38.961" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/fabric/time-local.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:38.980" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"datetimePol":{"attributes":{"StratumValue":"3","adminSt":"enabled","annotation":"","authSt":"disabled","childAction":"","descr":"Test","dn":"uni/fabric/time-local","extMngdBy":"","lcOwn":"local","masterMode":"enabled","modTs":"2019-05-23T00:35:33.884+00:00","monPolDn":"uni/fabric/monfab-default","name":"local","nameAlias":"","ownerKey":"","ownerTag":"","serverState":"enabled","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:38.982" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e69630&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.961" endtime="20190524 10:06:38.982"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:38.984" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:38.984" endtime="20190524 10:06:38.984"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Datetime Profile not defined</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.986" endtime="20190524 10:06:38.987"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimePol.attributes.descr}"</arg>
<arg>"Test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimePol.attributes.descr}"</arg>
<arg>"Test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.989" endtime="20190524 10:06:38.990"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.988" endtime="20190524 10:06:38.990"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimePol.attributes.adminSt}"</arg>
<arg>"enabled"</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimePol.attributes.adminSt}"</arg>
<arg>"enabled"</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.992" endtime="20190524 10:06:38.993"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.991" endtime="20190524 10:06:38.993"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimePol.attributes.authSt}"</arg>
<arg>"disabled"</arg>
<arg>Authentication State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimePol.attributes.authSt}"</arg>
<arg>"disabled"</arg>
<arg>Authentication State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.996" endtime="20190524 10:06:38.996"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.994" endtime="20190524 10:06:38.996"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimePol.attributes.serverState}"</arg>
<arg>"enabled"</arg>
<arg>Server State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimePol.attributes.serverState}"</arg>
<arg>"enabled"</arg>
<arg>Server State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:38.999" endtime="20190524 10:06:39.000"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:38.998" endtime="20190524 10:06:39.000"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimePol.attributes.masterMode}"</arg>
<arg>"enabled"</arg>
<arg>Master Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimePol.attributes.masterMode}"</arg>
<arg>"enabled"</arg>
<arg>Master Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.002" endtime="20190524 10:06:39.003"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.001" endtime="20190524 10:06:39.003"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimePol.attributes.StratumValue}"</arg>
<arg>"3"</arg>
<arg>Stratum Value not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimePol.attributes.StratumValue}"</arg>
<arg>"3"</arg>
<arg>Stratum Value not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.007" endtime="20190524 10:06:39.007"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.005" endtime="20190524 10:06:39.007"></status>
</kw>
<doc>Verifies that ACI Datetime Profile 'local' are configured with the expected parameters
- Profile Name: local
- Description: Test
- Admin State: enabled
- Authentication State: disabled
- Server State: enabled
- Master Mode: enabled
- Stratum Value: 3</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-ntp</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:38.957" endtime="20190524 10:06:39.008" critical="yes"></status>
</test>
<test id="s1-t7" name="Checking ACI Datetime Profile Configuration for Faults - Profile 'local'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/fabric/time-local/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.011" level="INFO">${uri} = /api/mo/uni/fabric/time-local/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.011" endtime="20190524 10:06:39.011"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.014" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.014" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/fabric/time-local/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.034" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/fabric/time-local/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.038" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e666a0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.013" endtime="20190524 10:06:39.038"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.040" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.039" endtime="20190524 10:06:39.040"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.041" endtime="20190524 10:06:39.042"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.044" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.043" endtime="20190524 10:06:39.044"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.046" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.045" endtime="20190524 10:06:39.046"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.048" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.048" endtime="20190524 10:06:39.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.049" endtime="20190524 10:06:39.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.051" endtime="20190524 10:06:39.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.053" endtime="20190524 10:06:39.054"></status>
</kw>
<doc>Verifies ACI faults for Datetime Profile Configuration
- Profile Name: local
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-ntp</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.009" endtime="20190524 10:06:39.055" critical="yes"></status>
</test>
<test id="s1-t8" name="Verify ACI Datetime NTP Provider Configuration - Provider '11.11.11.11'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/fabric/time-local/ntpprov-11.11.11.11</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.058" level="INFO">${uri} = /api/mo/uni/fabric/time-local/ntpprov-11.11.11.11</msg>
<status status="PASS" starttime="20190524 10:06:39.058" endtime="20190524 10:06:39.059"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.060" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.060" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/fabric/time-local/ntpprov-11.11.11.11.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.080" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"datetimeNtpProv":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/fabric/time-local/ntpprov-11.11.11.11","epgDn":"uni/tn-mgmt/mgmtp-default/oob-default","extMngdBy":"","keyId":"0","lcOwn":"local","maxPoll":"6","minPoll":"4","modTs":"2019-05-23T00:35:34.113+00:00","monPolDn":"uni/fabric/monfab-default","name":"11.11.11.11","nameAlias":"","preferred":"yes","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.082" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e55b70&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.060" endtime="20190524 10:06:39.082"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.084" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.084" endtime="20190524 10:06:39.084"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>NTP Provider not defined</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.086" endtime="20190524 10:06:39.087"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimeNtpProv.attributes.minPoll}"</arg>
<arg>"4"</arg>
<arg>Minimum Poll Interval not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimeNtpProv.attributes.minPoll}"</arg>
<arg>"4"</arg>
<arg>Minimum Poll Interval not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.089" endtime="20190524 10:06:39.090"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.088" endtime="20190524 10:06:39.090"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimeNtpProv.attributes.maxPoll}"</arg>
<arg>"6"</arg>
<arg>Maximum Poll Interval not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimeNtpProv.attributes.maxPoll}"</arg>
<arg>"6"</arg>
<arg>Maximum Poll Interval not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.092" endtime="20190524 10:06:39.093"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.091" endtime="20190524 10:06:39.093"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimeNtpProv.attributes.preferred}"</arg>
<arg>"yes"</arg>
<arg>Preferred setting not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimeNtpProv.attributes.preferred}"</arg>
<arg>"yes"</arg>
<arg>Preferred setting not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.096" endtime="20190524 10:06:39.097"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.095" endtime="20190524 10:06:39.097"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].datetimeNtpProv.attributes.epgDn}"</arg>
<arg>"uni/tn-mgmt/mgmtp-default/oob-default"</arg>
<arg>Management EPG not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].datetimeNtpProv.attributes.epgDn}"</arg>
<arg>"uni/tn-mgmt/mgmtp-default/oob-default"</arg>
<arg>Management EPG not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.100" endtime="20190524 10:06:39.100"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.098" endtime="20190524 10:06:39.100"></status>
</kw>
<doc>Verifies that ACI NTP Provider '11.11.11.11' are configured with the expected parameters
- Datetime Profile Name: local
- NTP Provider: 11.11.11.11
- Minimum Poll Interval: 4
- Maximum Poll Interval: 6
- Preferred: yes
- Management EPG: oob</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-ntp</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.056" endtime="20190524 10:06:39.101" critical="yes"></status>
</test>
<test id="s1-t9" name="Checking ACI Datetime NTP Provider Configuration for Faults - Provider '11.11.11.11'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/fabric/time-local/ntpprov-11.11.11.11/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.106" level="INFO">${uri} = /api/mo/uni/fabric/time-local/ntpprov-11.11.11.11/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.105" endtime="20190524 10:06:39.106"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.109" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.109" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/fabric/time-local/ntpprov-11.11.11.11/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.130" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/fabric/time-local/ntpprov-11.11.11.11/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.135" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e33a90&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.108" endtime="20190524 10:06:39.136"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.140" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.138" endtime="20190524 10:06:39.141"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.143" endtime="20190524 10:06:39.144"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.147" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.146" endtime="20190524 10:06:39.147"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.151" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.150" endtime="20190524 10:06:39.151"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.155" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.154" endtime="20190524 10:06:39.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.156" endtime="20190524 10:06:39.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.158" endtime="20190524 10:06:39.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.160" endtime="20190524 10:06:39.161"></status>
</kw>
<doc>Verifies ACI faults for Datetime Profile Configuration
- Datetime Profile Name: local
- NTP Provider: 11.11.11.11
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-ntp</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.103" endtime="20190524 10:06:39.161" critical="yes"></status>
</test>
<test id="s1-t10" name="Verify ACI VLAN Pool Configuration - VLAN Pool baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/vlanns-[baremetal]-static</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.166" level="INFO">${uri} = /api/node/mo/uni/infra/vlanns-[baremetal]-static</msg>
<status status="PASS" starttime="20190524 10:06:39.165" endtime="20190524 10:06:39.166"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.169" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.169" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/vlanns-[baremetal]-static.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.190" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvnsVlanInstP":{"attributes":{"allocMode":"static","annotation":"","childAction":"","configIssues":"","descr":"","dn":"uni/infra/vlanns-[baremetal]-static","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:34.841+00:00","monPolDn":"uni/fabric/monfab-default","name":"baremetal","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.192" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e5bcf8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.168" endtime="20190524 10:06:39.192"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.194" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.194" endtime="20190524 10:06:39.194"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.195" endtime="20190524 10:06:39.198"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fvnsVlanInstP.attributes.name}</arg>
<arg>baremetal</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvnsVlanInstP.attributes.name}</arg>
<arg>baremetal</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.201" endtime="20190524 10:06:39.201"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.199" endtime="20190524 10:06:39.202"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fvnsVlanInstP.attributes.allocMode}</arg>
<arg>static</arg>
<arg>Allocation mode not matching expected configuration</arg>
<arg>values=False</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvnsVlanInstP.attributes.allocMode}</arg>
<arg>static</arg>
<arg>Allocation mode not matching expected configuration</arg>
<arg>values=False</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.204" endtime="20190524 10:06:39.205"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.203" endtime="20190524 10:06:39.205"></status>
</kw>
<doc>Verifies that VLAN Pool 'baremetal' are configured with the expected parameters:
- VLAN Pool Name: baremetal
- Allocation Mode: static</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vlan-pool</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.162" endtime="20190524 10:06:39.205" critical="yes"></status>
</test>
<test id="s1-t11" name="Verify ACI VLAN Pool Configuration - VLAN Pool dyn-pool">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.208" level="INFO">${uri} = /api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic</msg>
<status status="PASS" starttime="20190524 10:06:39.208" endtime="20190524 10:06:39.208"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.210" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.211" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.228" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvnsVlanInstP":{"attributes":{"allocMode":"dynamic","annotation":"","childAction":"","configIssues":"","descr":"","dn":"uni/infra/vlanns-[dyn-pool]-dynamic","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:35.285+00:00","monPolDn":"uni/fabric/monfab-default","name":"dyn-pool","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.231" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dd5860&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.210" endtime="20190524 10:06:39.231"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.233" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.233" endtime="20190524 10:06:39.234"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.236" endtime="20190524 10:06:39.236"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fvnsVlanInstP.attributes.name}</arg>
<arg>dyn-pool</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvnsVlanInstP.attributes.name}</arg>
<arg>dyn-pool</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.239" endtime="20190524 10:06:39.239"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.238" endtime="20190524 10:06:39.240"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fvnsVlanInstP.attributes.allocMode}</arg>
<arg>dynamic</arg>
<arg>Allocation mode not matching expected configuration</arg>
<arg>values=False</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvnsVlanInstP.attributes.allocMode}</arg>
<arg>dynamic</arg>
<arg>Allocation mode not matching expected configuration</arg>
<arg>values=False</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.242" endtime="20190524 10:06:39.242"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.241" endtime="20190524 10:06:39.242"></status>
</kw>
<doc>Verifies that VLAN Pool 'dyn-pool' are configured with the expected parameters:
- VLAN Pool Name: dyn-pool
- Allocation Mode: dynamic</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vlan-pool</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.206" endtime="20190524 10:06:39.242" critical="yes"></status>
</test>
<test id="s1-t12" name="Checking ACI VLAN Pool for Faults - VLAN Pool baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/vlanns-[baremetal]-static/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.245" level="INFO">${uri} = /api/node/mo/uni/infra/vlanns-[baremetal]-static/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.245" endtime="20190524 10:06:39.245"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.248" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.248" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/vlanns-[baremetal]-static/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.266" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/vlanns-[baremetal]-static/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.268" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e336d8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.247" endtime="20190524 10:06:39.269"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.271" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.270" endtime="20190524 10:06:39.271"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.272" endtime="20190524 10:06:39.273"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.275" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.274" endtime="20190524 10:06:39.275"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.276" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.276" endtime="20190524 10:06:39.276"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.278" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.277" endtime="20190524 10:06:39.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VLAN Pool has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.279" endtime="20190524 10:06:39.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VLAN Pool has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.281" endtime="20190524 10:06:39.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VLAN Pool has ${minor_count} minor faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.282" endtime="20190524 10:06:39.283"></status>
</kw>
<doc>Verifies ACI faults for VLAN Pool 'baremetal'
- VLAN Pool Name:
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 1</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vlan-pool</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.243" endtime="20190524 10:06:39.283" critical="yes"></status>
</test>
<test id="s1-t13" name="Checking ACI VLAN Pool for Faults - VLAN Pool dyn-pool">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.287" level="INFO">${uri} = /api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.287" endtime="20190524 10:06:39.288"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.289" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.290" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.307" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/vlanns-[dyn-pool]-dynamic/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.310" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e58be0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.289" endtime="20190524 10:06:39.310"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.312" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.312" endtime="20190524 10:06:39.312"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.314" endtime="20190524 10:06:39.315"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.317" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.316" endtime="20190524 10:06:39.317"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.320" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.319" endtime="20190524 10:06:39.320"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.322" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.322" endtime="20190524 10:06:39.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VLAN Pool has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.324" endtime="20190524 10:06:39.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VLAN Pool has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.326" endtime="20190524 10:06:39.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VLAN Pool has ${minor_count} minor faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.328" endtime="20190524 10:06:39.328"></status>
</kw>
<doc>Verifies ACI faults for VLAN Pool 'dyn-pool'
- VLAN Pool Name:
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 1</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vlan-pool</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.285" endtime="20190524 10:06:39.328" critical="yes"></status>
</test>
<test id="s1-t14" name="Verify ACI VLAN Pool Encap Block Configuration - VLAN Pool baremetal, Encapsulation Block 'VLAN 100-200">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/vlanns-[baremetal]-static/from-[vlan-100]-to-[vlan-200]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.333" level="INFO">${uri} = /api/node/mo/uni/infra/vlanns-[baremetal]-static/from-[vlan-100]-to-[vlan-200]</msg>
<status status="PASS" starttime="20190524 10:06:39.332" endtime="20190524 10:06:39.333"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;xml&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.336" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.336" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/vlanns-[baremetal]-static/from-[vlan-100]-to-[vlan-200].xml
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.355" level="INFO">Request returned with status code 200 and text "&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;imdata totalCount="1"&gt;&lt;fvnsEncapBlk allocMode="inherit" annotation="" childAction="" descr="" dn="uni/infra/vlanns-[baremetal]-static/from-[vlan-100]-to-[vlan-200]" extMngdBy="" from="vlan-100" lcOwn="local" modTs="2019-05-23T00:35:34.841+00:00" monPolDn="uni/fabric/monfab-default" name="Blk100200" nameAlias="" role="external" status="" to="vlan-200" uid="15374"/&gt;&lt;/imdata&gt;"</msg>
<msg timestamp="20190524 10:06:39.355" level="INFO">${return} = [200, '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;imdata totalCount="1"&gt;&lt;fvnsEncapBlk allocMode="inherit" annotation="" childAction="" descr="" dn="uni/infra/vlanns-[baremetal]-static/from-[vlan-100]-to-[...</msg>
<status status="PASS" starttime="20190524 10:06:39.335" endtime="20190524 10:06:39.355"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>@{return}[0]</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.357" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.357" endtime="20190524 10:06:39.358"></status>
</kw>
<kw name="Parse Xml" library="XML">
<doc>Parses the given XML file or string into an element structure.</doc>
<arguments>
<arg>@{return}[1]</arg>
</arguments>
<assign>
<var>${xml_root}</var>
</assign>
<msg timestamp="20190524 10:06:39.359" level="INFO">${xml_root} = &lt;Element 'imdata' at 0x7f5fa8e176d8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.359" endtime="20190524 10:06:39.359"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xml_root.tag}</arg>
<arg>imdata</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.361" endtime="20190524 10:06:39.361"></status>
</kw>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>totalCount</arg>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.362" endtime="20190524 10:06:39.363"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>allocMode</arg>
<arg>inherit</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Allocation Mode not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>allocMode</arg>
<arg>inherit</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Allocation Mode not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.365" endtime="20190524 10:06:39.366"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.364" endtime="20190524 10:06:39.366"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>from</arg>
<arg>vlan-100</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Start VLAN not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>from</arg>
<arg>vlan-100</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Start VLAN not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.369" endtime="20190524 10:06:39.369"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.367" endtime="20190524 10:06:39.369"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>to</arg>
<arg>vlan-200</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Stop VLAN not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>to</arg>
<arg>vlan-200</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Stop VLAN not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.372" endtime="20190524 10:06:39.372"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.371" endtime="20190524 10:06:39.372"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>role</arg>
<arg>external</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Role not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>role</arg>
<arg>external</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Role not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.374" endtime="20190524 10:06:39.375"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.373" endtime="20190524 10:06:39.375"></status>
</kw>
<doc>Verifies that VLAN Encapsulation Block 'VLAN 100-200 are configured with the expected parameters:
- VLAN Pool Name: baremetal
- VLAN Pool Allocation Mode: static
- Encapsulation Block Mode: inherit
- Encapsulation Block Role: external
- Encapsulation Block Start: vlan-100
- Encapsulation Block Stop: vlan-200</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vlan-pool</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.330" endtime="20190524 10:06:39.375" critical="yes"></status>
</test>
<test id="s1-t15" name="Verify ACI VLAN Pool Encap Block Configuration - VLAN Pool baremetal, Encapsulation Block 'VLAN 300-400">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/vlanns-[baremetal]-static/from-[vlan-300]-to-[vlan-400]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.378" level="INFO">${uri} = /api/node/mo/uni/infra/vlanns-[baremetal]-static/from-[vlan-300]-to-[vlan-400]</msg>
<status status="PASS" starttime="20190524 10:06:39.378" endtime="20190524 10:06:39.379"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;xml&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.380" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.380" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/vlanns-[baremetal]-static/from-[vlan-300]-to-[vlan-400].xml
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.397" level="INFO">Request returned with status code 200 and text "&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;imdata totalCount="1"&gt;&lt;fvnsEncapBlk allocMode="inherit" annotation="" childAction="" descr="" dn="uni/infra/vlanns-[baremetal]-static/from-[vlan-300]-to-[vlan-400]" extMngdBy="" from="vlan-300" lcOwn="local" modTs="2019-05-23T00:35:35.069+00:00" monPolDn="uni/fabric/monfab-default" name="Blk300400" nameAlias="" role="external" status="" to="vlan-400" uid="15374"/&gt;&lt;/imdata&gt;"</msg>
<msg timestamp="20190524 10:06:39.398" level="INFO">${return} = [200, '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;imdata totalCount="1"&gt;&lt;fvnsEncapBlk allocMode="inherit" annotation="" childAction="" descr="" dn="uni/infra/vlanns-[baremetal]-static/from-[vlan-300]-to-[...</msg>
<status status="PASS" starttime="20190524 10:06:39.380" endtime="20190524 10:06:39.398"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>@{return}[0]</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.400" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.399" endtime="20190524 10:06:39.400"></status>
</kw>
<kw name="Parse Xml" library="XML">
<doc>Parses the given XML file or string into an element structure.</doc>
<arguments>
<arg>@{return}[1]</arg>
</arguments>
<assign>
<var>${xml_root}</var>
</assign>
<msg timestamp="20190524 10:06:39.402" level="INFO">${xml_root} = &lt;Element 'imdata' at 0x7f5fa8e2b7c8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.402" endtime="20190524 10:06:39.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xml_root.tag}</arg>
<arg>imdata</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.404" endtime="20190524 10:06:39.405"></status>
</kw>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>totalCount</arg>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.406" endtime="20190524 10:06:39.406"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>allocMode</arg>
<arg>inherit</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Allocation Mode not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>allocMode</arg>
<arg>inherit</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Allocation Mode not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.409" endtime="20190524 10:06:39.409"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.408" endtime="20190524 10:06:39.409"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>from</arg>
<arg>vlan-300</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Start VLAN not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>from</arg>
<arg>vlan-300</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Start VLAN not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.411" endtime="20190524 10:06:39.412"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.410" endtime="20190524 10:06:39.412"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>to</arg>
<arg>vlan-400</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Stop VLAN not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>to</arg>
<arg>vlan-400</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Stop VLAN not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.415" endtime="20190524 10:06:39.415"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.414" endtime="20190524 10:06:39.415"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>role</arg>
<arg>external</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Role not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>role</arg>
<arg>external</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Role not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.418" endtime="20190524 10:06:39.418"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.417" endtime="20190524 10:06:39.418"></status>
</kw>
<doc>Verifies that VLAN Encapsulation Block 'VLAN 300-400 are configured with the expected parameters:
- VLAN Pool Name: baremetal
- VLAN Pool Allocation Mode: static
- Encapsulation Block Mode: inherit
- Encapsulation Block Role: external
- Encapsulation Block Start: vlan-300
- Encapsulation Block Stop: vlan-400</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vlan-pool</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.376" endtime="20190524 10:06:39.419" critical="yes"></status>
</test>
<test id="s1-t16" name="Verify ACI VLAN Pool Encap Block Configuration - VLAN Pool dyn-pool, Encapsulation Block 'VLAN 10-30">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic/from-[vlan-10]-to-[vlan-30]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.422" level="INFO">${uri} = /api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic/from-[vlan-10]-to-[vlan-30]</msg>
<status status="PASS" starttime="20190524 10:06:39.422" endtime="20190524 10:06:39.422"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;xml&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.424" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.424" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/vlanns-[dyn-pool]-dynamic/from-[vlan-10]-to-[vlan-30].xml
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.441" level="INFO">Request returned with status code 200 and text "&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;imdata totalCount="1"&gt;&lt;fvnsEncapBlk allocMode="inherit" annotation="" childAction="" descr="" dn="uni/infra/vlanns-[dyn-pool]-dynamic/from-[vlan-10]-to-[vlan-30]" extMngdBy="" from="vlan-10" lcOwn="local" modTs="2019-05-23T00:35:35.285+00:00" monPolDn="uni/fabric/monfab-default" name="Blk1030" nameAlias="" role="external" status="" to="vlan-30" uid="15374"/&gt;&lt;/imdata&gt;"</msg>
<msg timestamp="20190524 10:06:39.441" level="INFO">${return} = [200, '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;imdata totalCount="1"&gt;&lt;fvnsEncapBlk allocMode="inherit" annotation="" childAction="" descr="" dn="uni/infra/vlanns-[dyn-pool]-dynamic/from-[vlan-10]-to-[v...</msg>
<status status="PASS" starttime="20190524 10:06:39.424" endtime="20190524 10:06:39.441"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>@{return}[0]</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.443" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.443" endtime="20190524 10:06:39.443"></status>
</kw>
<kw name="Parse Xml" library="XML">
<doc>Parses the given XML file or string into an element structure.</doc>
<arguments>
<arg>@{return}[1]</arg>
</arguments>
<assign>
<var>${xml_root}</var>
</assign>
<msg timestamp="20190524 10:06:39.446" level="INFO">${xml_root} = &lt;Element 'imdata' at 0x7f5fa8e40048&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.445" endtime="20190524 10:06:39.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xml_root.tag}</arg>
<arg>imdata</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.447" endtime="20190524 10:06:39.448"></status>
</kw>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>totalCount</arg>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.449" endtime="20190524 10:06:39.450"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>allocMode</arg>
<arg>inherit</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Allocation Mode not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>allocMode</arg>
<arg>inherit</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Allocation Mode not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.452" endtime="20190524 10:06:39.453"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.451" endtime="20190524 10:06:39.453"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>from</arg>
<arg>vlan-10</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Start VLAN not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>from</arg>
<arg>vlan-10</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Start VLAN not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.456" endtime="20190524 10:06:39.457"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.454" endtime="20190524 10:06:39.457"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>to</arg>
<arg>vlan-30</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Stop VLAN not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>to</arg>
<arg>vlan-30</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Stop VLAN not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.460" endtime="20190524 10:06:39.460"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.459" endtime="20190524 10:06:39.460"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Attribute Should Be</arg>
<arg>${xml_root}</arg>
<arg>role</arg>
<arg>external</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Role not matching expected configuration</arg>
</arguments>
<kw name="Element Attribute Should Be" library="XML">
<doc>Verifies that the specified attribute is ``expected``.</doc>
<arguments>
<arg>${xml_root}</arg>
<arg>role</arg>
<arg>external</arg>
<arg>xpath=fvnsEncapBlk</arg>
<arg>message=Block Role not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.463" endtime="20190524 10:06:39.463"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.462" endtime="20190524 10:06:39.463"></status>
</kw>
<doc>Verifies that VLAN Encapsulation Block 'VLAN 10-30 are configured with the expected parameters:
- VLAN Pool Name: dyn-pool
- VLAN Pool Allocation Mode: dynamic
- Encapsulation Block Mode: inherit
- Encapsulation Block Role: external
- Encapsulation Block Start: vlan-10
- Encapsulation Block Stop: vlan-30</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vlan-pool</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.420" endtime="20190524 10:06:39.463" critical="yes"></status>
</test>
<test id="s1-t17" name="Verify ACI Physical Domain Configuration - Domain baremetal, VLAN Pool baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/phys-baremetal</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.468" level="INFO">${uri} = /api/node/mo/uni/phys-baremetal</msg>
<status status="PASS" starttime="20190524 10:06:39.467" endtime="20190524 10:06:39.468"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:39.470" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</msg>
<status status="PASS" starttime="20190524 10:06:39.469" endtime="20190524 10:06:39.470"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.472" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.472" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/phys-baremetal.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.492" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"physDomP":{"attributes":{"annotation":"","childAction":"","configIssues":"","dn":"uni/phys-baremetal","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:35.521+00:00","monPolDn":"uni/fabric/monfab-default","name":"baremetal","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRsVlanNs":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:35.542+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsvlanNs","state":"formed","stateQual":"none","status":"","tCl":"fvnsVlanInstP","tDn":"uni/infra/vlanns-[baremetal]-static","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:39.496" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e66c50&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.472" endtime="20190524 10:06:39.496"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.498" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.498" endtime="20190524 10:06:39.499"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.500" endtime="20190524 10:06:39.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].physDomP.attributes.name}</arg>
<arg>baremetal</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.502" endtime="20190524 10:06:39.503"></status>
</kw>
<kw name="${vlan_pool} IN [ @{return.payload[0].physDomP.children} ]" type="for">
<kw name="${vlan_pool} = X(infraRsVlanNs=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:35.542+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>"${vlan_pool.infraRsVlanNs.attributes.tDn}" == "uni/infra/vlanns-[baremetal]-static"</arg>
<arg>Static VLAN Pool associated with domain</arg>
</arguments>
<msg timestamp="20190524 10:06:39.506" level="INFO">Execution passed with message:
Static VLAN Pool associated with domain</msg>
<status status="PASS" starttime="20190524 10:06:39.505" endtime="20190524 10:06:39.506"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.504" endtime="20190524 10:06:39.506"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.503" endtime="20190524 10:06:39.506"></status>
</kw>
<doc>Verifies that Physical Domain 'baremetal' are configured with the expected parameters:
- Domain Name: baremetal
- Associated VLAN Pool: baremetal</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.465" endtime="20190524 10:06:39.506" critical="yes">Static VLAN Pool associated with domain</status>
</test>
<test id="s1-t18" name="Verify ACI Physical Domain Configuration - Domain baremetal2, VLAN Pool baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/phys-baremetal2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.509" level="INFO">${uri} = /api/node/mo/uni/phys-baremetal2</msg>
<status status="PASS" starttime="20190524 10:06:39.509" endtime="20190524 10:06:39.509"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:39.511" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</msg>
<status status="PASS" starttime="20190524 10:06:39.510" endtime="20190524 10:06:39.511"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.513" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.513" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/phys-baremetal2.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.533" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"physDomP":{"attributes":{"annotation":"","childAction":"","configIssues":"","dn":"uni/phys-baremetal2","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:35.749+00:00","monPolDn":"uni/fabric/monfab-default","name":"baremetal2","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRsVlanNs":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:35.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsvlanNs","state":"formed","stateQual":"none","status":"","tCl":"fvnsVlanInstP","tDn":"uni/infra/vlanns-[baremetal]-static","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:39.538" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8ddf668&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.512" endtime="20190524 10:06:39.538"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.540" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.539" endtime="20190524 10:06:39.540"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.541" endtime="20190524 10:06:39.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].physDomP.attributes.name}</arg>
<arg>baremetal2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.543" endtime="20190524 10:06:39.543"></status>
</kw>
<kw name="${vlan_pool} IN [ @{return.payload[0].physDomP.children} ]" type="for">
<kw name="${vlan_pool} = X(infraRsVlanNs=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:35.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>"${vlan_pool.infraRsVlanNs.attributes.tDn}" == "uni/infra/vlanns-[baremetal]-static"</arg>
<arg>Static VLAN Pool associated with domain</arg>
</arguments>
<msg timestamp="20190524 10:06:39.546" level="INFO">Execution passed with message:
Static VLAN Pool associated with domain</msg>
<status status="PASS" starttime="20190524 10:06:39.546" endtime="20190524 10:06:39.547"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.544" endtime="20190524 10:06:39.547"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.544" endtime="20190524 10:06:39.547"></status>
</kw>
<doc>Verifies that Physical Domain 'baremetal2' are configured with the expected parameters:
- Domain Name: baremetal2
- Associated VLAN Pool: baremetal</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.507" endtime="20190524 10:06:39.548" critical="yes">Static VLAN Pool associated with domain</status>
</test>
<test id="s1-t19" name="Verify ACI Physical Domain Configuration - Domain baremetal3, VLAN Pool dyn-pool">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/phys-baremetal3</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.551" level="INFO">${uri} = /api/node/mo/uni/phys-baremetal3</msg>
<status status="PASS" starttime="20190524 10:06:39.551" endtime="20190524 10:06:39.552"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:39.553" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</msg>
<status status="PASS" starttime="20190524 10:06:39.553" endtime="20190524 10:06:39.553"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.555" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.556" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/phys-baremetal3.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.574" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"physDomP":{"attributes":{"annotation":"","childAction":"","configIssues":"","dn":"uni/phys-baremetal3","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:35.975+00:00","monPolDn":"uni/fabric/monfab-default","name":"baremetal3","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRsVlanNs":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:35.984+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsvlanNs","state":"missing-target","stateQual":"none","status":"","tCl":"fvnsVlanInstP","tDn":"uni/infra/vlanns-[dyn-pool]-static","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:39.578" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8ddf6d8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.555" endtime="20190524 10:06:39.579"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.580" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.580" endtime="20190524 10:06:39.581"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.582" endtime="20190524 10:06:39.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].physDomP.attributes.name}</arg>
<arg>baremetal3</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.584" endtime="20190524 10:06:39.584"></status>
</kw>
<kw name="${vlan_pool} IN [ @{return.payload[0].physDomP.children} ]" type="for">
<kw name="${vlan_pool} = X(infraRsVlanNs=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:35.984+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>"${vlan_pool.infraRsVlanNs.attributes.tDn}" == "uni/infra/vlanns-[dyn-pool]-static"</arg>
<arg>Static VLAN Pool associated with domain</arg>
</arguments>
<msg timestamp="20190524 10:06:39.587" level="INFO">Execution passed with message:
Static VLAN Pool associated with domain</msg>
<status status="PASS" starttime="20190524 10:06:39.587" endtime="20190524 10:06:39.587"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.585" endtime="20190524 10:06:39.587"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.585" endtime="20190524 10:06:39.587"></status>
</kw>
<doc>Verifies that Physical Domain 'baremetal3' are configured with the expected parameters:
- Domain Name: baremetal3
- Associated VLAN Pool: dyn-pool</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.549" endtime="20190524 10:06:39.588" critical="yes">Static VLAN Pool associated with domain</status>
</test>
<test id="s1-t20" name="Verify ACI L3 External Domain Configuration - Domain l3out_dom, VLAN Pool baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/l3dom-l3out_dom</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.591" level="INFO">${uri} = /api/node/mo/uni/l3dom-l3out_dom</msg>
<status status="PASS" starttime="20190524 10:06:39.591" endtime="20190524 10:06:39.591"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:39.593" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</msg>
<status status="PASS" starttime="20190524 10:06:39.593" endtime="20190524 10:06:39.593"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.595" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.595" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/l3dom-l3out_dom.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.618" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extDomP":{"attributes":{"annotation":"","childAction":"","configIssues":"","dn":"uni/l3dom-l3out_dom","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:36.199+00:00","monPolDn":"uni/fabric/monfab-default","name":"l3out_dom","nameAlias":"","ownerKey":"","ownerTag":"","status":"","targetDscp":"unspecified","uid":"15374"},"children":[{"infraRsVlanNs":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:36.211+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsvlanNs","state":"formed","stateQual":"none","status":"","tCl":"fvnsVlanInstP","tDn":"uni/infra/vlanns-[baremetal]-static","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:39.622" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dab3c8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.595" endtime="20190524 10:06:39.622"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.624" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.624" endtime="20190524 10:06:39.624"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.626" endtime="20190524 10:06:39.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l3extDomP.attributes.name}</arg>
<arg>l3out_dom</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.627" endtime="20190524 10:06:39.628"></status>
</kw>
<kw name="${vlan_pool} IN [ @{return.payload[0].l3extDomP.children} ]" type="for">
<kw name="${vlan_pool} = X(infraRsVlanNs=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:36.211+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>"${vlan_pool.infraRsVlanNs.attributes.tDn}" == "uni/infra/vlanns-[baremetal]-static"</arg>
<arg>Static VLAN Pool associated with domain</arg>
</arguments>
<msg timestamp="20190524 10:06:39.630" level="INFO">Execution passed with message:
Static VLAN Pool associated with domain</msg>
<status status="PASS" starttime="20190524 10:06:39.630" endtime="20190524 10:06:39.630"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.629" endtime="20190524 10:06:39.630"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.628" endtime="20190524 10:06:39.632"></status>
</kw>
<doc>Verifies that L3 External Domain 'l3out_dom' are configured with the expected parameters
- Domain Name: l3out_dom
- Associated VLAN Pool: baremetal</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.589" endtime="20190524 10:06:39.632" critical="yes">Static VLAN Pool associated with domain</status>
</test>
<test id="s1-t21" name="Verify ACI L2 External Domain Configuration - Domain l2out_dom, VLAN Pool baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/l2dom-l2out_dom</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.635" level="INFO">${uri} = /api/node/mo/uni/l2dom-l2out_dom</msg>
<status status="PASS" starttime="20190524 10:06:39.635" endtime="20190524 10:06:39.635"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:39.637" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</msg>
<status status="PASS" starttime="20190524 10:06:39.637" endtime="20190524 10:06:39.637"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.639" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.639" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/l2dom-l2out_dom.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.668" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l2extDomP":{"attributes":{"annotation":"","childAction":"","configIssues":"","dn":"uni/l2dom-l2out_dom","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:36.431+00:00","monPolDn":"uni/fabric/monfab-default","name":"l2out_dom","nameAlias":"","ownerKey":"","ownerTag":"","status":"","targetDscp":"unspecified","uid":"15374"},"children":[{"infraRsVlanNs":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:36.443+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsvlanNs","state":"formed","stateQual":"none","status":"","tCl":"fvnsVlanInstP","tDn":"uni/infra/vlanns-[baremetal]-static","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:39.674" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e06c88&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.639" endtime="20190524 10:06:39.674"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.677" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.676" endtime="20190524 10:06:39.677"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.679" endtime="20190524 10:06:39.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2extDomP.attributes.name}</arg>
<arg>l2out_dom</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.681" endtime="20190524 10:06:39.681"></status>
</kw>
<kw name="${vlan_pool} IN [ @{return.payload[0].l2extDomP.children} ]" type="for">
<kw name="${vlan_pool} = X(infraRsVlanNs=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:36.443+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>"${vlan_pool.infraRsVlanNs.attributes.tDn}" == "uni/infra/vlanns-[baremetal]-static"</arg>
<arg>Static VLAN Pool associated with domain</arg>
</arguments>
<msg timestamp="20190524 10:06:39.684" level="INFO">Execution passed with message:
Static VLAN Pool associated with domain</msg>
<status status="PASS" starttime="20190524 10:06:39.683" endtime="20190524 10:06:39.684"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.682" endtime="20190524 10:06:39.684"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.681" endtime="20190524 10:06:39.684"></status>
</kw>
<doc>Verifies that L2 External Domain 'l2out_dom' are configured with the expected parameters
- Domain Name: l2out_dom
- Associated VLAN Pool: baremetal</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.633" endtime="20190524 10:06:39.684" critical="yes">Static VLAN Pool associated with domain</status>
</test>
<test id="s1-t22" name="Verify ACI VMware VMM Domain VLAN Pool Configuration - Domain vmware_aar2-lab, VLAN Pool dyn-pool">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.688" level="INFO">${uri} = /api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab</msg>
<status status="PASS" starttime="20190524 10:06:39.687" endtime="20190524 10:06:39.688"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:39.689" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs</msg>
<status status="PASS" starttime="20190524 10:06:39.689" endtime="20190524 10:06:39.689"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.691" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.691" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsVlanNs
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.712" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vmmDomP":{"attributes":{"accessMode":"read-write","annotation":"","arpLearning":"","childAction":"","configIssues":"","ctrlKnob":"epDpVerify","delimiter":"","dn":"uni/vmmp-VMware/dom-vmware_aar2-lab","enableAVE":"no","encapMode":"unknown","enfPref":"hw","epInventoryType":"on-link","epRetTime":"0","extMngdBy":"","lcOwn":"local","mcastAddr":"0.0.0.0","modTs":"2019-05-23T00:35:36.707+00:00","mode":"default","monPolDn":"uni/fabric/monfab-default","name":"vmware_aar2-lab","nameAlias":"","ownerKey":"","ownerTag":"","prefEncapMode":"unspecified","status":"","txId":"14411518807585616064","uid":"15374"},"children":[{"infraRsVlanNs":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:36.793+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsvlanNs","state":"formed","stateQual":"none","status":"","tCl":"fvnsVlanInstP","tDn":"uni/infra/vlanns-[dyn-pool]-dynamic","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:39.718" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8de49e8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.691" endtime="20190524 10:06:39.718"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.720" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.719" endtime="20190524 10:06:39.720"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.721" endtime="20190524 10:06:39.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].vmmDomP.attributes.name}</arg>
<arg>vmware_aar2-lab</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.724" endtime="20190524 10:06:39.725"></status>
</kw>
<kw name="${vlan_pool} IN [ @{return.payload[0].vmmDomP.children} ]" type="for">
<kw name="${vlan_pool} = X(infraRsVlanNs=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:36.793+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>"${vlan_pool.infraRsVlanNs.attributes.tDn}" == "uni/infra/vlanns-[dyn-pool]-static"</arg>
<arg>Static VLAN Pool associated with domain</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.727" endtime="20190524 10:06:39.727"></status>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>"${vlan_pool.infraRsVlanNs.attributes.tDn}" == "uni/infra/vlanns-[dyn-pool]-dynamic"</arg>
<arg>Dynamic VLAN Pool associated with domain</arg>
</arguments>
<msg timestamp="20190524 10:06:39.728" level="INFO">Execution passed with message:
Dynamic VLAN Pool associated with domain</msg>
<status status="PASS" starttime="20190524 10:06:39.728" endtime="20190524 10:06:39.729"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.726" endtime="20190524 10:06:39.729"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:39.725" endtime="20190524 10:06:39.729"></status>
</kw>
<doc>Verifies that VMware VMM Domain 'vmware_aar2-lab' are configured with the expected parameters
- Domain Name: vmware_aar2-lab
- Associated VLAN Pool: dyn-pool</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.686" endtime="20190524 10:06:39.729" critical="yes">Dynamic VLAN Pool associated with domain</status>
</test>
<test id="s1-t23" name="Checking ACI Physical Domain for Faults - Domain baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/phys-baremetal/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.733" level="INFO">${uri} = /api/node/mo/uni/phys-baremetal/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.733" endtime="20190524 10:06:39.733"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.735" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.735" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/phys-baremetal/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.756" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/phys-baremetal/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.759" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8ddfac8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.735" endtime="20190524 10:06:39.759"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.761" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.761" endtime="20190524 10:06:39.761"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.762" endtime="20190524 10:06:39.763"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.765" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.764" endtime="20190524 10:06:39.765"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.767" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.766" endtime="20190524 10:06:39.767"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.770" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.769" endtime="20190524 10:06:39.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.771" endtime="20190524 10:06:39.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${major_count} major faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.773" endtime="20190524 10:06:39.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.774" endtime="20190524 10:06:39.775"></status>
</kw>
<doc>Verifies ACI faults for Physical Domain 'baremetal'
- Domain Name: baremetal
- Critical fault count &lt;= 0
- Major fault count &lt;= 2
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.730" endtime="20190524 10:06:39.775" critical="yes"></status>
</test>
<test id="s1-t24" name="Checking ACI Physical Domain for Faults - Domain baremetal2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/phys-baremetal2/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.779" level="INFO">${uri} = /api/node/mo/uni/phys-baremetal2/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.778" endtime="20190524 10:06:39.779"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.781" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.781" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/phys-baremetal2/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.805" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/phys-baremetal2/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.809" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e06320&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.780" endtime="20190524 10:06:39.809"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.811" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.811" endtime="20190524 10:06:39.811"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.813" endtime="20190524 10:06:39.814"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.816" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.815" endtime="20190524 10:06:39.816"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.818" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.818" endtime="20190524 10:06:39.818"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.821" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.820" endtime="20190524 10:06:39.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.822" endtime="20190524 10:06:39.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${major_count} major faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.824" endtime="20190524 10:06:39.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.826" endtime="20190524 10:06:39.827"></status>
</kw>
<doc>Verifies ACI faults for Physical Domain 'baremetal2'
- Domain Name: baremetal2
- Critical fault count &lt;= 0
- Major fault count &lt;= 2
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.776" endtime="20190524 10:06:39.827" critical="yes"></status>
</test>
<test id="s1-t25" name="Checking ACI Physical Domain for Faults - Domain baremetal3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/phys-baremetal3/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.831" level="INFO">${uri} = /api/node/mo/uni/phys-baremetal3/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.831" endtime="20190524 10:06:39.831"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.833" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.833" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/phys-baremetal3/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.854" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/phys-baremetal3/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"1","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.857" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8de4908&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.833" endtime="20190524 10:06:39.857"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.859" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.859" endtime="20190524 10:06:39.859"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.861" endtime="20190524 10:06:39.861"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.864" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.863" endtime="20190524 10:06:39.864"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.866" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.865" endtime="20190524 10:06:39.866"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.868" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.867" endtime="20190524 10:06:39.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.869" endtime="20190524 10:06:39.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${major_count} major faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.872" endtime="20190524 10:06:39.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.874" endtime="20190524 10:06:39.875"></status>
</kw>
<doc>Verifies ACI faults for Physical Domain 'baremetal3'
- Domain Name: baremetal3
- Critical fault count &lt;= 0
- Major fault count &lt;= 2
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.829" endtime="20190524 10:06:39.875" critical="yes"></status>
</test>
<test id="s1-t26" name="Checking ACI L3 External Domain for Faults - Domain l3out_dom">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/l3dom-l3out_dom/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.879" level="INFO">${uri} = /api/node/mo/uni/l3dom-l3out_dom/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.879" endtime="20190524 10:06:39.879"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.881" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.882" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/l3dom-l3out_dom/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.905" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/l3dom-l3out_dom/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.908" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e06ef0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.881" endtime="20190524 10:06:39.908"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.911" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.910" endtime="20190524 10:06:39.911"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.912" endtime="20190524 10:06:39.913"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.915" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.914" endtime="20190524 10:06:39.915"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.917" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.916" endtime="20190524 10:06:39.917"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.920" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.919" endtime="20190524 10:06:39.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.921" endtime="20190524 10:06:39.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${major_count} major faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.923" endtime="20190524 10:06:39.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.926" endtime="20190524 10:06:39.926"></status>
</kw>
<doc>Verifies ACI faults for L3 External Domain 'l3out_dom'
- Domain Name: l3out_dom
- Critical fault count &lt;= 0
- Major fault count &lt;= 2
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.877" endtime="20190524 10:06:39.927" critical="yes"></status>
</test>
<test id="s1-t27" name="Checking ACI L2 External Domain for Faults - Domain l2out_dom">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/l2dom-l2out_dom/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.931" level="INFO">${uri} = /api/node/mo/uni/l2dom-l2out_dom/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.931" endtime="20190524 10:06:39.931"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.933" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.933" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/l2dom-l2out_dom/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:39.954" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/l2dom-l2out_dom/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:39.958" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dde550&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.933" endtime="20190524 10:06:39.958"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:39.961" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.960" endtime="20190524 10:06:39.961"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.962" endtime="20190524 10:06:39.963"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.965" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.964" endtime="20190524 10:06:39.965"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.968" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.967" endtime="20190524 10:06:39.968"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:39.970" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:39.969" endtime="20190524 10:06:39.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.971" endtime="20190524 10:06:39.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${major_count} major faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.973" endtime="20190524 10:06:39.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:39.975" endtime="20190524 10:06:39.976"></status>
</kw>
<doc>Verifies ACI faults for L2 External Domain 'l2out_dom'
- Domain Name: l2out_dom
- Critical fault count &lt;= 0
- Major fault count &lt;= 2
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.929" endtime="20190524 10:06:39.976" critical="yes"></status>
</test>
<test id="s1-t28" name="Checking ACI VMware VMM VLAN Pool Association for Faults - Domain vmware_aar2-lab">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:39.980" level="INFO">${uri} = /api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:39.980" endtime="20190524 10:06:39.980"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:39.982" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:39.982" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.001" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/vmmp-VMware/dom-vmware_aar2-lab/fltCnts","maj":"1","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"1","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.004" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dabb00&gt;</msg>
<status status="PASS" starttime="20190524 10:06:39.982" endtime="20190524 10:06:40.004"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.006" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.006" endtime="20190524 10:06:40.007"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.008" endtime="20190524 10:06:40.009"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.010" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.010" endtime="20190524 10:06:40.011"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.012" level="INFO">${major_count} = 1</msg>
<status status="PASS" starttime="20190524 10:06:40.012" endtime="20190524 10:06:40.012"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.014" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.013" endtime="20190524 10:06:40.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.016" endtime="20190524 10:06:40.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${major_count} major faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.018" endtime="20190524 10:06:40.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.020" endtime="20190524 10:06:40.021"></status>
</kw>
<doc>Verifies ACI faults for VMware VMM Domain 'vmware_aar2-lab'
- Domain Name: vmware_aar2-lab
- Critical fault count &lt;= 0
- Major fault count &lt;= 2
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-domain</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:39.978" endtime="20190524 10:06:40.022" critical="yes"></status>
</test>
<test id="s1-t29" name="Verify ACI VMware VMM Domain Configuration - Domain vmware_aar2-lab">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.027" level="INFO">${uri} = /api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab</msg>
<status status="PASS" starttime="20190524 10:06:40.026" endtime="20190524 10:06:40.027"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.029" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.029" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.049" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vmmDomP":{"attributes":{"accessMode":"read-write","annotation":"","arpLearning":"","childAction":"","configIssues":"","ctrlKnob":"epDpVerify","delimiter":"","dn":"uni/vmmp-VMware/dom-vmware_aar2-lab","enableAVE":"no","encapMode":"unknown","enfPref":"hw","epInventoryType":"on-link","epRetTime":"0","extMngdBy":"","lcOwn":"local","mcastAddr":"0.0.0.0","modTs":"2019-05-23T00:35:36.707+00:00","mode":"default","monPolDn":"uni/fabric/monfab-default","name":"vmware_aar2-lab","nameAlias":"","ownerKey":"","ownerTag":"","prefEncapMode":"unspecified","status":"","txId":"14411518807585616064","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.052" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dd9908&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.029" endtime="20190524 10:06:40.052"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.056" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.055" endtime="20190524 10:06:40.057"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>VMM Domain does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.060" endtime="20190524 10:06:40.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].vmmDomP.attributes.name}</arg>
<arg>vmware_aar2-lab</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.062" endtime="20190524 10:06:40.062"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vmmDomP.attributes.mode}"</arg>
<arg>"default"</arg>
<arg>vSwitch Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vmmDomP.attributes.mode}"</arg>
<arg>"default"</arg>
<arg>vSwitch Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.065" endtime="20190524 10:06:40.066"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.064" endtime="20190524 10:06:40.066"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.068" level="INFO">${uri} = /api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab</msg>
<status status="PASS" starttime="20190524 10:06:40.067" endtime="20190524 10:06:40.068"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=children&amp;rsp-subtree-class=vmmUsrAccP&amp;rsp-subtree-include=required&amp;rsp-subtree-filter=eq(vmmUsrAccP.name, "aar2-lab-vcenter1")</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:40.070" level="INFO">${filter} = rsp-subtree=children&amp;rsp-subtree-class=vmmUsrAccP&amp;rsp-subtree-include=required&amp;rsp-subtree-filter=eq(vmmUsrAccP.name, "aar2-lab-vcenter1")</msg>
<status status="PASS" starttime="20190524 10:06:40.069" endtime="20190524 10:06:40.070"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${credential}</var>
</assign>
<msg timestamp="20190524 10:06:40.072" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.072" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab.json?rsp-subtree=children&amp;rsp-subtree-class=vmmUsrAccP&amp;rsp-subtree-include=required&amp;rsp-subtree-filter=eq(vmmUsrAccP.name, "aar2-lab-vcenter1")
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.100" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vmmDomP":{"attributes":{"accessMode":"read-write","annotation":"","arpLearning":"","childAction":"","configIssues":"","ctrlKnob":"epDpVerify","delimiter":"","dn":"uni/vmmp-VMware/dom-vmware_aar2-lab","enableAVE":"no","encapMode":"unknown","enfPref":"hw","epInventoryType":"on-link","epRetTime":"0","extMngdBy":"","lcOwn":"local","mcastAddr":"0.0.0.0","modTs":"2019-05-23T00:35:36.707+00:00","mode":"default","monPolDn":"uni/fabric/monfab-default","name":"vmware_aar2-lab","nameAlias":"","ownerKey":"","ownerTag":"","prefEncapMode":"unspecified","status":"","txId":"14411518807585616064","uid":"15374"},"children":[{"vmmUsrAccP":{"attributes":{"annotation":"","childAction":"","descr":"","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:36.960+00:00","name":"aar2-lab-vcenter1","nameAlias":"","ownerKey":"","ownerTag":"","rn":"usracc-aar2-lab-vcenter1","status":"","uid":"15374","usr":"administrator@vsphere.local"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:40.107" level="INFO">${credential} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8ddf860&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.071" endtime="20190524 10:06:40.107"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${credential.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.109" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.108" endtime="20190524 10:06:40.109"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${credential.totalCount}</arg>
<arg>1</arg>
<arg>Credential Profile 'aar2-lab-vcenter1' not associated with VMM Domain</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${credential.totalCount}</arg>
<arg>1</arg>
<arg>Credential Profile 'aar2-lab-vcenter1' not associated with VMM Domain</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.117" endtime="20190524 10:06:40.119"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.112" endtime="20190524 10:06:40.119"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${credential.payload[0].vmmDomP.children[0].vmmUsrAccP.attributes.usr}</arg>
<arg>administrator@vsphere.local</arg>
<arg>vCenter Username not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${credential.payload[0].vmmDomP.children[0].vmmUsrAccP.attributes.usr}</arg>
<arg>administrator@vsphere.local</arg>
<arg>vCenter Username not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.123" endtime="20190524 10:06:40.124"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.121" endtime="20190524 10:06:40.124"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/ctrlr-aar2-lab-vcenter1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.125" level="INFO">${uri} = /api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/ctrlr-aar2-lab-vcenter1</msg>
<status status="PASS" starttime="20190524 10:06:40.125" endtime="20190524 10:06:40.125"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=children&amp;rsp-subtree-class=vmmRsAcc</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:40.127" level="INFO">${filter} = rsp-subtree=children&amp;rsp-subtree-class=vmmRsAcc</msg>
<status status="PASS" starttime="20190524 10:06:40.126" endtime="20190524 10:06:40.127"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${vcenter}</var>
</assign>
<msg timestamp="20190524 10:06:40.128" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.129" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/ctrlr-aar2-lab-vcenter1.json?rsp-subtree=children&amp;rsp-subtree-class=vmmRsAcc
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.152" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vmmCtrlrP":{"attributes":{"annotation":"","childAction":"","configIssues":"","dn":"uni/vmmp-VMware/dom-vmware_aar2-lab/ctrlr-aar2-lab-vcenter1","domName":"","dvsVersion":"unmanaged","extMngdBy":"","hostOrIp":"10.49.96.50","inventoryTrigSt":"untriggered","lcOwn":"local","modTs":"2019-05-23T00:35:36.960+00:00","mode":"default","monPolDn":"uni/infra/moninfra-default","msftConfigErrMsg":"","msftConfigIssues":"","n1kvStatsMode":"enabled","name":"aar2-lab-vcenter1","nameAlias":"","port":"0","rootContName":"aar2-lab","scope":"vm","seqNum":"0","statsMode":"disabled","status":"","uid":"15374","vxlanDeplPref":"vxlan"},"children":[{"vmmRsAcc":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:36.960+00:00","monPolDn":"uni/infra/moninfra-default","rType":"mo","rn":"rsacc","state":"formed","stateQual":"none","status":"","tCl":"vmmUsrAccP","tDn":"uni/vmmp-VMware/dom-vmware_aar2-lab/usracc-aar2-lab-vcenter1","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:40.157" level="INFO">${vcenter} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dd5f60&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.128" endtime="20190524 10:06:40.157"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${vcenter.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.159" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.158" endtime="20190524 10:06:40.159"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${vcenter.totalCount}</arg>
<arg>1</arg>
<arg>vCenter Profile 'aar2-lab-vcenter1' not associated with VMM Domain</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${vcenter.totalCount}</arg>
<arg>1</arg>
<arg>vCenter Profile 'aar2-lab-vcenter1' not associated with VMM Domain</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.162" endtime="20190524 10:06:40.162"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.160" endtime="20190524 10:06:40.162"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${vcenter.payload[0].vmmCtrlrP.attributes.hostOrIp}</arg>
<arg>10.49.96.50</arg>
<arg>vCenter Hostname/IP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${vcenter.payload[0].vmmCtrlrP.attributes.hostOrIp}</arg>
<arg>10.49.96.50</arg>
<arg>vCenter Hostname/IP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.165" endtime="20190524 10:06:40.165"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.164" endtime="20190524 10:06:40.166"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${vcenter.payload[0].vmmCtrlrP.attributes.rootContName}</arg>
<arg>aar2-lab</arg>
<arg>vCenter Datacenter not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${vcenter.payload[0].vmmCtrlrP.attributes.rootContName}</arg>
<arg>aar2-lab</arg>
<arg>vCenter Datacenter not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.168" endtime="20190524 10:06:40.169"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.167" endtime="20190524 10:06:40.169"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${vcenter.payload[0].vmmCtrlrP.children[0].vmmRsAcc.attributes.tDn}</arg>
<arg>uni/vmmp-VMware/dom-vmware_aar2-lab/usracc-aar2-lab-vcenter1</arg>
<arg>vCenter Credential Profile not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${vcenter.payload[0].vmmCtrlrP.children[0].vmmRsAcc.attributes.tDn}</arg>
<arg>uni/vmmp-VMware/dom-vmware_aar2-lab/usracc-aar2-lab-vcenter1</arg>
<arg>vCenter Credential Profile not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.177" endtime="20190524 10:06:40.178"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.172" endtime="20190524 10:06:40.179"></status>
</kw>
<doc>Verifies that ACI VMM Domain 'vmware_aar2-lab' are configured with the expected parameters
- VMM Domain Name: vmware_aar2-lab
- VMM Switch Type: default
- vCenter Datacenter: aar2-lab
- vCenter Controller Name: aar2-lab-vcenter1
- vCenter Hostname/IP: 10.49.96.50
- vCenter Credential Profile Name: aar2-lab-vcenter1
- vCenter Username: administrator@vsphere.local</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-vmm</tag>
<tag>aci-vmm-vmware</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.024" endtime="20190524 10:06:40.179" critical="yes"></status>
</test>
<test id="s1-t30" name="Checking VMware VMM Domain for Faults - Domain vmware_aar2-lab">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.182" level="INFO">${uri} = /api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:40.182" endtime="20190524 10:06:40.182"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.184" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.184" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/vmmp-VMware/dom-vmware_aar2-lab/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.207" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/vmmp-VMware/dom-vmware_aar2-lab/fltCnts","maj":"1","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"1","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.210" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fb5c08e80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.183" endtime="20190524 10:06:40.210"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.216" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.214" endtime="20190524 10:06:40.217"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.220" endtime="20190524 10:06:40.223"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.225" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.224" endtime="20190524 10:06:40.225"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.227" level="INFO">${major_count} = 1</msg>
<status status="PASS" starttime="20190524 10:06:40.226" endtime="20190524 10:06:40.227"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.228" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.228" endtime="20190524 10:06:40.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VMM Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.230" endtime="20190524 10:06:40.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VMM Domain has ${major_count} major faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.233" endtime="20190524 10:06:40.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VMM Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.237" endtime="20190524 10:06:40.237"></status>
</kw>
<doc>Verifies ACI faults for VMware VMM Domain 'vmware_aar2-lab'
- VMM Domain Name: vmware_aar2-lab
- Critical fault count &lt;= 0
- Major fault count &lt;= 1
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-vmm</tag>
<tag>aci-vmm-vmware</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.180" endtime="20190524 10:06:40.238" critical="yes"></status>
</test>
<test id="s1-t31" name="Verify ACI AAEP Configuration - AAEP baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/attentp-baremetal</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.243" level="INFO">${uri} = /api/node/mo/uni/infra/attentp-baremetal</msg>
<status status="PASS" starttime="20190524 10:06:40.243" endtime="20190524 10:06:40.243"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsFuncToEpg</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:40.249" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsFuncToEpg</msg>
<status status="PASS" starttime="20190524 10:06:40.246" endtime="20190524 10:06:40.249"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.253" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.253" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/attentp-baremetal.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsFuncToEpg
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.276" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraAttEntityP":{"attributes":{"annotation":"","childAction":"","configIssues":"","descr":"","dn":"uni/infra/attentp-baremetal","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:37.190+00:00","monPolDn":"uni/fabric/monfab-default","name":"baremetal","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.278" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e5f518&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.252" endtime="20190524 10:06:40.279"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.281" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.280" endtime="20190524 10:06:40.281"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.286" endtime="20190524 10:06:40.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraAttEntityP.attributes.name}</arg>
<arg>baremetal</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.291" endtime="20190524 10:06:40.292"></status>
</kw>
<kw name="Variable Should Not Exist" library="BuiltIn">
<doc>Fails if the given variable exists within the current scope.</doc>
<arguments>
<arg>${return.payload[0].infraAttEntityP.children}</arg>
<arg>Infrastructure VLAN enabled, which are not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.293" endtime="20190524 10:06:40.293"></status>
</kw>
<doc>Verifies that AAEP 'baremetal' are configured with the expected parameters:
- AAEP Name: baremetal</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-aaep</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.240" endtime="20190524 10:06:40.294" critical="yes"></status>
</test>
<test id="s1-t32" name="Verify ACI AAEP Configuration - AAEP baremetal2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/attentp-baremetal2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.298" level="INFO">${uri} = /api/node/mo/uni/infra/attentp-baremetal2</msg>
<status status="PASS" starttime="20190524 10:06:40.297" endtime="20190524 10:06:40.298"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsFuncToEpg</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:40.300" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsFuncToEpg</msg>
<status status="PASS" starttime="20190524 10:06:40.299" endtime="20190524 10:06:40.300"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.301" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.302" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/attentp-baremetal2.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsFuncToEpg
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.321" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraAttEntityP":{"attributes":{"annotation":"","childAction":"","configIssues":"","descr":"","dn":"uni/infra/attentp-baremetal2","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:37.420+00:00","monPolDn":"uni/fabric/monfab-default","name":"baremetal2","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraProvAcc":{"attributes":{"annotation":"","childAction":"","configIssues":"","descr":"","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:37.420+00:00","monPolDn":"uni/fabric/monfab-default","name":"provacc","nameAlias":"","rn":"provacc","status":"","uid":"15374"},"children":[{"infraRsFuncToEpg":{"attributes":{"annotation":"","childAction":"","encap":"vlan-4","extMngdBy":"","forceResolve":"yes","instrImedcy":"lazy","lcOwn":"local","modTs":"2019-05-23T00:35:37.432+00:00","mode":"regular","monPolDn":"uni/fabric/monfab-default","primaryEncap":"unknown","rType":"mo","rn":"rsfuncToEpg-[uni/tn-infra/ap-access/epg-default]","state":"formed","stateQual":"none","status":"","tCl":"fvAEPg","tDn":"uni/tn-infra/ap-access/epg-default","tType":"mo","uid":"15374"}}}]}}]}}]}"</msg>
<msg timestamp="20190524 10:06:40.327" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8de4a20&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.301" endtime="20190524 10:06:40.327"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.332" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.330" endtime="20190524 10:06:40.332"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.336" endtime="20190524 10:06:40.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraAttEntityP.attributes.name}</arg>
<arg>baremetal2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.338" endtime="20190524 10:06:40.339"></status>
</kw>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${return.payload[0].infraAttEntityP.children}</arg>
<arg>Infrastructure VLAN not enabled, which are not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.340" endtime="20190524 10:06:40.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraAttEntityP.children[0].infraProvAcc.children[0].infraRsFuncToEpg.attributes.encap}</arg>
<arg>vlan-4</arg>
<arg>Infrastructure VLAN not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.342" endtime="20190524 10:06:40.343"></status>
</kw>
<doc>Verifies that AAEP 'baremetal2' are configured with the expected parameters:
- AAEP Name: baremetal2
- Enable Infrastructure VLAN: yes
- Infrastructure VLAN: 4</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-aaep</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.294" endtime="20190524 10:06:40.343" critical="yes"></status>
</test>
<test id="s1-t33" name="Checking ACI AAEP for Faults - AAEP baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/attentp-baremetal/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.346" level="INFO">${uri} = /api/node/mo/uni/infra/attentp-baremetal/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:40.345" endtime="20190524 10:06:40.346"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.348" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.348" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/attentp-baremetal/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.370" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/attentp-baremetal/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.373" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e33e10&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.348" endtime="20190524 10:06:40.373"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.378" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.376" endtime="20190524 10:06:40.378"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.381" endtime="20190524 10:06:40.382"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.384" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.383" endtime="20190524 10:06:40.384"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.386" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.385" endtime="20190524 10:06:40.386"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.387" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.387" endtime="20190524 10:06:40.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"AAEP has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.389" endtime="20190524 10:06:40.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"AAEP has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.390" endtime="20190524 10:06:40.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"AAEP has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.391" endtime="20190524 10:06:40.392"></status>
</kw>
<doc>Verifies ACI faults for AAEP 'baremetal'
- AAEP Name: baremetal
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-aaep</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.343" endtime="20190524 10:06:40.392" critical="yes"></status>
</test>
<test id="s1-t34" name="Checking ACI AAEP for Faults - AAEP baremetal2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/attentp-baremetal2/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.395" level="INFO">${uri} = /api/node/mo/uni/infra/attentp-baremetal2/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:40.395" endtime="20190524 10:06:40.395"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.398" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.398" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/attentp-baremetal2/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.416" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/attentp-baremetal2/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.419" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e5fd68&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.397" endtime="20190524 10:06:40.419"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.423" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.422" endtime="20190524 10:06:40.424"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.427" endtime="20190524 10:06:40.428"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.430" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.429" endtime="20190524 10:06:40.430"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.432" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.431" endtime="20190524 10:06:40.432"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.434" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.433" endtime="20190524 10:06:40.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"AAEP has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.435" endtime="20190524 10:06:40.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"AAEP has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.437" endtime="20190524 10:06:40.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"AAEP has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.439" endtime="20190524 10:06:40.439"></status>
</kw>
<doc>Verifies ACI faults for AAEP 'baremetal2'
- AAEP Name: baremetal2
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-aaep</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.393" endtime="20190524 10:06:40.440" critical="yes"></status>
</test>
<test id="s1-t35" name="Verify ACI AAEP Domain Association Configuration - AAEP baremetal, Domain baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>uni/phys-baremetal</arg>
</arguments>
<assign>
<var>${tDn}</var>
</assign>
<msg timestamp="20190524 10:06:40.442" level="INFO">${tDn} = uni/phys-baremetal</msg>
<status status="PASS" starttime="20190524 10:06:40.442" endtime="20190524 10:06:40.442"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/attentp-baremetal/rsdomP-[${tDn}]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.444" level="INFO">${uri} = /api/node/mo/uni/infra/attentp-baremetal/rsdomP-[uni/phys-baremetal]</msg>
<status status="PASS" starttime="20190524 10:06:40.443" endtime="20190524 10:06:40.444"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.445" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.445" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/attentp-baremetal/rsdomP-[uni/phys-baremetal].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.467" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsDomP":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/attentp-baremetal/rsdomP-[uni/phys-baremetal]","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:37.676+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"physDomP","tDn":"uni/phys-baremetal","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.469" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e666d8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.445" endtime="20190524 10:06:40.469"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.475" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.473" endtime="20190524 10:06:40.476"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Domain association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.478" endtime="20190524 10:06:40.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraRsDomP.attributes.tDn}</arg>
<arg>${tDn}</arg>
<arg>tDn not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.480" endtime="20190524 10:06:40.481"></status>
</kw>
<doc>Verifies that AAEP 'baremetal' domain association are configured with the expected parameters:
- AAEP Name: baremetal
- Domain Name: baremetal
- Domain Type: physical</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-aaep</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.440" endtime="20190524 10:06:40.481" critical="yes"></status>
</test>
<test id="s1-t36" name="Verify ACI AAEP Domain Association Configuration - AAEP baremetal, Domain l3out_dom">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>uni/l3dom-l3out_dom</arg>
</arguments>
<assign>
<var>${tDn}</var>
</assign>
<msg timestamp="20190524 10:06:40.485" level="INFO">${tDn} = uni/l3dom-l3out_dom</msg>
<status status="PASS" starttime="20190524 10:06:40.484" endtime="20190524 10:06:40.485"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/attentp-baremetal/rsdomP-[${tDn}]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.486" level="INFO">${uri} = /api/node/mo/uni/infra/attentp-baremetal/rsdomP-[uni/l3dom-l3out_dom]</msg>
<status status="PASS" starttime="20190524 10:06:40.486" endtime="20190524 10:06:40.486"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.488" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.489" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/attentp-baremetal/rsdomP-[uni/l3dom-l3out_dom].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.511" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsDomP":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/attentp-baremetal/rsdomP-[uni/l3dom-l3out_dom]","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:37.899+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"l3extDomP","tDn":"uni/l3dom-l3out_dom","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.513" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e00b70&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.488" endtime="20190524 10:06:40.513"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.518" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.517" endtime="20190524 10:06:40.519"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Domain association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.522" endtime="20190524 10:06:40.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraRsDomP.attributes.tDn}</arg>
<arg>${tDn}</arg>
<arg>tDn not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.524" endtime="20190524 10:06:40.525"></status>
</kw>
<doc>Verifies that AAEP 'baremetal' domain association are configured with the expected parameters:
- AAEP Name: baremetal
- Domain Name: l3out_dom
- Domain Type: external_l3</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-aaep</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.482" endtime="20190524 10:06:40.525" critical="yes"></status>
</test>
<test id="s1-t37" name="Verify ACI AAEP Domain Association Configuration - AAEP baremetal2, Domain baremetal2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>uni/phys-baremetal2</arg>
</arguments>
<assign>
<var>${tDn}</var>
</assign>
<msg timestamp="20190524 10:06:40.528" level="INFO">${tDn} = uni/phys-baremetal2</msg>
<status status="PASS" starttime="20190524 10:06:40.527" endtime="20190524 10:06:40.528"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/attentp-baremetal2/rsdomP-[${tDn}]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.529" level="INFO">${uri} = /api/node/mo/uni/infra/attentp-baremetal2/rsdomP-[uni/phys-baremetal2]</msg>
<status status="PASS" starttime="20190524 10:06:40.529" endtime="20190524 10:06:40.529"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.531" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.531" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/attentp-baremetal2/rsdomP-[uni/phys-baremetal2].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.550" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsDomP":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/attentp-baremetal2/rsdomP-[uni/phys-baremetal2]","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:38.125+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"physDomP","tDn":"uni/phys-baremetal2","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.553" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8db6358&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.530" endtime="20190524 10:06:40.553"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.558" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.556" endtime="20190524 10:06:40.559"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Domain association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.561" endtime="20190524 10:06:40.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraRsDomP.attributes.tDn}</arg>
<arg>${tDn}</arg>
<arg>tDn not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.563" endtime="20190524 10:06:40.564"></status>
</kw>
<doc>Verifies that AAEP 'baremetal2' domain association are configured with the expected parameters:
- AAEP Name: baremetal2
- Domain Name: baremetal2
- Domain Type: physical</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-aaep</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.526" endtime="20190524 10:06:40.564" critical="yes"></status>
</test>
<test id="s1-t38" name="Verify ACI AAEP Domain Association Configuration - AAEP baremetal2, Domain l3out_dom">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>uni/l3dom-l3out_dom</arg>
</arguments>
<assign>
<var>${tDn}</var>
</assign>
<msg timestamp="20190524 10:06:40.567" level="INFO">${tDn} = uni/l3dom-l3out_dom</msg>
<status status="PASS" starttime="20190524 10:06:40.567" endtime="20190524 10:06:40.567"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/attentp-baremetal2/rsdomP-[${tDn}]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.569" level="INFO">${uri} = /api/node/mo/uni/infra/attentp-baremetal2/rsdomP-[uni/l3dom-l3out_dom]</msg>
<status status="PASS" starttime="20190524 10:06:40.568" endtime="20190524 10:06:40.569"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.570" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.570" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/attentp-baremetal2/rsdomP-[uni/l3dom-l3out_dom].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.589" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsDomP":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/attentp-baremetal2/rsdomP-[uni/l3dom-l3out_dom]","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:38.324+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"l3extDomP","tDn":"uni/l3dom-l3out_dom","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.592" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8d98f60&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.570" endtime="20190524 10:06:40.592"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.596" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.595" endtime="20190524 10:06:40.597"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Domain association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.600" endtime="20190524 10:06:40.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraRsDomP.attributes.tDn}</arg>
<arg>${tDn}</arg>
<arg>tDn not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.602" endtime="20190524 10:06:40.603"></status>
</kw>
<doc>Verifies that AAEP 'baremetal2' domain association are configured with the expected parameters:
- AAEP Name: baremetal2
- Domain Name: l3out_dom
- Domain Type: external_l3</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-aaep</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.565" endtime="20190524 10:06:40.603" critical="yes"></status>
</test>
<test id="s1-t39" name="Verify ACI vPC Domain Configuration - Domain Leaf1_2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/fabric/protpol/expgep-Leaf1_2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.606" level="INFO">${uri} = /api/node/mo/uni/fabric/protpol/expgep-Leaf1_2</msg>
<status status="PASS" starttime="20190524 10:06:40.606" endtime="20190524 10:06:40.606"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=fabricNodePEp</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:40.608" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=fabricNodePEp</msg>
<status status="PASS" starttime="20190524 10:06:40.607" endtime="20190524 10:06:40.608"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.609" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.609" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/fabric/protpol/expgep-Leaf1_2.json?rsp-subtree=full&amp;rsp-subtree-class=fabricNodePEp
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.631" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricExplicitGEp":{"attributes":{"annotation":"","childAction":"","configQual":"","configSt":"deployed","dn":"uni/fabric/protpol/expgep-Leaf1_2","extMngdBy":"","id":"1","lcOwn":"local","modTs":"2019-05-23T00:38:23.110+00:00","monPolDn":"uni/fabric/monfab-default","name":"Leaf1_2","status":"","uid":"15374","virtualIp":"10.0.64.67/32"},"children":[{"fabricNodePEp":{"attributes":{"annotation":"","childAction":"","descr":"","extMngdBy":"","id":"202","lcOwn":"local","mgmtIp":"0.0.0.0","modTs":"2019-05-23T00:36:25.639+00:00","monPolDn":"uni/fabric/monfab-default","name":"","nameAlias":"","peerIp":"10.0.104.64/32","podId":"1","rn":"nodepep-202","status":"","uid":"15374"}}},{"fabricNodePEp":{"attributes":{"annotation":"","childAction":"","descr":"","extMngdBy":"","id":"201","lcOwn":"local","mgmtIp":"0.0.0.0","modTs":"2019-05-23T00:38:22.949+00:00","monPolDn":"uni/fabric/monfab-default","name":"","nameAlias":"","peerIp":"10.0.104.66/32","podId":"1","rn":"nodepep-201","status":"","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:40.637" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e69cf8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.609" endtime="20190524 10:06:40.637"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.642" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.640" endtime="20190524 10:06:40.642"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>vPC Domain does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.645" endtime="20190524 10:06:40.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricExplicitGEp.attributes.name}</arg>
<arg>Leaf1_2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.647" endtime="20190524 10:06:40.648"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricExplicitGEp.attributes.id}</arg>
<arg>1</arg>
<arg>Logical Pair ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricExplicitGEp.attributes.id}</arg>
<arg>1</arg>
<arg>Logical Pair ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.651" endtime="20190524 10:06:40.652"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.650" endtime="20190524 10:06:40.652"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${left_node_found}</arg>
<arg>"Node not found"</arg>
</arguments>
<msg timestamp="20190524 10:06:40.658" level="INFO">${left_node_found} = "Node not found"</msg>
<status status="PASS" starttime="20190524 10:06:40.653" endtime="20190524 10:06:40.659"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${right_node_found}</arg>
<arg>"Node not found"</arg>
</arguments>
<msg timestamp="20190524 10:06:40.666" level="INFO">${right_node_found} = "Node not found"</msg>
<status status="PASS" starttime="20190524 10:06:40.660" endtime="20190524 10:06:40.666"></status>
</kw>
<kw name="${node} IN [ @{return.payload[0].fabricExplicitGEp.children} ]" type="for">
<kw name="${node} = X(fabricNodePEp=X(attributes=X(annotation='', childAction='', descr='', extMngdBy='', id='202', lcOwn='local', mgmtIp='0.0.0.0', modTs='2019-05-23T00:36:25.639+00:00', monPolDn='uni/fabric/monfab-defa..." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${node.fabricNodePEp.attributes.id}" == "201"</arg>
<arg>run keyword</arg>
<arg>Set Test Variable</arg>
<arg>${left_node_found}</arg>
<arg>"Node found"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.668" endtime="20190524 10:06:40.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${node.fabricNodePEp.attributes.id}" == "202"</arg>
<arg>run keyword</arg>
<arg>Set Test Variable</arg>
<arg>${right_node_found}</arg>
<arg>"Node found"</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${right_node_found}</arg>
<arg>"Node found"</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${right_node_found}</arg>
<arg>"Node found"</arg>
</arguments>
<msg timestamp="20190524 10:06:40.673" level="INFO">${right_node_found} = "Node found"</msg>
<status status="PASS" starttime="20190524 10:06:40.672" endtime="20190524 10:06:40.673"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.671" endtime="20190524 10:06:40.673"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.669" endtime="20190524 10:06:40.673"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.667" endtime="20190524 10:06:40.674"></status>
</kw>
<kw name="${node} = X(fabricNodePEp=X(attributes=X(annotation='', childAction='', descr='', extMngdBy='', id='201', lcOwn='local', mgmtIp='0.0.0.0', modTs='2019-05-23T00:38:22.949+00:00', monPolDn='uni/fabric/monfab-defa..." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${node.fabricNodePEp.attributes.id}" == "201"</arg>
<arg>run keyword</arg>
<arg>Set Test Variable</arg>
<arg>${left_node_found}</arg>
<arg>"Node found"</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${left_node_found}</arg>
<arg>"Node found"</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${left_node_found}</arg>
<arg>"Node found"</arg>
</arguments>
<msg timestamp="20190524 10:06:40.677" level="INFO">${left_node_found} = "Node found"</msg>
<status status="PASS" starttime="20190524 10:06:40.677" endtime="20190524 10:06:40.677"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.676" endtime="20190524 10:06:40.677"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.675" endtime="20190524 10:06:40.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${node.fabricNodePEp.attributes.id}" == "202"</arg>
<arg>run keyword</arg>
<arg>Set Test Variable</arg>
<arg>${right_node_found}</arg>
<arg>"Node found"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.678" endtime="20190524 10:06:40.679"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.674" endtime="20190524 10:06:40.679"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.666" endtime="20190524 10:06:40.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${left_node_found} == "Node found"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Fabric Node '201' not associated with vPC Domain</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.680" endtime="20190524 10:06:40.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${right_node_found} == "Node found"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Fabric Node '202' not associated with vPC Domain</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.682" endtime="20190524 10:06:40.683"></status>
</kw>
<doc>Verifies that vPC Domain (or vPC Explicit Protection Group) 'Leaf1_2' are configured with the expected parameters
- vPC Domain Name: Leaf1_2
- Logical Pair ID: 1
- Left Node ID: 201
- Right Node ID: 202</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vpc-domain</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.604" endtime="20190524 10:06:40.683" critical="yes"></status>
</test>
<test id="s1-t40" name="Checking ACI vPC Domain for Faults - Domain Leaf1_2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/fabric/protpol/expgep-Leaf1_2/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.690" level="INFO">${uri} = /api/node/mo/uni/fabric/protpol/expgep-Leaf1_2/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:40.690" endtime="20190524 10:06:40.690"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.692" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.692" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/fabric/protpol/expgep-Leaf1_2/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.710" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/fabric/protpol/expgep-Leaf1_2/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.713" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8db0e80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.691" endtime="20190524 10:06:40.713"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.717" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.716" endtime="20190524 10:06:40.718"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.721" endtime="20190524 10:06:40.722"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.724" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.723" endtime="20190524 10:06:40.724"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.726" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.725" endtime="20190524 10:06:40.726"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.727" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.727" endtime="20190524 10:06:40.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.728" endtime="20190524 10:06:40.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.730" endtime="20190524 10:06:40.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"vPC Domain has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.732" endtime="20190524 10:06:40.733"></status>
</kw>
<doc>Verifies ACI faults for vPC Domain (or vPC Explicit Protection Group) 'Leaf1_2'
- vPC Domain Name: Leaf1_2
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-vpc-domain</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.685" endtime="20190524 10:06:40.733" critical="yes"></status>
</test>
<test id="s1-t41" name="Verify ACI Leaf Switch Profile Configuration - Profile Leaf1_2, Switch Selector Leaf, Node block 201-202">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/nprof-Leaf1_2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.737" level="INFO">${uri} = /api/node/mo/uni/infra/nprof-Leaf1_2</msg>
<status status="PASS" starttime="20190524 10:06:40.737" endtime="20190524 10:06:40.737"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.739" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.739" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/nprof-Leaf1_2.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.762" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraNodeP":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/nprof-Leaf1_2","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:31.632+00:00","monPolDn":"uni/fabric/monfab-default","name":"Leaf1_2","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.765" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8da2320&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.739" endtime="20190524 10:06:40.766"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.771" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.769" endtime="20190524 10:06:40.771"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Switch Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.774" endtime="20190524 10:06:40.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraNodeP.attributes.name}</arg>
<arg>Leaf1_2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.777" endtime="20190524 10:06:40.777"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/nprof-Leaf1_2/leaves-Leaf-typ-range</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.779" level="INFO">${uri} = /api/node/mo/uni/infra/nprof-Leaf1_2/leaves-Leaf-typ-range</msg>
<status status="PASS" starttime="20190524 10:06:40.779" endtime="20190524 10:06:40.779"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraNodeBlk</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:40.781" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraNodeBlk</msg>
<status status="PASS" starttime="20190524 10:06:40.780" endtime="20190524 10:06:40.781"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${sw_selector}</var>
</assign>
<msg timestamp="20190524 10:06:40.783" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.783" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/nprof-Leaf1_2/leaves-Leaf-typ-range.json?rsp-subtree=full&amp;rsp-subtree-class=infraNodeBlk
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.805" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraLeafS":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/nprof-Leaf1_2/leaves-Leaf-typ-range","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:31.632+00:00","monPolDn":"uni/fabric/monfab-default","name":"Leaf","nameAlias":"","ownerKey":"","ownerTag":"","status":"","type":"range","uid":"15374"},"children":[{"infraNodeBlk":{"attributes":{"annotation":"","childAction":"","descr":"","extMngdBy":"","from_":"201","lcOwn":"local","modTs":"2019-05-23T00:35:31.632+00:00","name":"bl201202","nameAlias":"","rn":"nodeblk-bl201202","status":"","to_":"202","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:40.809" level="INFO">${sw_selector} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8d9ccf8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.782" endtime="20190524 10:06:40.809"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${sw_selector.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${sw_selector.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.817" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.816" endtime="20190524 10:06:40.817"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.812" endtime="20190524 10:06:40.817"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${sw_selector.totalCount}</arg>
<arg>1</arg>
<arg>Switch Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${sw_selector.totalCount}</arg>
<arg>1</arg>
<arg>Switch Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.821" endtime="20190524 10:06:40.821"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.819" endtime="20190524 10:06:40.821"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${sw_selector.payload[0].infraLeafS.attributes.name}</arg>
<arg>Leaf</arg>
<arg>Failure retreiving switch selector configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${sw_selector.payload[0].infraLeafS.attributes.name}</arg>
<arg>Leaf</arg>
<arg>Failure retreiving switch selector configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.824" endtime="20190524 10:06:40.824"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.823" endtime="20190524 10:06:40.824"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"Node not found"</arg>
</arguments>
<assign>
<var>${from_node_found}</var>
</assign>
<msg timestamp="20190524 10:06:40.826" level="INFO">${from_node_found} = "Node not found"</msg>
<status status="PASS" starttime="20190524 10:06:40.826" endtime="20190524 10:06:40.826"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"Node not found"</arg>
</arguments>
<assign>
<var>${to_node_found}</var>
</assign>
<msg timestamp="20190524 10:06:40.828" level="INFO">${to_node_found} = "Node not found"</msg>
<status status="PASS" starttime="20190524 10:06:40.827" endtime="20190524 10:06:40.828"></status>
</kw>
<kw name="${block} IN [ @{sw_selector.payload[0].infraLeafS.children} ]" type="for">
<kw name="${block} = X(infraNodeBlk=X(attributes=X(annotation='', childAction='', descr='', extMngdBy='', from_='201', lcOwn='local', modTs='2019-05-23T00:35:31.632+00:00', name='bl201202', nameAlias='', rn='nodeblk-bl201..." type="foritem">
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraNodeBlk.attributes.from_}" == "201"</arg>
<arg>"Node found"</arg>
</arguments>
<assign>
<var>${from_node_found}</var>
</assign>
<msg timestamp="20190524 10:06:40.832" level="INFO">${from_node_found} = "Node found"</msg>
<status status="PASS" starttime="20190524 10:06:40.830" endtime="20190524 10:06:40.832"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraNodeBlk.attributes.to_}" == "202"</arg>
<arg>"Node found"</arg>
</arguments>
<assign>
<var>${to_node_found}</var>
</assign>
<msg timestamp="20190524 10:06:40.835" level="INFO">${to_node_found} = "Node found"</msg>
<status status="PASS" starttime="20190524 10:06:40.834" endtime="20190524 10:06:40.835"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.829" endtime="20190524 10:06:40.835"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.828" endtime="20190524 10:06:40.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${from_node_found} == "Node found"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Node ID (from) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.839" endtime="20190524 10:06:40.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${to_node_found} == "Node found"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Node ID (to) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.842" endtime="20190524 10:06:40.843"></status>
</kw>
<doc>Verifies that Leaf Switch Profile 'Leaf1_2' are configured with the expected parameters
- Profile Name: Leaf1_2
- Switch Selector: Leaf
- Node ID (from): 201
- Node ID (to): 202</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-switch-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.734" endtime="20190524 10:06:40.844" critical="yes"></status>
</test>
<test id="s1-t42" name="Verify ACI Spine Switch Profile Configuration - Profile Spine, Switch Selector spine_sel, Node block 101-101">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spprof-Spine</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.848" level="INFO">${uri} = /api/node/mo/uni/infra/spprof-Spine</msg>
<status status="PASS" starttime="20190524 10:06:40.847" endtime="20190524 10:06:40.848"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.850" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.851" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spprof-Spine.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.874" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraSpineP":{"attributes":{"annotation":"","childAction":"","descr":"Test","dn":"uni/infra/spprof-Spine","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:31.868+00:00","monPolDn":"uni/fabric/monfab-default","name":"Spine","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.878" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8d986d8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.850" endtime="20190524 10:06:40.878"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.883" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.881" endtime="20190524 10:06:40.883"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Switch Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.886" endtime="20190524 10:06:40.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraSpineP.attributes.name}</arg>
<arg>Spine</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.888" endtime="20190524 10:06:40.889"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].infraSpineP.attributes.descr}"</arg>
<arg>"Test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].infraSpineP.attributes.descr}"</arg>
<arg>"Test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.891" endtime="20190524 10:06:40.892"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.890" endtime="20190524 10:06:40.892"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spprof-Spine/spines-spine_sel-typ-range</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.893" level="INFO">${uri} = /api/node/mo/uni/infra/spprof-Spine/spines-spine_sel-typ-range</msg>
<status status="PASS" starttime="20190524 10:06:40.893" endtime="20190524 10:06:40.893"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraNodeBlk</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:40.895" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraNodeBlk</msg>
<status status="PASS" starttime="20190524 10:06:40.895" endtime="20190524 10:06:40.895"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${sw_selector}</var>
</assign>
<msg timestamp="20190524 10:06:40.897" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.897" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spprof-Spine/spines-spine_sel-typ-range.json?rsp-subtree=full&amp;rsp-subtree-class=infraNodeBlk
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.918" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraSpineS":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/spprof-Spine/spines-spine_sel-typ-range","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:31.868+00:00","monPolDn":"uni/fabric/monfab-default","name":"spine_sel","nameAlias":"","ownerKey":"","ownerTag":"","status":"","type":"range","uid":"15374"},"children":[{"infraNodeBlk":{"attributes":{"annotation":"","childAction":"","descr":"","extMngdBy":"","from_":"101","lcOwn":"local","modTs":"2019-05-23T00:35:31.868+00:00","name":"bl101101","nameAlias":"","rn":"nodeblk-bl101101","status":"","to_":"101","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:40.923" level="INFO">${sw_selector} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8da2c18&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.897" endtime="20190524 10:06:40.923"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${sw_selector.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${sw_selector.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.931" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.929" endtime="20190524 10:06:40.931"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.926" endtime="20190524 10:06:40.931"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${sw_selector.totalCount}</arg>
<arg>1</arg>
<arg>Switch Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${sw_selector.totalCount}</arg>
<arg>1</arg>
<arg>Switch Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.934" endtime="20190524 10:06:40.935"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.933" endtime="20190524 10:06:40.935"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${sw_selector.payload[0].infraSpineS.attributes.name}</arg>
<arg>spine_sel</arg>
<arg>Failure retreiving switch selector configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${sw_selector.payload[0].infraSpineS.attributes.name}</arg>
<arg>spine_sel</arg>
<arg>Failure retreiving switch selector configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.938" endtime="20190524 10:06:40.939"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.936" endtime="20190524 10:06:40.939"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"Node not found"</arg>
</arguments>
<assign>
<var>${from_node_found}</var>
</assign>
<msg timestamp="20190524 10:06:40.941" level="INFO">${from_node_found} = "Node not found"</msg>
<status status="PASS" starttime="20190524 10:06:40.941" endtime="20190524 10:06:40.941"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"Node not found"</arg>
</arguments>
<assign>
<var>${to_node_found}</var>
</assign>
<msg timestamp="20190524 10:06:40.943" level="INFO">${to_node_found} = "Node not found"</msg>
<status status="PASS" starttime="20190524 10:06:40.943" endtime="20190524 10:06:40.943"></status>
</kw>
<kw name="${block} IN [ @{sw_selector.payload[0].infraSpineS.children} ]" type="for">
<kw name="${block} = X(infraNodeBlk=X(attributes=X(annotation='', childAction='', descr='', extMngdBy='', from_='101', lcOwn='local', modTs='2019-05-23T00:35:31.868+00:00', name='bl101101', nameAlias='', rn='nodeblk-bl101..." type="foritem">
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraNodeBlk.attributes.from_}" == "101"</arg>
<arg>"Node found"</arg>
</arguments>
<assign>
<var>${from_node_found}</var>
</assign>
<msg timestamp="20190524 10:06:40.946" level="INFO">${from_node_found} = "Node found"</msg>
<status status="PASS" starttime="20190524 10:06:40.946" endtime="20190524 10:06:40.946"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraNodeBlk.attributes.to_}" == "101"</arg>
<arg>"Node found"</arg>
</arguments>
<assign>
<var>${to_node_found}</var>
</assign>
<msg timestamp="20190524 10:06:40.948" level="INFO">${to_node_found} = "Node found"</msg>
<status status="PASS" starttime="20190524 10:06:40.947" endtime="20190524 10:06:40.948"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.944" endtime="20190524 10:06:40.948"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:40.944" endtime="20190524 10:06:40.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${from_node_found} == "Node found"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Node ID (from) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.950" endtime="20190524 10:06:40.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${to_node_found} == "Node found"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Node ID (to) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.952" endtime="20190524 10:06:40.953"></status>
</kw>
<doc>Verifies that Spine Switch Profile 'Spine' are configured with the expected parameters
- Profile Name: Spine
- Description: Test
- Switch Selector: spine_sel
- From Node ID: 101
- To Node ID: 101</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-switch-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.845" endtime="20190524 10:06:40.953" critical="yes"></status>
</test>
<test id="s1-t43" name="Checking ACI Leaf Switch Profile for Faults - Profile Leaf1_2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/nprof-Leaf1_2/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:40.958" level="INFO">${uri} = /api/node/mo/uni/infra/nprof-Leaf1_2/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:40.957" endtime="20190524 10:06:40.958"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:40.960" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:40.960" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/nprof-Leaf1_2/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:40.980" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/nprof-Leaf1_2/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:40.983" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e4c940&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.959" endtime="20190524 10:06:40.983"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:40.988" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:40.986" endtime="20190524 10:06:40.988"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.991" endtime="20190524 10:06:40.992"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.994" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.993" endtime="20190524 10:06:40.994"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.996" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.995" endtime="20190524 10:06:40.996"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:40.997" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:40.997" endtime="20190524 10:06:40.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Switch Profile has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:40.999" endtime="20190524 10:06:40.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Switch Profile has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.001" endtime="20190524 10:06:41.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Switch Profile has ${minor_count} minor faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.003" endtime="20190524 10:06:41.004"></status>
</kw>
<doc>Verifies ACI faults for Leaf Switch Profile 'Leaf1_2'
- Profile Name: Leaf1_2
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 2</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-switch-profile</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:40.954" endtime="20190524 10:06:41.004" critical="yes"></status>
</test>
<test id="s1-t44" name="Checking ACI Spine Switch Profile for Faults - Profile Spine">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spprof-Spine/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.008" level="INFO">${uri} = /api/node/mo/uni/infra/spprof-Spine/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:41.008" endtime="20190524 10:06:41.008"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.010" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.010" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spprof-Spine/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.030" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/spprof-Spine/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.033" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa903b278&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.009" endtime="20190524 10:06:41.033"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.039" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.038" endtime="20190524 10:06:41.040"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.043" endtime="20190524 10:06:41.043"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:41.045" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:41.045" endtime="20190524 10:06:41.045"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:41.048" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:41.047" endtime="20190524 10:06:41.048"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:41.050" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:41.049" endtime="20190524 10:06:41.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Switch Profile has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.053" endtime="20190524 10:06:41.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Switch Profile has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.054" endtime="20190524 10:06:41.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Switch Profile has ${minor_count} minor faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.057" endtime="20190524 10:06:41.057"></status>
</kw>
<doc>Verifies ACI faults for Spine Switch Profile 'Spine'
- Profile Name: Spine
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 2</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-switch-profile</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.005" endtime="20190524 10:06:41.058" critical="yes"></status>
</test>
<test id="s1-t45" name="Verify ACI CDP Interface Policy Configuration - Policy Name cdp_enabled">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/cdpIfP-cdp_enabled</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.061" level="INFO">${uri} = /api/node/mo/uni/infra/cdpIfP-cdp_enabled</msg>
<status status="PASS" starttime="20190524 10:06:41.061" endtime="20190524 10:06:41.061"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.063" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.063" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/cdpIfP-cdp_enabled.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.082" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"cdpIfPol":{"attributes":{"adminSt":"enabled","annotation":"","childAction":"","descr":"","dn":"uni/infra/cdpIfP-cdp_enabled","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:38.546+00:00","monPolDn":"uni/fabric/monfab-default","name":"cdp_enabled","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.085" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e55550&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.063" endtime="20190524 10:06:41.085"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.090" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.088" endtime="20190524 10:06:41.090"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.093" endtime="20190524 10:06:41.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].cdpIfPol.attributes.name}</arg>
<arg>cdp_enabled</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.096" endtime="20190524 10:06:41.096"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].cdpIfPol.attributes.adminSt}</arg>
<arg>enabled</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].cdpIfPol.attributes.adminSt}</arg>
<arg>enabled</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.098" endtime="20190524 10:06:41.099"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.097" endtime="20190524 10:06:41.099"></status>
</kw>
<doc>Verifies that CDP Interface Policy 'cdp_enabled' are configured with the expected parameters
- Interface Policy Name: cdp_enabled
- Description:
- Admin State: enabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.059" endtime="20190524 10:06:41.100" critical="yes"></status>
</test>
<test id="s1-t46" name="Verify ACI CDP Interface Policy Configuration - Policy Name cdp_disabled">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/cdpIfP-cdp_disabled</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.103" level="INFO">${uri} = /api/node/mo/uni/infra/cdpIfP-cdp_disabled</msg>
<status status="PASS" starttime="20190524 10:06:41.103" endtime="20190524 10:06:41.103"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.105" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.105" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/cdpIfP-cdp_disabled.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.126" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"cdpIfPol":{"attributes":{"adminSt":"disabled","annotation":"","childAction":"","descr":"","dn":"uni/infra/cdpIfP-cdp_disabled","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:38.759+00:00","monPolDn":"uni/fabric/monfab-default","name":"cdp_disabled","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.128" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fb5c08e80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.105" endtime="20190524 10:06:41.128"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.130" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.130" endtime="20190524 10:06:41.130"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.131" endtime="20190524 10:06:41.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].cdpIfPol.attributes.name}</arg>
<arg>cdp_disabled</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.133" endtime="20190524 10:06:41.134"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].cdpIfPol.attributes.adminSt}</arg>
<arg>disabled</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].cdpIfPol.attributes.adminSt}</arg>
<arg>disabled</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.137" endtime="20190524 10:06:41.138"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.135" endtime="20190524 10:06:41.138"></status>
</kw>
<doc>Verifies that CDP Interface Policy 'cdp_disabled' are configured with the expected parameters
- Interface Policy Name: cdp_disabled
- Description:
- Admin State: disabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.100" endtime="20190524 10:06:41.138" critical="yes"></status>
</test>
<test id="s1-t47" name="Verify ACI L2 Interface Policy Configuration - Policy Name global_vlan_scope">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/l2IfP-global_vlan_scope</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.141" level="INFO">${uri} = /api/node/mo/uni/infra/l2IfP-global_vlan_scope</msg>
<status status="PASS" starttime="20190524 10:06:41.141" endtime="20190524 10:06:41.141"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.143" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.143" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/l2IfP-global_vlan_scope.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.163" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l2IfPol":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/l2IfP-global_vlan_scope","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:38.983+00:00","name":"global_vlan_scope","nameAlias":"","ownerKey":"","ownerTag":"","qinq":"disabled","status":"","uid":"15374","vepa":"disabled","vlanScope":"global"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.165" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e66c18&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.143" endtime="20190524 10:06:41.165"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.167" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.167" endtime="20190524 10:06:41.168"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.169" endtime="20190524 10:06:41.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2IfPol.attributes.name}</arg>
<arg>global_vlan_scope</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.171" endtime="20190524 10:06:41.172"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2IfPol.attributes.vlanScope}</arg>
<arg>global</arg>
<arg>VLAN Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2IfPol.attributes.vlanScope}</arg>
<arg>global</arg>
<arg>VLAN Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.175" endtime="20190524 10:06:41.175"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.173" endtime="20190524 10:06:41.175"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2IfPol.attributes.qinq}</arg>
<arg>disabled</arg>
<arg>QinQ not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2IfPol.attributes.qinq}</arg>
<arg>disabled</arg>
<arg>QinQ not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.177" endtime="20190524 10:06:41.178"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.176" endtime="20190524 10:06:41.179"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2IfPol.attributes.vepa}</arg>
<arg>disabled</arg>
<arg>Reflective Relay not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2IfPol.attributes.vepa}</arg>
<arg>disabled</arg>
<arg>Reflective Relay not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.182" endtime="20190524 10:06:41.183"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.180" endtime="20190524 10:06:41.183"></status>
</kw>
<doc>Verifies that L2 Interface Policy 'global_vlan_scope' are configured with the expected parameters
- Interface Policy Name: global_vlan_scope
- VLAN Scope: global
- QinQ: disabled
- Reflective Relay: disabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.139" endtime="20190524 10:06:41.184" critical="yes"></status>
</test>
<test id="s1-t48" name="Verify ACI L2 Interface Policy Configuration - Policy Name portlocal_vlan_scope">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/l2IfP-portlocal_vlan_scope</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.192" level="INFO">${uri} = /api/node/mo/uni/infra/l2IfP-portlocal_vlan_scope</msg>
<status status="PASS" starttime="20190524 10:06:41.191" endtime="20190524 10:06:41.192"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.193" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.194" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/l2IfP-portlocal_vlan_scope.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.212" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l2IfPol":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/l2IfP-portlocal_vlan_scope","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:39.205+00:00","name":"portlocal_vlan_scope","nameAlias":"","ownerKey":"","ownerTag":"","qinq":"disabled","status":"","uid":"15374","vepa":"disabled","vlanScope":"portlocal"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.215" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e66da0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.193" endtime="20190524 10:06:41.215"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.217" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.217" endtime="20190524 10:06:41.217"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.219" endtime="20190524 10:06:41.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2IfPol.attributes.name}</arg>
<arg>portlocal_vlan_scope</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.221" endtime="20190524 10:06:41.222"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2IfPol.attributes.vlanScope}</arg>
<arg>portlocal</arg>
<arg>VLAN Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2IfPol.attributes.vlanScope}</arg>
<arg>portlocal</arg>
<arg>VLAN Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.225" endtime="20190524 10:06:41.226"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.223" endtime="20190524 10:06:41.226"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2IfPol.attributes.qinq}</arg>
<arg>disabled</arg>
<arg>QinQ not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2IfPol.attributes.qinq}</arg>
<arg>disabled</arg>
<arg>QinQ not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.229" endtime="20190524 10:06:41.230"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.228" endtime="20190524 10:06:41.230"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2IfPol.attributes.vepa}</arg>
<arg>disabled</arg>
<arg>Reflective Relay not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2IfPol.attributes.vepa}</arg>
<arg>disabled</arg>
<arg>Reflective Relay not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.234" endtime="20190524 10:06:41.235"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.232" endtime="20190524 10:06:41.235"></status>
</kw>
<doc>Verifies that L2 Interface Policy 'portlocal_vlan_scope' are configured with the expected parameters
- Interface Policy Name: portlocal_vlan_scope
- VLAN Scope: portlocal
- QinQ: disabled
- Reflective Relay: disabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.187" endtime="20190524 10:06:41.236" critical="yes"></status>
</test>
<test id="s1-t49" name="Verify ACI Link Level Interface Policy Configuration - Policy Name 40gig_auto">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/hintfpol-40gig_auto</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.242" level="INFO">${uri} = /api/node/mo/uni/infra/hintfpol-40gig_auto</msg>
<status status="PASS" starttime="20190524 10:06:41.241" endtime="20190524 10:06:41.242"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.245" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.245" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/hintfpol-40gig_auto.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.270" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricHIfPol":{"attributes":{"annotation":"","autoNeg":"on","childAction":"","descr":"","dn":"uni/infra/hintfpol-40gig_auto","extMngdBy":"","fecMode":"inherit","lcOwn":"local","linkDebounce":"100","modTs":"2019-05-23T00:35:39.426+00:00","monPolDn":"uni/fabric/monfab-default","name":"40gig_auto","nameAlias":"","ownerKey":"","ownerTag":"","speed":"40G","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.273" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fb5c08e80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.244" endtime="20190524 10:06:41.273"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.275" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.275" endtime="20190524 10:06:41.276"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.277" endtime="20190524 10:06:41.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.name}</arg>
<arg>40gig_auto</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.279" endtime="20190524 10:06:41.280"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>40G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>40G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.283" endtime="20190524 10:06:41.284"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.282" endtime="20190524 10:06:41.285"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>on</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>on</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.287" endtime="20190524 10:06:41.288"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.286" endtime="20190524 10:06:41.288"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.290" endtime="20190524 10:06:41.291"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.289" endtime="20190524 10:06:41.291"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.293" endtime="20190524 10:06:41.294"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.292" endtime="20190524 10:06:41.294"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.296" endtime="20190524 10:06:41.297"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.295" endtime="20190524 10:06:41.297"></status>
</kw>
<doc>Verifies that Link Level Channel Interface Policy '40gig_auto' are configured with the expected parameters
- Interface Policy Name: 40gig_auto
- Speed: 40G
- Auto Negotiation: on
- Link Debounce Interval: 100
- FEC Mode: inherit</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.238" endtime="20190524 10:06:41.297" critical="yes"></status>
</test>
<test id="s1-t50" name="Verify ACI Link Level Interface Policy Configuration - Policy Name 10gig_auto">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/hintfpol-10gig_auto</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.301" level="INFO">${uri} = /api/node/mo/uni/infra/hintfpol-10gig_auto</msg>
<status status="PASS" starttime="20190524 10:06:41.300" endtime="20190524 10:06:41.301"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.303" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.303" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/hintfpol-10gig_auto.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.326" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricHIfPol":{"attributes":{"annotation":"","autoNeg":"on","childAction":"","descr":"","dn":"uni/infra/hintfpol-10gig_auto","extMngdBy":"","fecMode":"inherit","lcOwn":"local","linkDebounce":"100","modTs":"2019-05-23T00:35:39.654+00:00","monPolDn":"uni/fabric/monfab-default","name":"10gig_auto","nameAlias":"","ownerKey":"","ownerTag":"","speed":"10G","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.329" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8da2ef0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.303" endtime="20190524 10:06:41.329"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.331" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.331" endtime="20190524 10:06:41.331"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.333" endtime="20190524 10:06:41.334"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.name}</arg>
<arg>10gig_auto</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.335" endtime="20190524 10:06:41.336"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>10G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>10G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.339" endtime="20190524 10:06:41.339"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.337" endtime="20190524 10:06:41.339"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>on</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>on</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.342" endtime="20190524 10:06:41.342"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.341" endtime="20190524 10:06:41.343"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.345" endtime="20190524 10:06:41.345"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.344" endtime="20190524 10:06:41.345"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.347" endtime="20190524 10:06:41.348"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.347" endtime="20190524 10:06:41.348"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.351" endtime="20190524 10:06:41.352"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.350" endtime="20190524 10:06:41.352"></status>
</kw>
<doc>Verifies that Link Level Channel Interface Policy '10gig_auto' are configured with the expected parameters
- Interface Policy Name: 10gig_auto
- Speed: 10G
- Auto Negotiation: on
- Link Debounce Interval: 100
- FEC Mode: inherit</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.298" endtime="20190524 10:06:41.352" critical="yes"></status>
</test>
<test id="s1-t51" name="Verify ACI Link Level Interface Policy Configuration - Policy Name 1gig_auto">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/hintfpol-1gig_auto</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.358" level="INFO">${uri} = /api/node/mo/uni/infra/hintfpol-1gig_auto</msg>
<status status="PASS" starttime="20190524 10:06:41.355" endtime="20190524 10:06:41.358"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.360" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.360" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/hintfpol-1gig_auto.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.380" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricHIfPol":{"attributes":{"annotation":"","autoNeg":"on","childAction":"","descr":"","dn":"uni/infra/hintfpol-1gig_auto","extMngdBy":"","fecMode":"inherit","lcOwn":"local","linkDebounce":"100","modTs":"2019-05-23T00:35:39.880+00:00","monPolDn":"uni/fabric/monfab-default","name":"1gig_auto","nameAlias":"","ownerKey":"","ownerTag":"","speed":"1G","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.384" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e33828&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.359" endtime="20190524 10:06:41.384"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.387" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.386" endtime="20190524 10:06:41.387"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.389" endtime="20190524 10:06:41.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.name}</arg>
<arg>1gig_auto</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.391" endtime="20190524 10:06:41.392"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>1G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>1G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.395" endtime="20190524 10:06:41.395"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.393" endtime="20190524 10:06:41.395"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>on</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>on</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.398" endtime="20190524 10:06:41.399"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.397" endtime="20190524 10:06:41.399"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.402" endtime="20190524 10:06:41.402"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.400" endtime="20190524 10:06:41.402"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.405" endtime="20190524 10:06:41.406"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.404" endtime="20190524 10:06:41.406"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.408" endtime="20190524 10:06:41.409"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.407" endtime="20190524 10:06:41.409"></status>
</kw>
<doc>Verifies that Link Level Channel Interface Policy '1gig_auto' are configured with the expected parameters
- Interface Policy Name: 1gig_auto
- Speed: 1G
- Auto Negotiation: on
- Link Debounce Interval: 100
- FEC Mode: inherit</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.353" endtime="20190524 10:06:41.409" critical="yes"></status>
</test>
<test id="s1-t52" name="Verify ACI Link Level Interface Policy Configuration - Policy Name 1gig_off">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/hintfpol-1gig_off</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.413" level="INFO">${uri} = /api/node/mo/uni/infra/hintfpol-1gig_off</msg>
<status status="PASS" starttime="20190524 10:06:41.413" endtime="20190524 10:06:41.413"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.415" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.415" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/hintfpol-1gig_off.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.435" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricHIfPol":{"attributes":{"annotation":"","autoNeg":"off","childAction":"","descr":"","dn":"uni/infra/hintfpol-1gig_off","extMngdBy":"","fecMode":"inherit","lcOwn":"local","linkDebounce":"100","modTs":"2019-05-23T00:35:40.094+00:00","monPolDn":"uni/fabric/monfab-default","name":"1gig_off","nameAlias":"","ownerKey":"","ownerTag":"","speed":"1G","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.437" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dd9a20&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.415" endtime="20190524 10:06:41.438"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.440" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.439" endtime="20190524 10:06:41.440"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.441" endtime="20190524 10:06:41.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.name}</arg>
<arg>1gig_off</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.443" endtime="20190524 10:06:41.443"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>1G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>1G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.446" endtime="20190524 10:06:41.446"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.445" endtime="20190524 10:06:41.446"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>off</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>off</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.448" endtime="20190524 10:06:41.449"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.447" endtime="20190524 10:06:41.449"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.451" endtime="20190524 10:06:41.452"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.450" endtime="20190524 10:06:41.452"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.454" endtime="20190524 10:06:41.455"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.453" endtime="20190524 10:06:41.455"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.457" endtime="20190524 10:06:41.458"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.456" endtime="20190524 10:06:41.458"></status>
</kw>
<doc>Verifies that Link Level Channel Interface Policy '1gig_off' are configured with the expected parameters
- Interface Policy Name: 1gig_off
- Speed: 1G
- Auto Negotiation: off
- Link Debounce Interval: 100
- FEC Mode: inherit</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.411" endtime="20190524 10:06:41.459" critical="yes"></status>
</test>
<test id="s1-t53" name="Verify ACI Link Level Interface Policy Configuration - Policy Name 10gig_off">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/hintfpol-10gig_off</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.462" level="INFO">${uri} = /api/node/mo/uni/infra/hintfpol-10gig_off</msg>
<status status="PASS" starttime="20190524 10:06:41.462" endtime="20190524 10:06:41.462"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.464" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.464" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/hintfpol-10gig_off.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.485" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricHIfPol":{"attributes":{"annotation":"","autoNeg":"off","childAction":"","descr":"","dn":"uni/infra/hintfpol-10gig_off","extMngdBy":"","fecMode":"inherit","lcOwn":"local","linkDebounce":"100","modTs":"2019-05-23T00:35:40.311+00:00","monPolDn":"uni/fabric/monfab-default","name":"10gig_off","nameAlias":"","ownerKey":"","ownerTag":"","speed":"10G","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.488" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e46e80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.464" endtime="20190524 10:06:41.488"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.493" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.492" endtime="20190524 10:06:41.493"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.496" endtime="20190524 10:06:41.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.name}</arg>
<arg>10gig_off</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.499" endtime="20190524 10:06:41.500"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>10G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>10G</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.504" endtime="20190524 10:06:41.505"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.503" endtime="20190524 10:06:41.506"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>off</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>off</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.509" endtime="20190524 10:06:41.509"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.507" endtime="20190524 10:06:41.509"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.511" endtime="20190524 10:06:41.512"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.510" endtime="20190524 10:06:41.512"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.515" endtime="20190524 10:06:41.515"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.514" endtime="20190524 10:06:41.515"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.518" endtime="20190524 10:06:41.519"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.517" endtime="20190524 10:06:41.519"></status>
</kw>
<doc>Verifies that Link Level Channel Interface Policy '10gig_off' are configured with the expected parameters
- Interface Policy Name: 10gig_off
- Speed: 10G
- Auto Negotiation: off
- Link Debounce Interval: 100
- FEC Mode: inherit</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.459" endtime="20190524 10:06:41.520" critical="yes"></status>
</test>
<test id="s1-t54" name="Verify ACI Link Level Interface Policy Configuration - Policy Name auto">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/hintfpol-auto</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.525" level="INFO">${uri} = /api/node/mo/uni/infra/hintfpol-auto</msg>
<status status="PASS" starttime="20190524 10:06:41.524" endtime="20190524 10:06:41.525"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.527" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.527" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/hintfpol-auto.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.547" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricHIfPol":{"attributes":{"annotation":"","autoNeg":"on","childAction":"","descr":"","dn":"uni/infra/hintfpol-auto","extMngdBy":"","fecMode":"inherit","lcOwn":"local","linkDebounce":"100","modTs":"2019-05-23T00:35:40.533+00:00","monPolDn":"uni/fabric/monfab-default","name":"auto","nameAlias":"","ownerKey":"","ownerTag":"","speed":"inherit","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.550" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8d50438&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.526" endtime="20190524 10:06:41.550"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.556" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.555" endtime="20190524 10:06:41.557"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.560" endtime="20190524 10:06:41.561"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.name}</arg>
<arg>auto</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.563" endtime="20190524 10:06:41.564"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>inherit</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.speed}</arg>
<arg>inherit</arg>
<arg>Speed not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.567" endtime="20190524 10:06:41.568"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.565" endtime="20190524 10:06:41.568"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>on</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.autoNeg}</arg>
<arg>on</arg>
<arg>AutoNeg not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.571" endtime="20190524 10:06:41.572"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.570" endtime="20190524 10:06:41.573"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.575" endtime="20190524 10:06:41.576"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.574" endtime="20190524 10:06:41.576"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.linkDebounce}</arg>
<arg>100</arg>
<arg>Link Debounce not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.578" endtime="20190524 10:06:41.579"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.577" endtime="20190524 10:06:41.579"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricHIfPol.attributes.fecMode}</arg>
<arg>inherit</arg>
<arg>FEC Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.582" endtime="20190524 10:06:41.582"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.580" endtime="20190524 10:06:41.583"></status>
</kw>
<doc>Verifies that Link Level Channel Interface Policy 'auto' are configured with the expected parameters
- Interface Policy Name: auto
- Speed: inherit
- Auto Negotiation: on
- Link Debounce Interval: 100
- FEC Mode: inherit</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.521" endtime="20190524 10:06:41.583" critical="yes"></status>
</test>
<test id="s1-t55" name="Verify ACI LLDP Interface Policy Configuration - Policy Name lldp_enabled">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lldpIfP-lldp_enabled</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.587" level="INFO">${uri} = /api/node/mo/uni/infra/lldpIfP-lldp_enabled</msg>
<status status="PASS" starttime="20190524 10:06:41.587" endtime="20190524 10:06:41.587"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.589" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.589" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lldpIfP-lldp_enabled.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.608" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lldpIfPol":{"attributes":{"adminRxSt":"enabled","adminTxSt":"enabled","annotation":"","childAction":"","descr":"","dn":"uni/infra/lldpIfP-lldp_enabled","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:40.763+00:00","monPolDn":"uni/fabric/monfab-default","name":"lldp_enabled","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.610" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dd59e8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.589" endtime="20190524 10:06:41.611"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.615" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.613" endtime="20190524 10:06:41.615"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.621" endtime="20190524 10:06:41.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpIfPol.attributes.name}</arg>
<arg>lldp_enabled</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.624" endtime="20190524 10:06:41.625"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lldpIfPol.attributes.adminRxSt}</arg>
<arg>enabled</arg>
<arg>Admin RX State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpIfPol.attributes.adminRxSt}</arg>
<arg>enabled</arg>
<arg>Admin RX State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.627" endtime="20190524 10:06:41.628"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.626" endtime="20190524 10:06:41.628"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lldpIfPol.attributes.adminTxSt}</arg>
<arg>enabled</arg>
<arg>Admin TX State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpIfPol.attributes.adminTxSt}</arg>
<arg>enabled</arg>
<arg>Admin TX State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.630" endtime="20190524 10:06:41.631"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.629" endtime="20190524 10:06:41.631"></status>
</kw>
<doc>Verifies that LLDP Interface Policy 'lldp_enabled' are configured with the expected parameters
- Interface Policy Name: lldp_enabled
- Admin State (RX): enabled
- Admin State (TX): enabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.585" endtime="20190524 10:06:41.631" critical="yes"></status>
</test>
<test id="s1-t56" name="Verify ACI LLDP Interface Policy Configuration - Policy Name lldp_disabled">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lldpIfP-lldp_disabled</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.635" level="INFO">${uri} = /api/node/mo/uni/infra/lldpIfP-lldp_disabled</msg>
<status status="PASS" starttime="20190524 10:06:41.634" endtime="20190524 10:06:41.635"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.637" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.637" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lldpIfP-lldp_disabled.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.660" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lldpIfPol":{"attributes":{"adminRxSt":"disabled","adminTxSt":"disabled","annotation":"","childAction":"","descr":"","dn":"uni/infra/lldpIfP-lldp_disabled","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:41.193+00:00","monPolDn":"uni/fabric/monfab-default","name":"lldp_disabled","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.662" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8db02b0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.636" endtime="20190524 10:06:41.662"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.667" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.665" endtime="20190524 10:06:41.667"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.671" endtime="20190524 10:06:41.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpIfPol.attributes.name}</arg>
<arg>lldp_disabled</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.675" endtime="20190524 10:06:41.675"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lldpIfPol.attributes.adminRxSt}</arg>
<arg>disabled</arg>
<arg>Admin RX State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpIfPol.attributes.adminRxSt}</arg>
<arg>disabled</arg>
<arg>Admin RX State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.677" endtime="20190524 10:06:41.678"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.676" endtime="20190524 10:06:41.678"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lldpIfPol.attributes.adminTxSt}</arg>
<arg>disabled</arg>
<arg>Admin TX State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpIfPol.attributes.adminTxSt}</arg>
<arg>disabled</arg>
<arg>Admin TX State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.680" endtime="20190524 10:06:41.681"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.679" endtime="20190524 10:06:41.681"></status>
</kw>
<doc>Verifies that LLDP Interface Policy 'lldp_disabled' are configured with the expected parameters
- Interface Policy Name: lldp_disabled
- Admin State (RX): disabled
- Admin State (TX): disabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.632" endtime="20190524 10:06:41.682" critical="yes"></status>
</test>
<test id="s1-t57" name="Verify ACI MCP Interface Policy Configuration - Policy Name mcp_enabled">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/mcpIfP-mcp_enabled</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.686" level="INFO">${uri} = /api/node/mo/uni/infra/mcpIfP-mcp_enabled</msg>
<status status="PASS" starttime="20190524 10:06:41.685" endtime="20190524 10:06:41.686"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.688" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.688" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/mcpIfP-mcp_enabled.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.710" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"mcpIfPol":{"attributes":{"adminSt":"enabled","annotation":"","childAction":"","descr":"","dn":"uni/infra/mcpIfP-mcp_enabled","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:41.422+00:00","name":"mcp_enabled","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.713" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8df60b8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.687" endtime="20190524 10:06:41.713"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.720" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.717" endtime="20190524 10:06:41.720"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.724" endtime="20190524 10:06:41.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].mcpIfPol.attributes.name}</arg>
<arg>mcp_enabled</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.727" endtime="20190524 10:06:41.727"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].mcpIfPol.attributes.adminSt}</arg>
<arg>enabled</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].mcpIfPol.attributes.adminSt}</arg>
<arg>enabled</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.730" endtime="20190524 10:06:41.731"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.729" endtime="20190524 10:06:41.731"></status>
</kw>
<doc>Verifies that LLDP Interface Policy 'mcp_enabled' are configured with the expected parameters
- Interface Policy Name: mcp_enabled
- MCP State: enabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.683" endtime="20190524 10:06:41.731" critical="yes"></status>
</test>
<test id="s1-t58" name="Verify ACI MCP Interface Policy Configuration - Policy Name mcp_disabled">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/mcpIfP-mcp_disabled</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.735" level="INFO">${uri} = /api/node/mo/uni/infra/mcpIfP-mcp_disabled</msg>
<status status="PASS" starttime="20190524 10:06:41.735" endtime="20190524 10:06:41.736"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.738" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.738" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/mcpIfP-mcp_disabled.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.799" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"mcpIfPol":{"attributes":{"adminSt":"disabled","annotation":"","childAction":"","descr":"","dn":"uni/infra/mcpIfP-mcp_disabled","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:41.641+00:00","name":"mcp_disabled","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.802" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e06d68&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.738" endtime="20190524 10:06:41.802"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.806" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.805" endtime="20190524 10:06:41.806"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.808" endtime="20190524 10:06:41.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].mcpIfPol.attributes.name}</arg>
<arg>mcp_disabled</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.810" endtime="20190524 10:06:41.811"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].mcpIfPol.attributes.adminSt}</arg>
<arg>disabled</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].mcpIfPol.attributes.adminSt}</arg>
<arg>disabled</arg>
<arg>Admin State not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.814" endtime="20190524 10:06:41.815"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.812" endtime="20190524 10:06:41.815"></status>
</kw>
<doc>Verifies that LLDP Interface Policy 'mcp_disabled' are configured with the expected parameters
- Interface Policy Name: mcp_disabled
- MCP State: disabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.732" endtime="20190524 10:06:41.815" critical="yes"></status>
</test>
<test id="s1-t59" name="Verify ACI Port Channel Interface Policy Configuration - Policy Name lacp_active">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lacplagp-lacp_active</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.819" level="INFO">${uri} = /api/node/mo/uni/infra/lacplagp-lacp_active</msg>
<status status="PASS" starttime="20190524 10:06:41.819" endtime="20190524 10:06:41.819"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.821" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.821" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lacplagp-lacp_active.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.841" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lacpLagPol":{"attributes":{"annotation":"","childAction":"","ctrl":"fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash","descr":"","dn":"uni/infra/lacplagp-lacp_active","extMngdBy":"","lcOwn":"local","maxLinks":"16","minLinks":"1","modTs":"2019-05-23T00:35:41.884+00:00","mode":"active","monPolDn":"uni/fabric/monfab-default","name":"lacp_active","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.844" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8df6668&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.820" endtime="20190524 10:06:41.844"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.846" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.846" endtime="20190524 10:06:41.847"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.848" endtime="20190524 10:06:41.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.name}</arg>
<arg>lacp_active</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.851" endtime="20190524 10:06:41.852"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.mode}</arg>
<arg>active</arg>
<arg>Port Channel Mode (LACP) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.mode}</arg>
<arg>active</arg>
<arg>Port Channel Mode (LACP) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.854" endtime="20190524 10:06:41.855"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.853" endtime="20190524 10:06:41.855"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.minLinks}</arg>
<arg>1</arg>
<arg>Min Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.minLinks}</arg>
<arg>1</arg>
<arg>Min Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.858" endtime="20190524 10:06:41.859"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.857" endtime="20190524 10:06:41.859"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.maxLinks}</arg>
<arg>16</arg>
<arg>Max Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.maxLinks}</arg>
<arg>16</arg>
<arg>Max Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.861" endtime="20190524 10:06:41.862"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.860" endtime="20190524 10:06:41.862"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.ctrl}</arg>
<arg>fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash</arg>
<arg>Control Kobs not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.ctrl}</arg>
<arg>fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash</arg>
<arg>Control Kobs not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.864" endtime="20190524 10:06:41.865"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.863" endtime="20190524 10:06:41.865"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lacplagp-lacp_active/loadbalanceP</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.866" level="INFO">${uri} = /api/node/mo/uni/infra/lacplagp-lacp_active/loadbalanceP</msg>
<status status="PASS" starttime="20190524 10:06:41.866" endtime="20190524 10:06:41.866"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.868" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.868" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lacplagp-lacp_active/loadbalanceP.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.887" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l2LoadBalancePol":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/lacplagp-lacp_active/loadbalanceP","extMngdBy":"","hashFields":"l4-src-port","lcOwn":"local","modTs":"2019-05-23T00:35:41.884+00:00","name":"","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.889" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dde860&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.868" endtime="20190524 10:06:41.889"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure Retrieving Port Channel Hash configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.891" endtime="20190524 10:06:41.892"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2LoadBalancePol.attributes.hashFields}</arg>
<arg>l4-src-port</arg>
<arg>Port Channel Hash Key not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2LoadBalancePol.attributes.hashFields}</arg>
<arg>l4-src-port</arg>
<arg>Port Channel Hash Key not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.895" endtime="20190524 10:06:41.896"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.894" endtime="20190524 10:06:41.896"></status>
</kw>
<doc>Verifies that Port Channel Interface Policy 'lacp_active' are configured with the expected parameters
- Interface Policy Name: lacp_active
- Port-Channel Mode (LACP): active
- Fast Select Hot Standby: yes
- Graceful Converge: yes
- Load Defer: yes
- Suspend Individual: yes
- Symmetric Hash: yes
- Hash Key: l4-src-port
- Min Links: 1
- Max Links: 16
- Control: fast-sel-hot-stdby,graceful-conv,susp-individual</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.816" endtime="20190524 10:06:41.896" critical="yes"></status>
</test>
<test id="s1-t60" name="Verify ACI Port Channel Interface Policy Configuration - Policy Name lacp_passive">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lacplagp-lacp_passive</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.899" level="INFO">${uri} = /api/node/mo/uni/infra/lacplagp-lacp_passive</msg>
<status status="PASS" starttime="20190524 10:06:41.899" endtime="20190524 10:06:41.899"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.901" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.901" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lacplagp-lacp_passive.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.920" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lacpLagPol":{"attributes":{"annotation":"","childAction":"","ctrl":"fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash","descr":"","dn":"uni/infra/lacplagp-lacp_passive","extMngdBy":"","lcOwn":"local","maxLinks":"16","minLinks":"1","modTs":"2019-05-23T00:35:42.110+00:00","mode":"passive","monPolDn":"uni/fabric/monfab-default","name":"lacp_passive","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.923" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e46cf8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.900" endtime="20190524 10:06:41.923"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:41.925" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.925" endtime="20190524 10:06:41.925"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.927" endtime="20190524 10:06:41.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.name}</arg>
<arg>lacp_passive</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.929" endtime="20190524 10:06:41.929"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.mode}</arg>
<arg>passive</arg>
<arg>Port Channel Mode (LACP) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.mode}</arg>
<arg>passive</arg>
<arg>Port Channel Mode (LACP) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.932" endtime="20190524 10:06:41.933"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.931" endtime="20190524 10:06:41.933"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.minLinks}</arg>
<arg>1</arg>
<arg>Min Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.minLinks}</arg>
<arg>1</arg>
<arg>Min Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.935" endtime="20190524 10:06:41.936"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.934" endtime="20190524 10:06:41.936"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.maxLinks}</arg>
<arg>16</arg>
<arg>Max Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.maxLinks}</arg>
<arg>16</arg>
<arg>Max Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.939" endtime="20190524 10:06:41.939"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.937" endtime="20190524 10:06:41.940"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.ctrl}</arg>
<arg>fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash</arg>
<arg>Control Kobs not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.ctrl}</arg>
<arg>fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash</arg>
<arg>Control Kobs not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.942" endtime="20190524 10:06:41.943"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.941" endtime="20190524 10:06:41.943"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lacplagp-lacp_passive/loadbalanceP</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.945" level="INFO">${uri} = /api/node/mo/uni/infra/lacplagp-lacp_passive/loadbalanceP</msg>
<status status="PASS" starttime="20190524 10:06:41.944" endtime="20190524 10:06:41.945"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.946" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.947" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lacplagp-lacp_passive/loadbalanceP.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:41.965" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l2LoadBalancePol":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/lacplagp-lacp_passive/loadbalanceP","extMngdBy":"","hashFields":"l4-src-port","lcOwn":"local","modTs":"2019-05-23T00:35:42.110+00:00","name":"","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:41.969" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e002e8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.946" endtime="20190524 10:06:41.969"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure Retrieving Port Channel Hash configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.970" endtime="20190524 10:06:41.971"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2LoadBalancePol.attributes.hashFields}</arg>
<arg>l4-src-port</arg>
<arg>Port Channel Hash Key not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2LoadBalancePol.attributes.hashFields}</arg>
<arg>l4-src-port</arg>
<arg>Port Channel Hash Key not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:41.974" endtime="20190524 10:06:41.975"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:41.972" endtime="20190524 10:06:41.976"></status>
</kw>
<doc>Verifies that Port Channel Interface Policy 'lacp_passive' are configured with the expected parameters
- Interface Policy Name: lacp_passive
- Port-Channel Mode (LACP): passive
- Fast Select Hot Standby: yes
- Graceful Converge: yes
- Load Defer: yes
- Suspend Individual: yes
- Symmetric Hash: yes
- Hash Key: l4-src-port
- Min Links: 1
- Max Links: 16
- Control: fast-sel-hot-stdby,graceful-conv,susp-individual</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.897" endtime="20190524 10:06:41.976" critical="yes"></status>
</test>
<test id="s1-t61" name="Verify ACI Port Channel Interface Policy Configuration - Policy Name static_on">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lacplagp-static_on</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:41.980" level="INFO">${uri} = /api/node/mo/uni/infra/lacplagp-static_on</msg>
<status status="PASS" starttime="20190524 10:06:41.980" endtime="20190524 10:06:41.980"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:41.982" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:41.982" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lacplagp-static_on.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.003" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lacpLagPol":{"attributes":{"annotation":"","childAction":"","ctrl":"fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash","descr":"","dn":"uni/infra/lacplagp-static_on","extMngdBy":"","lcOwn":"local","maxLinks":"16","minLinks":"1","modTs":"2019-05-23T00:35:42.331+00:00","mode":"off","monPolDn":"uni/fabric/monfab-default","name":"static_on","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:42.006" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e06e48&gt;</msg>
<status status="PASS" starttime="20190524 10:06:41.981" endtime="20190524 10:06:42.006"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.008" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.007" endtime="20190524 10:06:42.008"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.009" endtime="20190524 10:06:42.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.name}</arg>
<arg>static_on</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.012" endtime="20190524 10:06:42.012"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.mode}</arg>
<arg>off</arg>
<arg>Port Channel Mode (LACP) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.mode}</arg>
<arg>off</arg>
<arg>Port Channel Mode (LACP) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.015" endtime="20190524 10:06:42.015"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.013" endtime="20190524 10:06:42.015"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.minLinks}</arg>
<arg>1</arg>
<arg>Min Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.minLinks}</arg>
<arg>1</arg>
<arg>Min Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.018" endtime="20190524 10:06:42.019"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.017" endtime="20190524 10:06:42.019"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.maxLinks}</arg>
<arg>16</arg>
<arg>Max Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.maxLinks}</arg>
<arg>16</arg>
<arg>Max Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.021" endtime="20190524 10:06:42.022"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.020" endtime="20190524 10:06:42.022"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.ctrl}</arg>
<arg>fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash</arg>
<arg>Control Kobs not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.ctrl}</arg>
<arg>fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash</arg>
<arg>Control Kobs not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.025" endtime="20190524 10:06:42.026"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.024" endtime="20190524 10:06:42.026"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lacplagp-static_on/loadbalanceP</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:42.028" level="INFO">${uri} = /api/node/mo/uni/infra/lacplagp-static_on/loadbalanceP</msg>
<status status="PASS" starttime="20190524 10:06:42.027" endtime="20190524 10:06:42.028"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:42.031" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:42.031" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lacplagp-static_on/loadbalanceP.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.053" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l2LoadBalancePol":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/lacplagp-static_on/loadbalanceP","extMngdBy":"","hashFields":"l4-src-port","lcOwn":"local","modTs":"2019-05-23T00:35:42.331+00:00","name":"","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:42.058" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dde710&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.030" endtime="20190524 10:06:42.058"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure Retrieving Port Channel Hash configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.060" endtime="20190524 10:06:42.061"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2LoadBalancePol.attributes.hashFields}</arg>
<arg>l4-src-port</arg>
<arg>Port Channel Hash Key not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2LoadBalancePol.attributes.hashFields}</arg>
<arg>l4-src-port</arg>
<arg>Port Channel Hash Key not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.064" endtime="20190524 10:06:42.065"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.063" endtime="20190524 10:06:42.065"></status>
</kw>
<doc>Verifies that Port Channel Interface Policy 'static_on' are configured with the expected parameters
- Interface Policy Name: static_on
- Port-Channel Mode (LACP): off
- Fast Select Hot Standby: yes
- Graceful Converge: yes
- Load Defer: yes
- Suspend Individual: yes
- Symmetric Hash: yes
- Hash Key: l4-src-port
- Min Links: 1
- Max Links: 16
- Control: fast-sel-hot-stdby,graceful-conv,susp-individual</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:41.978" endtime="20190524 10:06:42.066" critical="yes"></status>
</test>
<test id="s1-t62" name="Verify ACI Port Channel Interface Policy Configuration - Policy Name mac_pinning">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lacplagp-mac_pinning</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:42.071" level="INFO">${uri} = /api/node/mo/uni/infra/lacplagp-mac_pinning</msg>
<status status="PASS" starttime="20190524 10:06:42.070" endtime="20190524 10:06:42.071"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:42.073" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:42.073" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lacplagp-mac_pinning.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.093" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lacpLagPol":{"attributes":{"annotation":"","childAction":"","ctrl":"fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash","descr":"","dn":"uni/infra/lacplagp-mac_pinning","extMngdBy":"","lcOwn":"local","maxLinks":"16","minLinks":"1","modTs":"2019-05-23T00:35:42.550+00:00","mode":"mac-pin","monPolDn":"uni/fabric/monfab-default","name":"mac_pinning","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:42.095" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dde208&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.073" endtime="20190524 10:06:42.095"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.097" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.097" endtime="20190524 10:06:42.098"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.099" endtime="20190524 10:06:42.100"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.name}</arg>
<arg>mac_pinning</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.101" endtime="20190524 10:06:42.102"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.mode}</arg>
<arg>mac-pin</arg>
<arg>Port Channel Mode (LACP) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.mode}</arg>
<arg>mac-pin</arg>
<arg>Port Channel Mode (LACP) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.105" endtime="20190524 10:06:42.105"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.104" endtime="20190524 10:06:42.105"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.minLinks}</arg>
<arg>1</arg>
<arg>Min Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.minLinks}</arg>
<arg>1</arg>
<arg>Min Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.109" endtime="20190524 10:06:42.109"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.107" endtime="20190524 10:06:42.109"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.maxLinks}</arg>
<arg>16</arg>
<arg>Max Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.maxLinks}</arg>
<arg>16</arg>
<arg>Max Links not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.111" endtime="20190524 10:06:42.112"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.110" endtime="20190524 10:06:42.112"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].lacpLagPol.attributes.ctrl}</arg>
<arg>fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash</arg>
<arg>Control Kobs not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lacpLagPol.attributes.ctrl}</arg>
<arg>fast-sel-hot-stdby,graceful-conv,load-defer,susp-individual,symmetric-hash</arg>
<arg>Control Kobs not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.114" endtime="20190524 10:06:42.115"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.113" endtime="20190524 10:06:42.115"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/lacplagp-mac_pinning/loadbalanceP</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:42.117" level="INFO">${uri} = /api/node/mo/uni/infra/lacplagp-mac_pinning/loadbalanceP</msg>
<status status="PASS" starttime="20190524 10:06:42.116" endtime="20190524 10:06:42.117"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:42.120" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:42.120" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/lacplagp-mac_pinning/loadbalanceP.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.142" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l2LoadBalancePol":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/lacplagp-mac_pinning/loadbalanceP","extMngdBy":"","hashFields":"l4-src-port","lcOwn":"local","modTs":"2019-05-23T00:35:42.550+00:00","name":"","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:42.145" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dddda0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.119" endtime="20190524 10:06:42.145"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure Retrieving Port Channel Hash configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.149" endtime="20190524 10:06:42.151"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].l2LoadBalancePol.attributes.hashFields}</arg>
<arg>l4-src-port</arg>
<arg>Port Channel Hash Key not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l2LoadBalancePol.attributes.hashFields}</arg>
<arg>l4-src-port</arg>
<arg>Port Channel Hash Key not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.155" endtime="20190524 10:06:42.156"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.154" endtime="20190524 10:06:42.156"></status>
</kw>
<doc>Verifies that Port Channel Interface Policy 'mac_pinning' are configured with the expected parameters
- Interface Policy Name: mac_pinning
- Port-Channel Mode (LACP): mac-pin
- Fast Select Hot Standby: yes
- Graceful Converge: yes
- Load Defer: yes
- Suspend Individual: yes
- Symmetric Hash: yes
- Hash Key: l4-src-port
- Min Links: 1
- Max Links: 16
- Control: fast-sel-hot-stdby,graceful-conv,susp-individual</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:42.068" endtime="20190524 10:06:42.156" critical="yes"></status>
</test>
<test id="s1-t63" name="Verify ACI STP Interface Policy Configuration - Policy Name bpdu_guard">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/ifPol-bpdu_guard</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:42.160" level="INFO">${uri} = /api/node/mo/uni/infra/ifPol-bpdu_guard</msg>
<status status="PASS" starttime="20190524 10:06:42.159" endtime="20190524 10:06:42.160"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:42.161" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:42.161" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/ifPol-bpdu_guard.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.181" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"stpIfPol":{"attributes":{"annotation":"","childAction":"","ctrl":"bpdu-guard","descr":"","dn":"uni/infra/ifPol-bpdu_guard","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:42.780+00:00","monPolDn":"uni/fabric/monfab-default","name":"bpdu_guard","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:42.185" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e060b8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.161" endtime="20190524 10:06:42.185"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.187" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.187" endtime="20190524 10:06:42.188"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.189" endtime="20190524 10:06:42.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].stpIfPol.attributes.name}</arg>
<arg>bpdu_guard</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.191" endtime="20190524 10:06:42.192"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].stpIfPol.attributes.ctrl}"</arg>
<arg>"bpdu-guard"</arg>
<arg>STP Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].stpIfPol.attributes.ctrl}"</arg>
<arg>"bpdu-guard"</arg>
<arg>STP Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.195" endtime="20190524 10:06:42.195"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.193" endtime="20190524 10:06:42.195"></status>
</kw>
<doc>Verifies that STP Channel Interface Policy 'bpdu_guard' are configured with the expected parameters
- Interface Policy Name: bpdu_guard
- STP Control: bpdu-guard</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:42.157" endtime="20190524 10:06:42.196" critical="yes"></status>
</test>
<test id="s1-t64" name="Verify ACI STP Interface Policy Configuration - Policy Name default">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/ifPol-default</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:42.199" level="INFO">${uri} = /api/node/mo/uni/infra/ifPol-default</msg>
<status status="PASS" starttime="20190524 10:06:42.199" endtime="20190524 10:06:42.199"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:42.201" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:42.201" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/ifPol-default.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.221" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"stpIfPol":{"attributes":{"annotation":"","childAction":"","ctrl":"","descr":"","dn":"uni/infra/ifPol-default","extMngdBy":"","lcOwn":"local","modTs":"2019-05-22T06:10:04.380+00:00","monPolDn":"uni/fabric/monfab-default","name":"default","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:42.223" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa903b278&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.200" endtime="20190524 10:06:42.223"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.225" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.225" endtime="20190524 10:06:42.225"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.227" endtime="20190524 10:06:42.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].stpIfPol.attributes.name}</arg>
<arg>default</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.228" endtime="20190524 10:06:42.229"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].stpIfPol.attributes.ctrl}"</arg>
<arg>""</arg>
<arg>STP Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].stpIfPol.attributes.ctrl}"</arg>
<arg>""</arg>
<arg>STP Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.231" endtime="20190524 10:06:42.232"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.230" endtime="20190524 10:06:42.232"></status>
</kw>
<doc>Verifies that STP Channel Interface Policy 'default' are configured with the expected parameters
- Interface Policy Name: default
- STP Control:</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:42.196" endtime="20190524 10:06:42.232" critical="yes"></status>
</test>
<test id="s1-t65" name="Verify ACI STP Interface Policy Configuration - Policy Name bpdu_filter">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/ifPol-bpdu_filter</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:42.235" level="INFO">${uri} = /api/node/mo/uni/infra/ifPol-bpdu_filter</msg>
<status status="PASS" starttime="20190524 10:06:42.235" endtime="20190524 10:06:42.235"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:42.238" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:42.238" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/ifPol-bpdu_filter.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.259" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"stpIfPol":{"attributes":{"annotation":"","childAction":"","ctrl":"bpdu-filter","descr":"","dn":"uni/infra/ifPol-bpdu_filter","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:43.231+00:00","monPolDn":"uni/fabric/monfab-default","name":"bpdu_filter","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:42.262" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e33470&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.237" endtime="20190524 10:06:42.262"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.265" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.264" endtime="20190524 10:06:42.265"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.266" endtime="20190524 10:06:42.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].stpIfPol.attributes.name}</arg>
<arg>bpdu_filter</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.269" endtime="20190524 10:06:42.269"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].stpIfPol.attributes.ctrl}"</arg>
<arg>"bpdu-filter"</arg>
<arg>STP Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].stpIfPol.attributes.ctrl}"</arg>
<arg>"bpdu-filter"</arg>
<arg>STP Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.272" endtime="20190524 10:06:42.273"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.271" endtime="20190524 10:06:42.273"></status>
</kw>
<doc>Verifies that STP Channel Interface Policy 'bpdu_filter' are configured with the expected parameters
- Interface Policy Name: bpdu_filter
- STP Control: bpdu-filter</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:42.233" endtime="20190524 10:06:42.273" critical="yes"></status>
</test>
<test id="s1-t66" name="Verify ACI STP Interface Policy Configuration - Policy Name bpdu_filter_guard">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/ifPol-bpdu_filter_guard</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:42.276" level="INFO">${uri} = /api/node/mo/uni/infra/ifPol-bpdu_filter_guard</msg>
<status status="PASS" starttime="20190524 10:06:42.276" endtime="20190524 10:06:42.276"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:42.278" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:42.278" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/ifPol-bpdu_filter_guard.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.297" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"stpIfPol":{"attributes":{"annotation":"","childAction":"","ctrl":"bpdu-filter,bpdu-guard","descr":"","dn":"uni/infra/ifPol-bpdu_filter_guard","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:43.459+00:00","monPolDn":"uni/fabric/monfab-default","name":"bpdu_filter_guard","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:42.300" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8df64e0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.278" endtime="20190524 10:06:42.300"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.302" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.302" endtime="20190524 10:06:42.303"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.304" endtime="20190524 10:06:42.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].stpIfPol.attributes.name}</arg>
<arg>bpdu_filter_guard</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.306" endtime="20190524 10:06:42.307"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].stpIfPol.attributes.ctrl}"</arg>
<arg>"bpdu-filter,bpdu-guard"</arg>
<arg>STP Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].stpIfPol.attributes.ctrl}"</arg>
<arg>"bpdu-filter,bpdu-guard"</arg>
<arg>STP Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.310" endtime="20190524 10:06:42.311"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.308" endtime="20190524 10:06:42.311"></status>
</kw>
<doc>Verifies that STP Channel Interface Policy 'bpdu_filter_guard' are configured with the expected parameters
- Interface Policy Name: bpdu_filter_guard
- STP Control: bpdu-filter,bpdu-guard</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:42.274" endtime="20190524 10:06:42.311" critical="yes"></status>
</test>
<test id="s1-t67" name="Verify ACI Leaf Interface Policy Group Configuration - Policy Group Name Access_Port">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/funcprof/accportgrp-Access_Port</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:42.314" level="INFO">${uri} = /api/node/mo/uni/infra/funcprof/accportgrp-Access_Port</msg>
<status status="PASS" starttime="20190524 10:06:42.314" endtime="20190524 10:06:42.314"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:42.316" level="INFO">${filter} = rsp-subtree=full</msg>
<status status="PASS" starttime="20190524 10:06:42.316" endtime="20190524 10:06:42.316"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:42.318" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:42.318" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/funcprof/accportgrp-Access_Port.json?rsp-subtree=full
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:42.363" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraAccPortGrp":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/funcprof/accportgrp-Access_Port","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","name":"Access_Port","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRsStpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsstpIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"stpIfPol","tContextDn":"","tDn":"uni/infra/ifPol-default","tRn":"ifPol-default","tType":"name","tnStpIfPolName":"","uid":"0"}}},{"infraRsQosIngressDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsQosIngressDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsStormctrlIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsstormctrlIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"stormctrlIfPol","tContextDn":"","tDn":"uni/infra/stormctrlifp-default","tRn":"stormctrlifp-default","tType":"name","tnStormctrlIfPolName":"","uid":"0"}}},{"infraRsQosEgressDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsQosEgressDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsMonIfInfraPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmonIfInfraPol","state":"formed","stateQual":"default-target","status":"","tCl":"monInfraPol","tContextDn":"","tDn":"uni/infra/moninfra-default","tRn":"moninfra-default","tType":"name","tnMonInfraPolName":"","uid":"0"}}},{"infraRsMcpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmcpIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"mcpIfPol","tContextDn":"","tDn":"uni/infra/mcpIfP-default","tRn":"mcpIfP-default","tType":"name","tnMcpIfPolName":"","uid":"0"}}},{"infraRsMacsecIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmacsecIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"macsecIfPol","tContextDn":"","tDn":"uni/infra/macsecifp-default","tRn":"macsecifp-default","tType":"name","tnMacsecIfPolName":"","uid":"0"}}},{"infraRsQosSdIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosSdIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosSdIfPol","tContextDn":"","tDn":"uni/infra/qossdpol-default","tRn":"qossdpol-default","tType":"name","tnQosSdIfPolName":"","uid":"0"}}},{"infraRsPoeIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rspoeIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"poeIfPol","tContextDn":"","tDn":"uni/infra/poeIfP-default","tRn":"poeIfP-default","tType":"name","tnPoeIfPolName":"","uid":"0"}}},{"infraRsAttEntP":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","isUsingConnSel":"no","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsattEntP","state":"formed","stateQual":"none","status":"","tCl":"infraAttEntityP","tDn":"uni/infra/attentp-baremetal","tType":"mo","uid":"15374"}}},{"infraRsCdpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rscdpIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"cdpIfPol","tContextDn":"","tDn":"uni/infra/cdpIfP-default","tRn":"cdpIfP-default","tType":"name","tnCdpIfPolName":"","uid":"0"}}},{"infraRsL2IfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2IfPol","state":"formed","stateQual":"default-target","status":"","tCl":"l2IfPol","tContextDn":"","tDn":"uni/infra/l2IfP-default","tRn":"l2IfP-default","tType":"name","tnL2IfPolName":"","uid":"0"}}},{"infraRtAccBaseGrp":{"attributes":{"childAction":"","lcOwn":"local","modTs":"2019-05-23T00:35:47.673+00:00","rn":"rtaccBaseGrp-[uni/infra/accportprof-Leaf/hports-e3-typ-range]","status":"","tCl":"infraHPortS","tDn":"uni/infra/accportprof-Leaf/hports-e3-typ-range"}}},{"infraRtAccBaseGrp":{"attributes":{"childAction":"","lcOwn":"local","modTs":"2019-05-23T00:35:47.206+00:00","rn":"rtaccBaseGrp-[uni/infra/accportprof-Leaf/hports-e1-typ-range]","status":"","tCl":"infraHPortS","tDn":"uni/infra/accportprof-Leaf/hports-e1-typ-range"}}},{"infraRsQosDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsCoppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rscoppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"coppIfPol","tContextDn":"","tDn":"uni/infra/coppifpol-default","tRn":"coppifpol-default","tType":"name","tnCoppIfPolName":"","uid":"0"}}},{"infraRsDwdmIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsdwdmIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"dwdmIfPol","tContextDn":"","tDn":"uni/infra/dwdmifpol-default","tRn":"dwdmifpol-default","tType":"name","tnDwdmIfPolName":"","uid":"0"}}},{"infraRsLldpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rslldpIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"lldpIfPol","tContextDn":"","tDn":"uni/infra/lldpIfP-default","tRn":"lldpIfP-default","tType":"name","tnLldpIfPolName":"","uid":"0"}}},{"infraRsFcIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsfcIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"fcIfPol","tContextDn":"","tDn":"uni/infra/fcIfPol-default","tRn":"fcIfPol-default","tType":"name","tnFcIfPolName":"","uid":"0"}}},{"infraRsQosPfcIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosPfcIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosPfcIfPol","tContextDn":"","tDn":"uni/infra/pfc-default","tRn":"pfc-default","tType":"name","tnQosPfcIfPolName":"","uid":"0"}}},{"infraRsHIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rshIfPol","state":"formed","stateQual":"none","status":"","tCl":"fabricHIfPol","tContextDn":"","tDn":"uni/infra/hintfpol-10gig_auto","tRn":"hintfpol-10gig_auto","tType":"name","tnFabricHIfPolName":"10gig_auto","uid":"0"}}},{"infraRsL2PortSecurityPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2PortSecurityPol","state":"formed","stateQual":"default-target","status":"","tCl":"l2PortSecurityPol","tContextDn":"","tDn":"uni/infra/portsecurityP-default","tRn":"portsecurityP-default","tType":"name","tnL2PortSecurityPolName":"","uid":"0"}}},{"infraRsL2PortAuthPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:43.808+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2PortAuthPol","state":"formed","stateQual":"default-target","status":"","tCl":"l2PortAuthPol","tContextDn":"","tDn":"uni/infra/portauthpol-default","tRn":"portauthpol-default","tType":"name","tnL2PortAuthPolName":"","uid":"0"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:42.404" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dd98d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.317" endtime="20190524 10:06:42.404"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.407" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:42.406" endtime="20190524 10:06:42.407"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy Group does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.409" endtime="20190524 10:06:42.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraAccPortGrp.attributes.name}</arg>
<arg>Access_Port</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.411" endtime="20190524 10:06:42.412"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>False</arg>
</arguments>
<assign>
<var>${lldp_found}</var>
</assign>
<msg timestamp="20190524 10:06:42.414" level="INFO">${lldp_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.414" endtime="20190524 10:06:42.414"></status>
</kw>
<kw name="${if_policy} IN [ @{return.payload[0].infraAccPortGrp.children} ]" type="for">
<kw name="${if_policy} = X(infraRsStpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.421" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.416" endtime="20190524 10:06:42.421"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.425" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.424" endtime="20190524 10:06:42.425"></status>
</kw>
<msg timestamp="20190524 10:06:42.425" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.422" endtime="20190524 10:06:42.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.426" endtime="20190524 10:06:42.426"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.428" endtime="20190524 10:06:42.428"></status>
</kw>
<msg timestamp="20190524 10:06:42.428" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:42.427" endtime="20190524 10:06:42.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.432" endtime="20190524 10:06:42.432"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.431" endtime="20190524 10:06:42.433"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:42.434" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:42.434" endtime="20190524 10:06:42.434"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.430" endtime="20190524 10:06:42.434"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.429" endtime="20190524 10:06:42.434"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.415" endtime="20190524 10:06:42.434"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosIngressDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', ..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.436" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.436" endtime="20190524 10:06:42.436"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.439" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.439" endtime="20190524 10:06:42.440"></status>
</kw>
<msg timestamp="20190524 10:06:42.440" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.437" endtime="20190524 10:06:42.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.441" endtime="20190524 10:06:42.441"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.444" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.443" endtime="20190524 10:06:42.444"></status>
</kw>
<msg timestamp="20190524 10:06:42.444" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.442" endtime="20190524 10:06:42.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.445" endtime="20190524 10:06:42.445"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.447" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.447" endtime="20190524 10:06:42.447"></status>
</kw>
<msg timestamp="20190524 10:06:42.447" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.446" endtime="20190524 10:06:42.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.448" endtime="20190524 10:06:42.449"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.451" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.450" endtime="20190524 10:06:42.451"></status>
</kw>
<msg timestamp="20190524 10:06:42.451" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.449" endtime="20190524 10:06:42.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.452" endtime="20190524 10:06:42.452"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.454" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.453" endtime="20190524 10:06:42.454"></status>
</kw>
<msg timestamp="20190524 10:06:42.454" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.453" endtime="20190524 10:06:42.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.455" endtime="20190524 10:06:42.456"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.458" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.457" endtime="20190524 10:06:42.458"></status>
</kw>
<msg timestamp="20190524 10:06:42.459" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.456" endtime="20190524 10:06:42.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.459" endtime="20190524 10:06:42.460"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.462" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.462" endtime="20190524 10:06:42.462"></status>
</kw>
<msg timestamp="20190524 10:06:42.463" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.461" endtime="20190524 10:06:42.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.463" endtime="20190524 10:06:42.464"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.466" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.465" endtime="20190524 10:06:42.466"></status>
</kw>
<msg timestamp="20190524 10:06:42.466" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.464" endtime="20190524 10:06:42.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.467" endtime="20190524 10:06:42.467"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.434" endtime="20190524 10:06:42.467"></status>
</kw>
<kw name="${if_policy} = X(infraRsStormctrlIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rTyp..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.469" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.468" endtime="20190524 10:06:42.469"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.471" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.470" endtime="20190524 10:06:42.471"></status>
</kw>
<msg timestamp="20190524 10:06:42.471" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.469" endtime="20190524 10:06:42.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.472" endtime="20190524 10:06:42.472"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.474" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.474" endtime="20190524 10:06:42.474"></status>
</kw>
<msg timestamp="20190524 10:06:42.475" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.473" endtime="20190524 10:06:42.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.475" endtime="20190524 10:06:42.476"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.480" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.480" endtime="20190524 10:06:42.480"></status>
</kw>
<msg timestamp="20190524 10:06:42.480" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.476" endtime="20190524 10:06:42.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.481" endtime="20190524 10:06:42.482"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.484" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.483" endtime="20190524 10:06:42.484"></status>
</kw>
<msg timestamp="20190524 10:06:42.484" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.483" endtime="20190524 10:06:42.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.485" endtime="20190524 10:06:42.485"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.487" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.487" endtime="20190524 10:06:42.487"></status>
</kw>
<msg timestamp="20190524 10:06:42.487" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.486" endtime="20190524 10:06:42.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.488" endtime="20190524 10:06:42.488"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.491" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.490" endtime="20190524 10:06:42.491"></status>
</kw>
<msg timestamp="20190524 10:06:42.491" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.489" endtime="20190524 10:06:42.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.492" endtime="20190524 10:06:42.493"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.494" endtime="20190524 10:06:42.495"></status>
</kw>
<msg timestamp="20190524 10:06:42.495" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:42.493" endtime="20190524 10:06:42.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.499" endtime="20190524 10:06:42.499"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.497" endtime="20190524 10:06:42.499"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:42.500" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:42.500" endtime="20190524 10:06:42.500"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.496" endtime="20190524 10:06:42.501"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.495" endtime="20190524 10:06:42.501"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.468" endtime="20190524 10:06:42.501"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosEgressDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', r..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.502" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.501" endtime="20190524 10:06:42.502"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.504" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.503" endtime="20190524 10:06:42.504"></status>
</kw>
<msg timestamp="20190524 10:06:42.504" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.503" endtime="20190524 10:06:42.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.505" endtime="20190524 10:06:42.505"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.507" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.507" endtime="20190524 10:06:42.508"></status>
</kw>
<msg timestamp="20190524 10:06:42.508" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.506" endtime="20190524 10:06:42.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.508" endtime="20190524 10:06:42.509"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.511" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.510" endtime="20190524 10:06:42.511"></status>
</kw>
<msg timestamp="20190524 10:06:42.511" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.509" endtime="20190524 10:06:42.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.512" endtime="20190524 10:06:42.512"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.514" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.514" endtime="20190524 10:06:42.514"></status>
</kw>
<msg timestamp="20190524 10:06:42.514" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.513" endtime="20190524 10:06:42.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.515" endtime="20190524 10:06:42.515"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.519" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.518" endtime="20190524 10:06:42.519"></status>
</kw>
<msg timestamp="20190524 10:06:42.519" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.516" endtime="20190524 10:06:42.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.520" endtime="20190524 10:06:42.520"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.522" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.522" endtime="20190524 10:06:42.523"></status>
</kw>
<msg timestamp="20190524 10:06:42.523" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.521" endtime="20190524 10:06:42.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.524" endtime="20190524 10:06:42.524"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.527" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.526" endtime="20190524 10:06:42.527"></status>
</kw>
<msg timestamp="20190524 10:06:42.527" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.525" endtime="20190524 10:06:42.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.528" endtime="20190524 10:06:42.528"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.531" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.529" endtime="20190524 10:06:42.531"></status>
</kw>
<msg timestamp="20190524 10:06:42.531" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.529" endtime="20190524 10:06:42.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.532" endtime="20190524 10:06:42.532"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.501" endtime="20190524 10:06:42.532"></status>
</kw>
<kw name="${if_policy} = X(infraRsMonIfInfraPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.533" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.533" endtime="20190524 10:06:42.533"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.535" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.535" endtime="20190524 10:06:42.535"></status>
</kw>
<msg timestamp="20190524 10:06:42.536" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.534" endtime="20190524 10:06:42.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.536" endtime="20190524 10:06:42.537"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.539" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.539" endtime="20190524 10:06:42.539"></status>
</kw>
<msg timestamp="20190524 10:06:42.540" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.538" endtime="20190524 10:06:42.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.540" endtime="20190524 10:06:42.541"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.543" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.542" endtime="20190524 10:06:42.543"></status>
</kw>
<msg timestamp="20190524 10:06:42.543" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.541" endtime="20190524 10:06:42.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.543" endtime="20190524 10:06:42.544"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.546" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.545" endtime="20190524 10:06:42.546"></status>
</kw>
<msg timestamp="20190524 10:06:42.546" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.544" endtime="20190524 10:06:42.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.547" endtime="20190524 10:06:42.547"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.549" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.549" endtime="20190524 10:06:42.549"></status>
</kw>
<msg timestamp="20190524 10:06:42.549" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.548" endtime="20190524 10:06:42.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.550" endtime="20190524 10:06:42.550"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.552" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.552" endtime="20190524 10:06:42.552"></status>
</kw>
<msg timestamp="20190524 10:06:42.552" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.551" endtime="20190524 10:06:42.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.553" endtime="20190524 10:06:42.553"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.557" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.556" endtime="20190524 10:06:42.557"></status>
</kw>
<msg timestamp="20190524 10:06:42.557" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.554" endtime="20190524 10:06:42.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.558" endtime="20190524 10:06:42.559"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.561" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.560" endtime="20190524 10:06:42.561"></status>
</kw>
<msg timestamp="20190524 10:06:42.561" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.560" endtime="20190524 10:06:42.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.562" endtime="20190524 10:06:42.562"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.532" endtime="20190524 10:06:42.562"></status>
</kw>
<kw name="${if_policy} = X(infraRsMcpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.563" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.563" endtime="20190524 10:06:42.563"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.565" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.565" endtime="20190524 10:06:42.565"></status>
</kw>
<msg timestamp="20190524 10:06:42.566" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.564" endtime="20190524 10:06:42.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.566" endtime="20190524 10:06:42.568"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.570" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.569" endtime="20190524 10:06:42.570"></status>
</kw>
<msg timestamp="20190524 10:06:42.570" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.568" endtime="20190524 10:06:42.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.571" endtime="20190524 10:06:42.571"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.573" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.573" endtime="20190524 10:06:42.573"></status>
</kw>
<msg timestamp="20190524 10:06:42.573" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.572" endtime="20190524 10:06:42.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.574" endtime="20190524 10:06:42.577"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.579" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.579" endtime="20190524 10:06:42.579"></status>
</kw>
<msg timestamp="20190524 10:06:42.579" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.578" endtime="20190524 10:06:42.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.580" endtime="20190524 10:06:42.580"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.582" endtime="20190524 10:06:42.583"></status>
</kw>
<msg timestamp="20190524 10:06:42.583" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:42.581" endtime="20190524 10:06:42.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.586" endtime="20190524 10:06:42.586"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.585" endtime="20190524 10:06:42.587"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:42.588" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:42.587" endtime="20190524 10:06:42.588"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.584" endtime="20190524 10:06:42.588"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.583" endtime="20190524 10:06:42.588"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.562" endtime="20190524 10:06:42.588"></status>
</kw>
<kw name="${if_policy} = X(infraRsMacsecIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.589" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.589" endtime="20190524 10:06:42.589"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.591" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.591" endtime="20190524 10:06:42.591"></status>
</kw>
<msg timestamp="20190524 10:06:42.591" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.590" endtime="20190524 10:06:42.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.592" endtime="20190524 10:06:42.593"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.595" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.594" endtime="20190524 10:06:42.595"></status>
</kw>
<msg timestamp="20190524 10:06:42.595" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.593" endtime="20190524 10:06:42.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.595" endtime="20190524 10:06:42.598"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.600" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.600" endtime="20190524 10:06:42.600"></status>
</kw>
<msg timestamp="20190524 10:06:42.601" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.599" endtime="20190524 10:06:42.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.601" endtime="20190524 10:06:42.602"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.604" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.604" endtime="20190524 10:06:42.604"></status>
</kw>
<msg timestamp="20190524 10:06:42.604" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.603" endtime="20190524 10:06:42.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.605" endtime="20190524 10:06:42.605"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.607" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.607" endtime="20190524 10:06:42.607"></status>
</kw>
<msg timestamp="20190524 10:06:42.608" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.606" endtime="20190524 10:06:42.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.608" endtime="20190524 10:06:42.609"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.611" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.610" endtime="20190524 10:06:42.611"></status>
</kw>
<msg timestamp="20190524 10:06:42.611" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.609" endtime="20190524 10:06:42.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.612" endtime="20190524 10:06:42.612"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.614" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.614" endtime="20190524 10:06:42.614"></status>
</kw>
<msg timestamp="20190524 10:06:42.614" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.613" endtime="20190524 10:06:42.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.615" endtime="20190524 10:06:42.616"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.619" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.618" endtime="20190524 10:06:42.619"></status>
</kw>
<msg timestamp="20190524 10:06:42.619" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.617" endtime="20190524 10:06:42.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.620" endtime="20190524 10:06:42.620"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.588" endtime="20190524 10:06:42.620"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosSdIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='m..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.622" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.621" endtime="20190524 10:06:42.622"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.624" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.624" endtime="20190524 10:06:42.624"></status>
</kw>
<msg timestamp="20190524 10:06:42.624" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.623" endtime="20190524 10:06:42.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.625" endtime="20190524 10:06:42.626"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.628" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.628" endtime="20190524 10:06:42.628"></status>
</kw>
<msg timestamp="20190524 10:06:42.628" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.627" endtime="20190524 10:06:42.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.629" endtime="20190524 10:06:42.629"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.631" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.631" endtime="20190524 10:06:42.631"></status>
</kw>
<msg timestamp="20190524 10:06:42.632" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.630" endtime="20190524 10:06:42.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.632" endtime="20190524 10:06:42.633"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.636" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.635" endtime="20190524 10:06:42.636"></status>
</kw>
<msg timestamp="20190524 10:06:42.636" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.634" endtime="20190524 10:06:42.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.638" endtime="20190524 10:06:42.639"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.642" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.641" endtime="20190524 10:06:42.642"></status>
</kw>
<msg timestamp="20190524 10:06:42.643" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.640" endtime="20190524 10:06:42.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.644" endtime="20190524 10:06:42.644"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.647" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.647" endtime="20190524 10:06:42.647"></status>
</kw>
<msg timestamp="20190524 10:06:42.647" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.646" endtime="20190524 10:06:42.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.648" endtime="20190524 10:06:42.649"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.650" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.650" endtime="20190524 10:06:42.651"></status>
</kw>
<msg timestamp="20190524 10:06:42.651" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.649" endtime="20190524 10:06:42.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.651" endtime="20190524 10:06:42.652"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.654" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.653" endtime="20190524 10:06:42.654"></status>
</kw>
<msg timestamp="20190524 10:06:42.654" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.652" endtime="20190524 10:06:42.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.654" endtime="20190524 10:06:42.655"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.621" endtime="20190524 10:06:42.655"></status>
</kw>
<kw name="${if_policy} = X(infraRsPoeIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.657" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.656" endtime="20190524 10:06:42.657"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.659" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.659" endtime="20190524 10:06:42.659"></status>
</kw>
<msg timestamp="20190524 10:06:42.660" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.658" endtime="20190524 10:06:42.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.661" endtime="20190524 10:06:42.662"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.664" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.663" endtime="20190524 10:06:42.664"></status>
</kw>
<msg timestamp="20190524 10:06:42.664" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.662" endtime="20190524 10:06:42.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.665" endtime="20190524 10:06:42.665"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.667" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.667" endtime="20190524 10:06:42.667"></status>
</kw>
<msg timestamp="20190524 10:06:42.667" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.666" endtime="20190524 10:06:42.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.668" endtime="20190524 10:06:42.669"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.671" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.670" endtime="20190524 10:06:42.671"></status>
</kw>
<msg timestamp="20190524 10:06:42.671" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.669" endtime="20190524 10:06:42.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.672" endtime="20190524 10:06:42.672"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.674" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.674" endtime="20190524 10:06:42.674"></status>
</kw>
<msg timestamp="20190524 10:06:42.674" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.673" endtime="20190524 10:06:42.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.675" endtime="20190524 10:06:42.676"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.678" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.677" endtime="20190524 10:06:42.678"></status>
</kw>
<msg timestamp="20190524 10:06:42.678" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.677" endtime="20190524 10:06:42.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.679" endtime="20190524 10:06:42.680"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.682" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.681" endtime="20190524 10:06:42.682"></status>
</kw>
<msg timestamp="20190524 10:06:42.682" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.681" endtime="20190524 10:06:42.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.683" endtime="20190524 10:06:42.683"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.686" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.685" endtime="20190524 10:06:42.686"></status>
</kw>
<msg timestamp="20190524 10:06:42.686" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.684" endtime="20190524 10:06:42.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.687" endtime="20190524 10:06:42.687"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.655" endtime="20190524 10:06:42.687"></status>
</kw>
<kw name="${if_policy} = X(infraRsAttEntP=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', isUsingConnSel='no', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.688" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.688" endtime="20190524 10:06:42.688"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.691" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.690" endtime="20190524 10:06:42.691"></status>
</kw>
<msg timestamp="20190524 10:06:42.691" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.689" endtime="20190524 10:06:42.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.692" endtime="20190524 10:06:42.692"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.694" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.693" endtime="20190524 10:06:42.694"></status>
</kw>
<msg timestamp="20190524 10:06:42.694" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.693" endtime="20190524 10:06:42.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.695" endtime="20190524 10:06:42.695"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.697" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.697" endtime="20190524 10:06:42.697"></status>
</kw>
<msg timestamp="20190524 10:06:42.697" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.696" endtime="20190524 10:06:42.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.699" endtime="20190524 10:06:42.699"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.701" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.701" endtime="20190524 10:06:42.702"></status>
</kw>
<msg timestamp="20190524 10:06:42.702" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.700" endtime="20190524 10:06:42.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.702" endtime="20190524 10:06:42.703"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.705" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.704" endtime="20190524 10:06:42.705"></status>
</kw>
<msg timestamp="20190524 10:06:42.705" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.703" endtime="20190524 10:06:42.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.705" endtime="20190524 10:06:42.706"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.707" endtime="20190524 10:06:42.708"></status>
</kw>
<msg timestamp="20190524 10:06:42.708" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:42.707" endtime="20190524 10:06:42.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.711" endtime="20190524 10:06:42.712"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.711" endtime="20190524 10:06:42.712"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:42.713" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:42.713" endtime="20190524 10:06:42.713"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.710" endtime="20190524 10:06:42.713"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.709" endtime="20190524 10:06:42.713"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.687" endtime="20190524 10:06:42.713"></status>
</kw>
<kw name="${if_policy} = X(infraRsCdpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.715" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.714" endtime="20190524 10:06:42.715"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.717" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.716" endtime="20190524 10:06:42.718"></status>
</kw>
<msg timestamp="20190524 10:06:42.718" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.715" endtime="20190524 10:06:42.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.718" endtime="20190524 10:06:42.719"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.722" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.721" endtime="20190524 10:06:42.722"></status>
</kw>
<msg timestamp="20190524 10:06:42.722" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.720" endtime="20190524 10:06:42.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.723" endtime="20190524 10:06:42.723"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.726" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.725" endtime="20190524 10:06:42.726"></status>
</kw>
<msg timestamp="20190524 10:06:42.726" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.724" endtime="20190524 10:06:42.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.727" endtime="20190524 10:06:42.727"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.729" endtime="20190524 10:06:42.729"></status>
</kw>
<msg timestamp="20190524 10:06:42.729" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:42.728" endtime="20190524 10:06:42.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.732" endtime="20190524 10:06:42.733"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.732" endtime="20190524 10:06:42.733"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:42.734" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:42.734" endtime="20190524 10:06:42.734"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.731" endtime="20190524 10:06:42.734"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.730" endtime="20190524 10:06:42.734"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.714" endtime="20190524 10:06:42.734"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2IfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo',..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.736" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.735" endtime="20190524 10:06:42.736"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.739" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.738" endtime="20190524 10:06:42.739"></status>
</kw>
<msg timestamp="20190524 10:06:42.739" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.736" endtime="20190524 10:06:42.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.740" endtime="20190524 10:06:42.740"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.743" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.742" endtime="20190524 10:06:42.743"></status>
</kw>
<msg timestamp="20190524 10:06:42.743" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.741" endtime="20190524 10:06:42.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.744" endtime="20190524 10:06:42.744"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.745" endtime="20190524 10:06:42.746"></status>
</kw>
<msg timestamp="20190524 10:06:42.746" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:42.745" endtime="20190524 10:06:42.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.749" endtime="20190524 10:06:42.750"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.748" endtime="20190524 10:06:42.750"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:42.751" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:42.751" endtime="20190524 10:06:42.751"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.748" endtime="20190524 10:06:42.751"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.747" endtime="20190524 10:06:42.751"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.734" endtime="20190524 10:06:42.751"></status>
</kw>
<kw name="${if_policy} = X(infraRtAccBaseGrp=X(attributes=X(childAction='', lcOwn='local', modTs='2019-05-23T00:35:47.673+00:00', rn='rtaccBaseGrp-[uni/infra/accportprof-Leaf/hports-e3-typ-range]', status='', tCl='infraHPortS..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.753" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.752" endtime="20190524 10:06:42.753"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.755" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.755" endtime="20190524 10:06:42.755"></status>
</kw>
<msg timestamp="20190524 10:06:42.755" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.754" endtime="20190524 10:06:42.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.756" endtime="20190524 10:06:42.758"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.761" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.760" endtime="20190524 10:06:42.761"></status>
</kw>
<msg timestamp="20190524 10:06:42.761" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.758" endtime="20190524 10:06:42.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.762" endtime="20190524 10:06:42.762"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.764" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.764" endtime="20190524 10:06:42.764"></status>
</kw>
<msg timestamp="20190524 10:06:42.764" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.763" endtime="20190524 10:06:42.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.765" endtime="20190524 10:06:42.765"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.768" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.767" endtime="20190524 10:06:42.768"></status>
</kw>
<msg timestamp="20190524 10:06:42.768" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.766" endtime="20190524 10:06:42.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.769" endtime="20190524 10:06:42.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.771" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.771" endtime="20190524 10:06:42.771"></status>
</kw>
<msg timestamp="20190524 10:06:42.772" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.770" endtime="20190524 10:06:42.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.772" endtime="20190524 10:06:42.773"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.775" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.775" endtime="20190524 10:06:42.775"></status>
</kw>
<msg timestamp="20190524 10:06:42.775" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.774" endtime="20190524 10:06:42.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.776" endtime="20190524 10:06:42.777"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.781" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.780" endtime="20190524 10:06:42.781"></status>
</kw>
<msg timestamp="20190524 10:06:42.781" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.777" endtime="20190524 10:06:42.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.782" endtime="20190524 10:06:42.782"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.786" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.785" endtime="20190524 10:06:42.786"></status>
</kw>
<msg timestamp="20190524 10:06:42.786" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.784" endtime="20190524 10:06:42.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.787" endtime="20190524 10:06:42.787"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.751" endtime="20190524 10:06:42.787"></status>
</kw>
<kw name="${if_policy} = X(infraRtAccBaseGrp=X(attributes=X(childAction='', lcOwn='local', modTs='2019-05-23T00:35:47.206+00:00', rn='rtaccBaseGrp-[uni/infra/accportprof-Leaf/hports-e1-typ-range]', status='', tCl='infraHPortS..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.789" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.788" endtime="20190524 10:06:42.789"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.792" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.791" endtime="20190524 10:06:42.792"></status>
</kw>
<msg timestamp="20190524 10:06:42.792" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.790" endtime="20190524 10:06:42.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.793" endtime="20190524 10:06:42.794"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.797" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.796" endtime="20190524 10:06:42.797"></status>
</kw>
<msg timestamp="20190524 10:06:42.797" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.795" endtime="20190524 10:06:42.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.798" endtime="20190524 10:06:42.798"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.801" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.800" endtime="20190524 10:06:42.801"></status>
</kw>
<msg timestamp="20190524 10:06:42.801" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.799" endtime="20190524 10:06:42.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.802" endtime="20190524 10:06:42.803"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.806" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.805" endtime="20190524 10:06:42.806"></status>
</kw>
<msg timestamp="20190524 10:06:42.806" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.804" endtime="20190524 10:06:42.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.807" endtime="20190524 10:06:42.809"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.811" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.811" endtime="20190524 10:06:42.811"></status>
</kw>
<msg timestamp="20190524 10:06:42.811" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.810" endtime="20190524 10:06:42.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.812" endtime="20190524 10:06:42.813"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.815" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.814" endtime="20190524 10:06:42.815"></status>
</kw>
<msg timestamp="20190524 10:06:42.815" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.813" endtime="20190524 10:06:42.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.815" endtime="20190524 10:06:42.816"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.818" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.818" endtime="20190524 10:06:42.818"></status>
</kw>
<msg timestamp="20190524 10:06:42.818" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.817" endtime="20190524 10:06:42.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.819" endtime="20190524 10:06:42.819"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.821" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.821" endtime="20190524 10:06:42.822"></status>
</kw>
<msg timestamp="20190524 10:06:42.822" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.820" endtime="20190524 10:06:42.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.823" endtime="20190524 10:06:42.823"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.788" endtime="20190524 10:06:42.823"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.826" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.826" endtime="20190524 10:06:42.826"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.829" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.828" endtime="20190524 10:06:42.829"></status>
</kw>
<msg timestamp="20190524 10:06:42.829" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.827" endtime="20190524 10:06:42.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.830" endtime="20190524 10:06:42.830"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.832" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.832" endtime="20190524 10:06:42.833"></status>
</kw>
<msg timestamp="20190524 10:06:42.833" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.831" endtime="20190524 10:06:42.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.834" endtime="20190524 10:06:42.834"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.836" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.836" endtime="20190524 10:06:42.836"></status>
</kw>
<msg timestamp="20190524 10:06:42.836" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.835" endtime="20190524 10:06:42.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.837" endtime="20190524 10:06:42.838"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.840" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.839" endtime="20190524 10:06:42.840"></status>
</kw>
<msg timestamp="20190524 10:06:42.840" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.838" endtime="20190524 10:06:42.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.841" endtime="20190524 10:06:42.841"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.843" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.843" endtime="20190524 10:06:42.844"></status>
</kw>
<msg timestamp="20190524 10:06:42.844" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.842" endtime="20190524 10:06:42.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.845" endtime="20190524 10:06:42.846"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.848" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.848" endtime="20190524 10:06:42.848"></status>
</kw>
<msg timestamp="20190524 10:06:42.848" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.847" endtime="20190524 10:06:42.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.849" endtime="20190524 10:06:42.850"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.852" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.851" endtime="20190524 10:06:42.852"></status>
</kw>
<msg timestamp="20190524 10:06:42.852" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.850" endtime="20190524 10:06:42.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.853" endtime="20190524 10:06:42.854"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.856" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.856" endtime="20190524 10:06:42.856"></status>
</kw>
<msg timestamp="20190524 10:06:42.856" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.854" endtime="20190524 10:06:42.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.857" endtime="20190524 10:06:42.858"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.825" endtime="20190524 10:06:42.858"></status>
</kw>
<kw name="${if_policy} = X(infraRsCoppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.859" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.859" endtime="20190524 10:06:42.859"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.861" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.861" endtime="20190524 10:06:42.862"></status>
</kw>
<msg timestamp="20190524 10:06:42.862" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.860" endtime="20190524 10:06:42.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.862" endtime="20190524 10:06:42.863"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.865" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.864" endtime="20190524 10:06:42.865"></status>
</kw>
<msg timestamp="20190524 10:06:42.865" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.863" endtime="20190524 10:06:42.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.866" endtime="20190524 10:06:42.867"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.869" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.868" endtime="20190524 10:06:42.869"></status>
</kw>
<msg timestamp="20190524 10:06:42.869" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.867" endtime="20190524 10:06:42.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.870" endtime="20190524 10:06:42.871"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.873" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.873" endtime="20190524 10:06:42.873"></status>
</kw>
<msg timestamp="20190524 10:06:42.874" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.872" endtime="20190524 10:06:42.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.874" endtime="20190524 10:06:42.875"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.877" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.876" endtime="20190524 10:06:42.877"></status>
</kw>
<msg timestamp="20190524 10:06:42.877" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.876" endtime="20190524 10:06:42.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.878" endtime="20190524 10:06:42.878"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.881" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.880" endtime="20190524 10:06:42.881"></status>
</kw>
<msg timestamp="20190524 10:06:42.881" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.879" endtime="20190524 10:06:42.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.882" endtime="20190524 10:06:42.882"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.884" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.884" endtime="20190524 10:06:42.884"></status>
</kw>
<msg timestamp="20190524 10:06:42.884" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.883" endtime="20190524 10:06:42.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.885" endtime="20190524 10:06:42.886"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.889" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.889" endtime="20190524 10:06:42.889"></status>
</kw>
<msg timestamp="20190524 10:06:42.890" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.887" endtime="20190524 10:06:42.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.891" endtime="20190524 10:06:42.892"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.858" endtime="20190524 10:06:42.892"></status>
</kw>
<kw name="${if_policy} = X(infraRsDwdmIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.893" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.893" endtime="20190524 10:06:42.893"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.896" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.895" endtime="20190524 10:06:42.896"></status>
</kw>
<msg timestamp="20190524 10:06:42.896" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.894" endtime="20190524 10:06:42.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.897" endtime="20190524 10:06:42.897"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.900" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.899" endtime="20190524 10:06:42.900"></status>
</kw>
<msg timestamp="20190524 10:06:42.900" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.898" endtime="20190524 10:06:42.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.901" endtime="20190524 10:06:42.901"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.903" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.903" endtime="20190524 10:06:42.903"></status>
</kw>
<msg timestamp="20190524 10:06:42.904" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.902" endtime="20190524 10:06:42.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.904" endtime="20190524 10:06:42.905"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.907" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.907" endtime="20190524 10:06:42.907"></status>
</kw>
<msg timestamp="20190524 10:06:42.907" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.906" endtime="20190524 10:06:42.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.908" endtime="20190524 10:06:42.909"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.912" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.911" endtime="20190524 10:06:42.912"></status>
</kw>
<msg timestamp="20190524 10:06:42.912" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.910" endtime="20190524 10:06:42.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.913" endtime="20190524 10:06:42.913"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.916" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.915" endtime="20190524 10:06:42.916"></status>
</kw>
<msg timestamp="20190524 10:06:42.916" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.914" endtime="20190524 10:06:42.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.917" endtime="20190524 10:06:42.917"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.920" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.919" endtime="20190524 10:06:42.920"></status>
</kw>
<msg timestamp="20190524 10:06:42.920" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.918" endtime="20190524 10:06:42.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.921" endtime="20190524 10:06:42.922"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.924" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.923" endtime="20190524 10:06:42.924"></status>
</kw>
<msg timestamp="20190524 10:06:42.924" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.923" endtime="20190524 10:06:42.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.925" endtime="20190524 10:06:42.926"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.892" endtime="20190524 10:06:42.926"></status>
</kw>
<kw name="${if_policy} = X(infraRsLldpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.927" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.927" endtime="20190524 10:06:42.927"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.929" endtime="20190524 10:06:42.929"></status>
</kw>
<msg timestamp="20190524 10:06:42.930" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:42.928" endtime="20190524 10:06:42.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.934" endtime="20190524 10:06:42.935"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.933" endtime="20190524 10:06:42.935"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:42.936" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:42.936" endtime="20190524 10:06:42.936"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.932" endtime="20190524 10:06:42.936"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.931" endtime="20190524 10:06:42.937"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.926" endtime="20190524 10:06:42.937"></status>
</kw>
<kw name="${if_policy} = X(infraRsFcIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo',..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.938" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.938" endtime="20190524 10:06:42.938"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.941" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.940" endtime="20190524 10:06:42.941"></status>
</kw>
<msg timestamp="20190524 10:06:42.941" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.939" endtime="20190524 10:06:42.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.942" endtime="20190524 10:06:42.942"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.944" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.944" endtime="20190524 10:06:42.944"></status>
</kw>
<msg timestamp="20190524 10:06:42.944" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.943" endtime="20190524 10:06:42.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.945" endtime="20190524 10:06:42.946"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.949" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.948" endtime="20190524 10:06:42.949"></status>
</kw>
<msg timestamp="20190524 10:06:42.949" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.947" endtime="20190524 10:06:42.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.950" endtime="20190524 10:06:42.950"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.955" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.955" endtime="20190524 10:06:42.955"></status>
</kw>
<msg timestamp="20190524 10:06:42.956" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.951" endtime="20190524 10:06:42.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.957" endtime="20190524 10:06:42.957"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.960" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.959" endtime="20190524 10:06:42.960"></status>
</kw>
<msg timestamp="20190524 10:06:42.960" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.958" endtime="20190524 10:06:42.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.961" endtime="20190524 10:06:42.961"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.964" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.963" endtime="20190524 10:06:42.964"></status>
</kw>
<msg timestamp="20190524 10:06:42.964" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.962" endtime="20190524 10:06:42.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.964" endtime="20190524 10:06:42.965"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.967" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.967" endtime="20190524 10:06:42.967"></status>
</kw>
<msg timestamp="20190524 10:06:42.967" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.966" endtime="20190524 10:06:42.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.968" endtime="20190524 10:06:42.968"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.971" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.970" endtime="20190524 10:06:42.971"></status>
</kw>
<msg timestamp="20190524 10:06:42.971" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.969" endtime="20190524 10:06:42.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.972" endtime="20190524 10:06:42.972"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.937" endtime="20190524 10:06:42.972"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosPfcIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:42.974" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.974" endtime="20190524 10:06:42.974"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.977" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.977" endtime="20190524 10:06:42.978"></status>
</kw>
<msg timestamp="20190524 10:06:42.978" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.976" endtime="20190524 10:06:42.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.978" endtime="20190524 10:06:42.979"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.981" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.981" endtime="20190524 10:06:42.981"></status>
</kw>
<msg timestamp="20190524 10:06:42.981" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.980" endtime="20190524 10:06:42.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.982" endtime="20190524 10:06:42.983"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.986" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.985" endtime="20190524 10:06:42.986"></status>
</kw>
<msg timestamp="20190524 10:06:42.986" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.984" endtime="20190524 10:06:42.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.987" endtime="20190524 10:06:42.988"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.991" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.990" endtime="20190524 10:06:42.991"></status>
</kw>
<msg timestamp="20190524 10:06:42.991" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.989" endtime="20190524 10:06:42.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.992" endtime="20190524 10:06:42.992"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:42.995" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.995" endtime="20190524 10:06:42.995"></status>
</kw>
<msg timestamp="20190524 10:06:42.995" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.994" endtime="20190524 10:06:42.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:42.996" endtime="20190524 10:06:42.997"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.001" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:42.999" endtime="20190524 10:06:43.001"></status>
</kw>
<msg timestamp="20190524 10:06:43.001" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:42.998" endtime="20190524 10:06:43.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.002" endtime="20190524 10:06:43.002"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.005" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.005" endtime="20190524 10:06:43.006"></status>
</kw>
<msg timestamp="20190524 10:06:43.006" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.003" endtime="20190524 10:06:43.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.007" endtime="20190524 10:06:43.007"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.010" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.009" endtime="20190524 10:06:43.010"></status>
</kw>
<msg timestamp="20190524 10:06:43.010" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.008" endtime="20190524 10:06:43.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.011" endtime="20190524 10:06:43.012"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.972" endtime="20190524 10:06:43.012"></status>
</kw>
<kw name="${if_policy} = X(infraRsHIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.013" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.013" endtime="20190524 10:06:43.013"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.015" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.014" endtime="20190524 10:06:43.015"></status>
</kw>
<msg timestamp="20190524 10:06:43.015" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.014" endtime="20190524 10:06:43.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.016" endtime="20190524 10:06:43.017"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.019" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.019" endtime="20190524 10:06:43.019"></status>
</kw>
<msg timestamp="20190524 10:06:43.019" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.018" endtime="20190524 10:06:43.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.020" endtime="20190524 10:06:43.021"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.024" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.023" endtime="20190524 10:06:43.024"></status>
</kw>
<msg timestamp="20190524 10:06:43.024" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.022" endtime="20190524 10:06:43.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.025" endtime="20190524 10:06:43.026"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.029" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.028" endtime="20190524 10:06:43.029"></status>
</kw>
<msg timestamp="20190524 10:06:43.029" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.027" endtime="20190524 10:06:43.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.030" endtime="20190524 10:06:43.031"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.033" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.033" endtime="20190524 10:06:43.034"></status>
</kw>
<msg timestamp="20190524 10:06:43.034" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.032" endtime="20190524 10:06:43.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.035" endtime="20190524 10:06:43.036"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.039" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.039" endtime="20190524 10:06:43.039"></status>
</kw>
<msg timestamp="20190524 10:06:43.040" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.037" endtime="20190524 10:06:43.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.041" endtime="20190524 10:06:43.041"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.044" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.043" endtime="20190524 10:06:43.044"></status>
</kw>
<msg timestamp="20190524 10:06:43.044" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.042" endtime="20190524 10:06:43.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.046" endtime="20190524 10:06:43.046"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.048" endtime="20190524 10:06:43.049"></status>
</kw>
<msg timestamp="20190524 10:06:43.049" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.047" endtime="20190524 10:06:43.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.054" endtime="20190524 10:06:43.055"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.053" endtime="20190524 10:06:43.055"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.056" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.056" endtime="20190524 10:06:43.056"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.052" endtime="20190524 10:06:43.056"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.050" endtime="20190524 10:06:43.056"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.012" endtime="20190524 10:06:43.056"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2PortSecurityPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', r..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.058" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.057" endtime="20190524 10:06:43.058"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.061" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.060" endtime="20190524 10:06:43.061"></status>
</kw>
<msg timestamp="20190524 10:06:43.061" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.059" endtime="20190524 10:06:43.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.062" endtime="20190524 10:06:43.062"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.065" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.064" endtime="20190524 10:06:43.065"></status>
</kw>
<msg timestamp="20190524 10:06:43.065" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.063" endtime="20190524 10:06:43.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.066" endtime="20190524 10:06:43.066"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.068" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.068" endtime="20190524 10:06:43.069"></status>
</kw>
<msg timestamp="20190524 10:06:43.069" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.067" endtime="20190524 10:06:43.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.070" endtime="20190524 10:06:43.070"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.074" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.073" endtime="20190524 10:06:43.074"></status>
</kw>
<msg timestamp="20190524 10:06:43.074" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.071" endtime="20190524 10:06:43.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.075" endtime="20190524 10:06:43.076"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.079" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.077" endtime="20190524 10:06:43.079"></status>
</kw>
<msg timestamp="20190524 10:06:43.079" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.076" endtime="20190524 10:06:43.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.080" endtime="20190524 10:06:43.081"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.083" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.082" endtime="20190524 10:06:43.083"></status>
</kw>
<msg timestamp="20190524 10:06:43.084" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.081" endtime="20190524 10:06:43.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.084" endtime="20190524 10:06:43.085"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.088" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.087" endtime="20190524 10:06:43.088"></status>
</kw>
<msg timestamp="20190524 10:06:43.088" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.086" endtime="20190524 10:06:43.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.089" endtime="20190524 10:06:43.089"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.092" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.092" endtime="20190524 10:06:43.092"></status>
</kw>
<msg timestamp="20190524 10:06:43.092" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.090" endtime="20190524 10:06:43.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.093" endtime="20190524 10:06:43.094"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.056" endtime="20190524 10:06:43.094"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2PortAuthPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:43.808+00:00', monPolDn='uni/fabric/monfab-default', rType..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.096" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.095" endtime="20190524 10:06:43.096"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.099" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.098" endtime="20190524 10:06:43.099"></status>
</kw>
<msg timestamp="20190524 10:06:43.099" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.097" endtime="20190524 10:06:43.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.100" endtime="20190524 10:06:43.100"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.103" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.102" endtime="20190524 10:06:43.103"></status>
</kw>
<msg timestamp="20190524 10:06:43.103" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.101" endtime="20190524 10:06:43.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.104" endtime="20190524 10:06:43.104"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.107" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.107" endtime="20190524 10:06:43.108"></status>
</kw>
<msg timestamp="20190524 10:06:43.108" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.106" endtime="20190524 10:06:43.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.108" endtime="20190524 10:06:43.110"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.112" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.111" endtime="20190524 10:06:43.112"></status>
</kw>
<msg timestamp="20190524 10:06:43.112" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.111" endtime="20190524 10:06:43.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>""</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.113" endtime="20190524 10:06:43.114"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.116" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.115" endtime="20190524 10:06:43.116"></status>
</kw>
<msg timestamp="20190524 10:06:43.116" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.114" endtime="20190524 10:06:43.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.117" endtime="20190524 10:06:43.118"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.122" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.121" endtime="20190524 10:06:43.122"></status>
</kw>
<msg timestamp="20190524 10:06:43.122" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.119" endtime="20190524 10:06:43.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.123" endtime="20190524 10:06:43.124"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.127" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.126" endtime="20190524 10:06:43.127"></status>
</kw>
<msg timestamp="20190524 10:06:43.127" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.125" endtime="20190524 10:06:43.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.128" endtime="20190524 10:06:43.129"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.131" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.130" endtime="20190524 10:06:43.131"></status>
</kw>
<msg timestamp="20190524 10:06:43.131" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.129" endtime="20190524 10:06:43.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.132" endtime="20190524 10:06:43.132"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.094" endtime="20190524 10:06:43.132"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:42.414" endtime="20190524 10:06:43.132"></status>
</kw>
<doc>Verifies that Leaf Interface Policy Group 'Access_Port' are configured with the expected parameters
- Interface Policy Group Name: Access_Port
- Policy Group Type: Access
- LLDP Policy:
- STP Policy:
- L2 Interface Policy:
- CDP Policy:
- MCP Policy:
- AAEP: baremetal
- Storm Control Policy:
- Link Policy: 10gig_auto</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy-group</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:42.312" endtime="20190524 10:06:43.133" critical="yes"></status>
</test>
<test id="s1-t68" name="Verify ACI Leaf Interface Policy Group Configuration - Policy Group Name vPC_Port">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/funcprof/accbundle-vPC_Port</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:43.137" level="INFO">${uri} = /api/node/mo/uni/infra/funcprof/accbundle-vPC_Port</msg>
<status status="PASS" starttime="20190524 10:06:43.137" endtime="20190524 10:06:43.137"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:43.140" level="INFO">${filter} = rsp-subtree=full</msg>
<status status="PASS" starttime="20190524 10:06:43.139" endtime="20190524 10:06:43.140"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:43.142" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:43.142" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/funcprof/accbundle-vPC_Port.json?rsp-subtree=full
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:43.177" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraAccBndlGrp":{"attributes":{"annotation":"","childAction":"","descr":"vPC port-channel","dn":"uni/infra/funcprof/accbundle-vPC_Port","extMngdBy":"","lagT":"node","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","name":"vPC_Port","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRsStpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsstpIfPol","state":"formed","stateQual":"none","status":"","tCl":"stpIfPol","tContextDn":"","tDn":"uni/infra/ifPol-bpdu_guard","tRn":"ifPol-bpdu_guard","tType":"name","tnStpIfPolName":"bpdu_guard","uid":"0"}}},{"infraRsQosIngressDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsQosIngressDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsStormctrlIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsstormctrlIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"stormctrlIfPol","tContextDn":"","tDn":"uni/infra/stormctrlifp-default","tRn":"stormctrlifp-default","tType":"name","tnStormctrlIfPolName":"","uid":"0"}}},{"infraRsQosEgressDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsQosEgressDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsMonIfInfraPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmonIfInfraPol","state":"formed","stateQual":"default-target","status":"","tCl":"monInfraPol","tContextDn":"","tDn":"uni/infra/moninfra-default","tRn":"moninfra-default","tType":"name","tnMonInfraPolName":"","uid":"0"}}},{"infraRsMcpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmcpIfPol","state":"formed","stateQual":"none","status":"","tCl":"mcpIfPol","tContextDn":"","tDn":"uni/infra/mcpIfP-mcp_enabled","tRn":"mcpIfP-mcp_enabled","tType":"name","tnMcpIfPolName":"mcp_enabled","uid":"0"}}},{"infraRsMacsecIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmacsecIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"macsecIfPol","tContextDn":"","tDn":"uni/infra/macsecifp-default","tRn":"macsecifp-default","tType":"name","tnMacsecIfPolName":"","uid":"0"}}},{"infraRsQosSdIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosSdIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosSdIfPol","tContextDn":"","tDn":"uni/infra/qossdpol-default","tRn":"qossdpol-default","tType":"name","tnQosSdIfPolName":"","uid":"0"}}},{"infraRsAttEntP":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","isUsingConnSel":"no","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsattEntP","state":"formed","stateQual":"none","status":"","tCl":"infraAttEntityP","tDn":"uni/infra/attentp-baremetal","tType":"mo","uid":"15374"}}},{"infraRsCdpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rscdpIfPol","state":"formed","stateQual":"none","status":"","tCl":"cdpIfPol","tContextDn":"","tDn":"uni/infra/cdpIfP-cdp_enabled","tRn":"cdpIfP-cdp_enabled","tType":"name","tnCdpIfPolName":"cdp_enabled","uid":"0"}}},{"infraRsL2IfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2IfPol","state":"formed","stateQual":"none","status":"","tCl":"l2IfPol","tContextDn":"","tDn":"uni/infra/l2IfP-global_vlan_scope","tRn":"l2IfP-global_vlan_scope","tType":"name","tnL2IfPolName":"global_vlan_scope","uid":"0"}}},{"infraRtAccBaseGrp":{"attributes":{"childAction":"","lcOwn":"local","modTs":"2019-05-23T00:35:47.439+00:00","rn":"rtaccBaseGrp-[uni/infra/accportprof-Leaf/hports-e2-typ-range]","status":"","tCl":"infraHPortS","tDn":"uni/infra/accportprof-Leaf/hports-e2-typ-range"}}},{"infraRsQosDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsCoppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rscoppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"coppIfPol","tContextDn":"","tDn":"uni/infra/coppifpol-default","tRn":"coppifpol-default","tType":"name","tnCoppIfPolName":"","uid":"0"}}},{"infraRsQosPfcIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosPfcIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosPfcIfPol","tContextDn":"","tDn":"uni/infra/pfc-default","tRn":"pfc-default","tType":"name","tnQosPfcIfPolName":"","uid":"0"}}},{"infraRsHIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rshIfPol","state":"formed","stateQual":"none","status":"","tCl":"fabricHIfPol","tContextDn":"","tDn":"uni/infra/hintfpol-10gig_auto","tRn":"hintfpol-10gig_auto","tType":"name","tnFabricHIfPolName":"10gig_auto","uid":"0"}}},{"infraRsL2PortSecurityPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2PortSecurityPol","state":"formed","stateQual":"default-target","status":"","tCl":"l2PortSecurityPol","tContextDn":"","tDn":"uni/infra/portsecurityP-default","tRn":"portsecurityP-default","tType":"name","tnL2PortSecurityPolName":"","uid":"0"}}},{"infraRsL2PortAuthPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2PortAuthPol","state":"formed","stateQual":"default-target","status":"","tCl":"l2PortAuthPol","tContextDn":"","tDn":"uni/infra/portauthpol-default","tRn":"portauthpol-default","tType":"name","tnL2PortAuthPolName":"","uid":"0"}}},{"infraRsLacpPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rslacpPol","state":"formed","stateQual":"none","status":"","tCl":"lacpLagPol","tContextDn":"","tDn":"uni/infra/lacplagp-lacp_active","tRn":"lacplagp-lacp_active","tType":"name","tnLacpLagPolName":"lacp_active","uid":"0"}}},{"infraRsFcIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsfcIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"fcIfPol","tContextDn":"","tDn":"uni/infra/fcIfPol-default","tRn":"fcIfPol-default","tType":"name","tnFcIfPolName":"","uid":"0"}}},{"infraRsLldpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.183+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rslldpIfPol","state":"formed","stateQual":"none","status":"","tCl":"lldpIfPol","tContextDn":"","tDn":"uni/infra/lldpIfP-lldp_enabled","tRn":"lldpIfP-lldp_enabled","tType":"name","tnLldpIfPolName":"lldp_enabled","uid":"0"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:43.215" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e336d8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:43.142" endtime="20190524 10:06:43.215"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.217" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:43.217" endtime="20190524 10:06:43.217"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy Group does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.219" endtime="20190524 10:06:43.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraAccBndlGrp.attributes.name}</arg>
<arg>vPC_Port</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.221" endtime="20190524 10:06:43.222"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].infraAccBndlGrp.attributes.descr}"</arg>
<arg>"vPC port-channel"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].infraAccBndlGrp.attributes.descr}"</arg>
<arg>"vPC port-channel"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.224" endtime="20190524 10:06:43.225"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.223" endtime="20190524 10:06:43.225"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>False</arg>
</arguments>
<assign>
<var>${lldp_found}</var>
</assign>
<msg timestamp="20190524 10:06:43.227" level="INFO">${lldp_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.226" endtime="20190524 10:06:43.227"></status>
</kw>
<kw name="${if_policy} IN [ @{return.payload[0].infraAccBndlGrp.children} ]" type="for">
<kw name="${if_policy} = X(infraRsStpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.233" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.228" endtime="20190524 10:06:43.233"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.236" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.235" endtime="20190524 10:06:43.236"></status>
</kw>
<msg timestamp="20190524 10:06:43.236" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.234" endtime="20190524 10:06:43.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.237" endtime="20190524 10:06:43.237"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.240" endtime="20190524 10:06:43.241"></status>
</kw>
<msg timestamp="20190524 10:06:43.241" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.238" endtime="20190524 10:06:43.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.246" endtime="20190524 10:06:43.247"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.245" endtime="20190524 10:06:43.247"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.248" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.247" endtime="20190524 10:06:43.248"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.243" endtime="20190524 10:06:43.248"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.242" endtime="20190524 10:06:43.249"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.228" endtime="20190524 10:06:43.249"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosIngressDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', ..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.251" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.250" endtime="20190524 10:06:43.251"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.254" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.254" endtime="20190524 10:06:43.255"></status>
</kw>
<msg timestamp="20190524 10:06:43.255" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.253" endtime="20190524 10:06:43.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.256" endtime="20190524 10:06:43.256"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.258" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.258" endtime="20190524 10:06:43.258"></status>
</kw>
<msg timestamp="20190524 10:06:43.259" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.257" endtime="20190524 10:06:43.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.259" endtime="20190524 10:06:43.260"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.262" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.261" endtime="20190524 10:06:43.262"></status>
</kw>
<msg timestamp="20190524 10:06:43.262" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.260" endtime="20190524 10:06:43.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.263" endtime="20190524 10:06:43.263"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.265" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.264" endtime="20190524 10:06:43.265"></status>
</kw>
<msg timestamp="20190524 10:06:43.265" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.264" endtime="20190524 10:06:43.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.266" endtime="20190524 10:06:43.267"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.269" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.268" endtime="20190524 10:06:43.269"></status>
</kw>
<msg timestamp="20190524 10:06:43.269" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.267" endtime="20190524 10:06:43.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.270" endtime="20190524 10:06:43.272"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.275" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.274" endtime="20190524 10:06:43.275"></status>
</kw>
<msg timestamp="20190524 10:06:43.275" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.273" endtime="20190524 10:06:43.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.276" endtime="20190524 10:06:43.277"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.279" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.278" endtime="20190524 10:06:43.279"></status>
</kw>
<msg timestamp="20190524 10:06:43.279" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.278" endtime="20190524 10:06:43.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.280" endtime="20190524 10:06:43.280"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.282" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.282" endtime="20190524 10:06:43.283"></status>
</kw>
<msg timestamp="20190524 10:06:43.283" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.281" endtime="20190524 10:06:43.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.283" endtime="20190524 10:06:43.284"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.287" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.285" endtime="20190524 10:06:43.287"></status>
</kw>
<msg timestamp="20190524 10:06:43.287" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.284" endtime="20190524 10:06:43.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.288" endtime="20190524 10:06:43.288"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.250" endtime="20190524 10:06:43.288"></status>
</kw>
<kw name="${if_policy} = X(infraRsStormctrlIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rTyp..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.290" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.290" endtime="20190524 10:06:43.290"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.293" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.293" endtime="20190524 10:06:43.294"></status>
</kw>
<msg timestamp="20190524 10:06:43.294" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.292" endtime="20190524 10:06:43.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.295" endtime="20190524 10:06:43.296"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.298" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.298" endtime="20190524 10:06:43.299"></status>
</kw>
<msg timestamp="20190524 10:06:43.299" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.297" endtime="20190524 10:06:43.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.301" endtime="20190524 10:06:43.301"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.305" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.304" endtime="20190524 10:06:43.305"></status>
</kw>
<msg timestamp="20190524 10:06:43.305" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.303" endtime="20190524 10:06:43.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.306" endtime="20190524 10:06:43.307"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.310" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.309" endtime="20190524 10:06:43.310"></status>
</kw>
<msg timestamp="20190524 10:06:43.310" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.308" endtime="20190524 10:06:43.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.312" endtime="20190524 10:06:43.312"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.315" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.314" endtime="20190524 10:06:43.315"></status>
</kw>
<msg timestamp="20190524 10:06:43.315" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.313" endtime="20190524 10:06:43.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.316" endtime="20190524 10:06:43.317"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.320" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.320" endtime="20190524 10:06:43.320"></status>
</kw>
<msg timestamp="20190524 10:06:43.321" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.318" endtime="20190524 10:06:43.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.322" endtime="20190524 10:06:43.323"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.326" endtime="20190524 10:06:43.327"></status>
</kw>
<msg timestamp="20190524 10:06:43.327" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.324" endtime="20190524 10:06:43.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.332" endtime="20190524 10:06:43.333"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.331" endtime="20190524 10:06:43.333"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.335" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.334" endtime="20190524 10:06:43.335"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.330" endtime="20190524 10:06:43.335"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.328" endtime="20190524 10:06:43.335"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.289" endtime="20190524 10:06:43.335"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosEgressDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', r..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.338" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.337" endtime="20190524 10:06:43.339"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.344" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.343" endtime="20190524 10:06:43.344"></status>
</kw>
<msg timestamp="20190524 10:06:43.345" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.341" endtime="20190524 10:06:43.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.345" endtime="20190524 10:06:43.346"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.348" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.348" endtime="20190524 10:06:43.348"></status>
</kw>
<msg timestamp="20190524 10:06:43.348" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.347" endtime="20190524 10:06:43.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.349" endtime="20190524 10:06:43.349"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.353" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.352" endtime="20190524 10:06:43.353"></status>
</kw>
<msg timestamp="20190524 10:06:43.354" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.350" endtime="20190524 10:06:43.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.355" endtime="20190524 10:06:43.355"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.358" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.358" endtime="20190524 10:06:43.358"></status>
</kw>
<msg timestamp="20190524 10:06:43.359" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.356" endtime="20190524 10:06:43.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.360" endtime="20190524 10:06:43.360"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.363" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.362" endtime="20190524 10:06:43.363"></status>
</kw>
<msg timestamp="20190524 10:06:43.363" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.361" endtime="20190524 10:06:43.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.364" endtime="20190524 10:06:43.364"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.366" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.366" endtime="20190524 10:06:43.367"></status>
</kw>
<msg timestamp="20190524 10:06:43.367" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.365" endtime="20190524 10:06:43.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.368" endtime="20190524 10:06:43.368"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.370" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.370" endtime="20190524 10:06:43.370"></status>
</kw>
<msg timestamp="20190524 10:06:43.371" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.369" endtime="20190524 10:06:43.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.372" endtime="20190524 10:06:43.372"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.374" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.374" endtime="20190524 10:06:43.375"></status>
</kw>
<msg timestamp="20190524 10:06:43.375" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.373" endtime="20190524 10:06:43.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.376" endtime="20190524 10:06:43.377"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.380" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.379" endtime="20190524 10:06:43.380"></status>
</kw>
<msg timestamp="20190524 10:06:43.380" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.378" endtime="20190524 10:06:43.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.381" endtime="20190524 10:06:43.381"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.335" endtime="20190524 10:06:43.381"></status>
</kw>
<kw name="${if_policy} = X(infraRsMonIfInfraPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.382" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.382" endtime="20190524 10:06:43.382"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.385" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.384" endtime="20190524 10:06:43.385"></status>
</kw>
<msg timestamp="20190524 10:06:43.385" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.383" endtime="20190524 10:06:43.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.386" endtime="20190524 10:06:43.386"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.389" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.389" endtime="20190524 10:06:43.389"></status>
</kw>
<msg timestamp="20190524 10:06:43.389" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.387" endtime="20190524 10:06:43.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.390" endtime="20190524 10:06:43.391"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.394" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.393" endtime="20190524 10:06:43.394"></status>
</kw>
<msg timestamp="20190524 10:06:43.394" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.392" endtime="20190524 10:06:43.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.395" endtime="20190524 10:06:43.395"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.398" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.397" endtime="20190524 10:06:43.398"></status>
</kw>
<msg timestamp="20190524 10:06:43.399" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.396" endtime="20190524 10:06:43.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.399" endtime="20190524 10:06:43.400"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.402" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.402" endtime="20190524 10:06:43.403"></status>
</kw>
<msg timestamp="20190524 10:06:43.403" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.401" endtime="20190524 10:06:43.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.404" endtime="20190524 10:06:43.404"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.407" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.406" endtime="20190524 10:06:43.407"></status>
</kw>
<msg timestamp="20190524 10:06:43.407" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.405" endtime="20190524 10:06:43.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.408" endtime="20190524 10:06:43.409"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.411" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.411" endtime="20190524 10:06:43.411"></status>
</kw>
<msg timestamp="20190524 10:06:43.411" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.409" endtime="20190524 10:06:43.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.412" endtime="20190524 10:06:43.413"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.415" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.414" endtime="20190524 10:06:43.415"></status>
</kw>
<msg timestamp="20190524 10:06:43.415" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.413" endtime="20190524 10:06:43.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.416" endtime="20190524 10:06:43.416"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.418" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.418" endtime="20190524 10:06:43.419"></status>
</kw>
<msg timestamp="20190524 10:06:43.419" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.417" endtime="20190524 10:06:43.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.420" endtime="20190524 10:06:43.421"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.381" endtime="20190524 10:06:43.421"></status>
</kw>
<kw name="${if_policy} = X(infraRsMcpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.423" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.422" endtime="20190524 10:06:43.423"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.426" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.425" endtime="20190524 10:06:43.426"></status>
</kw>
<msg timestamp="20190524 10:06:43.426" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.424" endtime="20190524 10:06:43.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.427" endtime="20190524 10:06:43.427"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.429" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.429" endtime="20190524 10:06:43.429"></status>
</kw>
<msg timestamp="20190524 10:06:43.429" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.428" endtime="20190524 10:06:43.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.430" endtime="20190524 10:06:43.430"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.433" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.432" endtime="20190524 10:06:43.433"></status>
</kw>
<msg timestamp="20190524 10:06:43.433" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.431" endtime="20190524 10:06:43.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.434" endtime="20190524 10:06:43.434"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.437" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.437" endtime="20190524 10:06:43.437"></status>
</kw>
<msg timestamp="20190524 10:06:43.437" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.435" endtime="20190524 10:06:43.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.439" endtime="20190524 10:06:43.440"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.442" endtime="20190524 10:06:43.443"></status>
</kw>
<msg timestamp="20190524 10:06:43.443" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.441" endtime="20190524 10:06:43.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.448" endtime="20190524 10:06:43.448"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.447" endtime="20190524 10:06:43.448"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.449" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.449" endtime="20190524 10:06:43.449"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.446" endtime="20190524 10:06:43.449"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.445" endtime="20190524 10:06:43.449"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.421" endtime="20190524 10:06:43.449"></status>
</kw>
<kw name="${if_policy} = X(infraRsMacsecIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.451" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.450" endtime="20190524 10:06:43.451"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.454" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.453" endtime="20190524 10:06:43.454"></status>
</kw>
<msg timestamp="20190524 10:06:43.455" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.452" endtime="20190524 10:06:43.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.456" endtime="20190524 10:06:43.456"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.460" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.458" endtime="20190524 10:06:43.460"></status>
</kw>
<msg timestamp="20190524 10:06:43.460" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.457" endtime="20190524 10:06:43.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.461" endtime="20190524 10:06:43.461"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.464" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.463" endtime="20190524 10:06:43.464"></status>
</kw>
<msg timestamp="20190524 10:06:43.464" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.462" endtime="20190524 10:06:43.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.465" endtime="20190524 10:06:43.465"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.469" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.468" endtime="20190524 10:06:43.469"></status>
</kw>
<msg timestamp="20190524 10:06:43.469" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.466" endtime="20190524 10:06:43.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.470" endtime="20190524 10:06:43.471"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.474" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.473" endtime="20190524 10:06:43.474"></status>
</kw>
<msg timestamp="20190524 10:06:43.474" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.472" endtime="20190524 10:06:43.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.475" endtime="20190524 10:06:43.476"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.478" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.478" endtime="20190524 10:06:43.479"></status>
</kw>
<msg timestamp="20190524 10:06:43.479" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.477" endtime="20190524 10:06:43.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.480" endtime="20190524 10:06:43.480"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.482" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.481" endtime="20190524 10:06:43.482"></status>
</kw>
<msg timestamp="20190524 10:06:43.482" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.481" endtime="20190524 10:06:43.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.483" endtime="20190524 10:06:43.483"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.487" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.486" endtime="20190524 10:06:43.487"></status>
</kw>
<msg timestamp="20190524 10:06:43.487" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.484" endtime="20190524 10:06:43.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.489" endtime="20190524 10:06:43.490"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.493" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.492" endtime="20190524 10:06:43.494"></status>
</kw>
<msg timestamp="20190524 10:06:43.494" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.490" endtime="20190524 10:06:43.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.495" endtime="20190524 10:06:43.496"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.450" endtime="20190524 10:06:43.496"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosSdIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='m..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.497" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.497" endtime="20190524 10:06:43.497"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.500" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.499" endtime="20190524 10:06:43.500"></status>
</kw>
<msg timestamp="20190524 10:06:43.500" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.498" endtime="20190524 10:06:43.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.501" endtime="20190524 10:06:43.501"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.504" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.503" endtime="20190524 10:06:43.504"></status>
</kw>
<msg timestamp="20190524 10:06:43.504" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.502" endtime="20190524 10:06:43.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.505" endtime="20190524 10:06:43.506"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.508" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.508" endtime="20190524 10:06:43.509"></status>
</kw>
<msg timestamp="20190524 10:06:43.509" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.507" endtime="20190524 10:06:43.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.510" endtime="20190524 10:06:43.510"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.513" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.512" endtime="20190524 10:06:43.513"></status>
</kw>
<msg timestamp="20190524 10:06:43.513" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.511" endtime="20190524 10:06:43.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.514" endtime="20190524 10:06:43.514"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.518" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.518" endtime="20190524 10:06:43.518"></status>
</kw>
<msg timestamp="20190524 10:06:43.519" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.515" endtime="20190524 10:06:43.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.519" endtime="20190524 10:06:43.520"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.523" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.522" endtime="20190524 10:06:43.523"></status>
</kw>
<msg timestamp="20190524 10:06:43.523" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.521" endtime="20190524 10:06:43.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.524" endtime="20190524 10:06:43.525"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.528" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.527" endtime="20190524 10:06:43.528"></status>
</kw>
<msg timestamp="20190524 10:06:43.528" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.526" endtime="20190524 10:06:43.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.529" endtime="20190524 10:06:43.529"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.532" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.531" endtime="20190524 10:06:43.532"></status>
</kw>
<msg timestamp="20190524 10:06:43.532" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.530" endtime="20190524 10:06:43.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.533" endtime="20190524 10:06:43.533"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.536" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.535" endtime="20190524 10:06:43.536"></status>
</kw>
<msg timestamp="20190524 10:06:43.536" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.534" endtime="20190524 10:06:43.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.537" endtime="20190524 10:06:43.538"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.496" endtime="20190524 10:06:43.538"></status>
</kw>
<kw name="${if_policy} = X(infraRsAttEntP=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', isUsingConnSel='no', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.540" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.539" endtime="20190524 10:06:43.540"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.543" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.542" endtime="20190524 10:06:43.543"></status>
</kw>
<msg timestamp="20190524 10:06:43.543" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.541" endtime="20190524 10:06:43.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.544" endtime="20190524 10:06:43.545"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.547" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.546" endtime="20190524 10:06:43.547"></status>
</kw>
<msg timestamp="20190524 10:06:43.547" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.545" endtime="20190524 10:06:43.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.548" endtime="20190524 10:06:43.548"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.550" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.550" endtime="20190524 10:06:43.550"></status>
</kw>
<msg timestamp="20190524 10:06:43.550" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.549" endtime="20190524 10:06:43.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.551" endtime="20190524 10:06:43.551"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.554" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.553" endtime="20190524 10:06:43.554"></status>
</kw>
<msg timestamp="20190524 10:06:43.554" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.552" endtime="20190524 10:06:43.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.555" endtime="20190524 10:06:43.556"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.558" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.558" endtime="20190524 10:06:43.559"></status>
</kw>
<msg timestamp="20190524 10:06:43.559" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.557" endtime="20190524 10:06:43.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.559" endtime="20190524 10:06:43.560"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.563" endtime="20190524 10:06:43.563"></status>
</kw>
<msg timestamp="20190524 10:06:43.564" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.560" endtime="20190524 10:06:43.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.567" endtime="20190524 10:06:43.569"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.566" endtime="20190524 10:06:43.569"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.570" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.570" endtime="20190524 10:06:43.570"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.565" endtime="20190524 10:06:43.570"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.564" endtime="20190524 10:06:43.570"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.538" endtime="20190524 10:06:43.571"></status>
</kw>
<kw name="${if_policy} = X(infraRsCdpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.572" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.572" endtime="20190524 10:06:43.572"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.575" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.574" endtime="20190524 10:06:43.575"></status>
</kw>
<msg timestamp="20190524 10:06:43.575" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.573" endtime="20190524 10:06:43.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.576" endtime="20190524 10:06:43.577"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.579" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.578" endtime="20190524 10:06:43.579"></status>
</kw>
<msg timestamp="20190524 10:06:43.579" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.577" endtime="20190524 10:06:43.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.580" endtime="20190524 10:06:43.580"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.582" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.582" endtime="20190524 10:06:43.582"></status>
</kw>
<msg timestamp="20190524 10:06:43.582" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.581" endtime="20190524 10:06:43.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.583" endtime="20190524 10:06:43.584"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.586" endtime="20190524 10:06:43.587"></status>
</kw>
<msg timestamp="20190524 10:06:43.587" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.585" endtime="20190524 10:06:43.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.591" endtime="20190524 10:06:43.592"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.590" endtime="20190524 10:06:43.593"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.594" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.594" endtime="20190524 10:06:43.594"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.589" endtime="20190524 10:06:43.594"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.588" endtime="20190524 10:06:43.594"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.571" endtime="20190524 10:06:43.594"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2IfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo',..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.595" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.595" endtime="20190524 10:06:43.596"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.598" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.597" endtime="20190524 10:06:43.598"></status>
</kw>
<msg timestamp="20190524 10:06:43.598" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.596" endtime="20190524 10:06:43.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.599" endtime="20190524 10:06:43.599"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.601" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.601" endtime="20190524 10:06:43.602"></status>
</kw>
<msg timestamp="20190524 10:06:43.602" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.600" endtime="20190524 10:06:43.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.603" endtime="20190524 10:06:43.603"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.605" endtime="20190524 10:06:43.606"></status>
</kw>
<msg timestamp="20190524 10:06:43.606" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.604" endtime="20190524 10:06:43.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.611" endtime="20190524 10:06:43.612"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.610" endtime="20190524 10:06:43.612"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.613" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.613" endtime="20190524 10:06:43.613"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.609" endtime="20190524 10:06:43.613"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.608" endtime="20190524 10:06:43.613"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.594" endtime="20190524 10:06:43.613"></status>
</kw>
<kw name="${if_policy} = X(infraRtAccBaseGrp=X(attributes=X(childAction='', lcOwn='local', modTs='2019-05-23T00:35:47.439+00:00', rn='rtaccBaseGrp-[uni/infra/accportprof-Leaf/hports-e2-typ-range]', status='', tCl='infraHPortS..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.615" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.614" endtime="20190524 10:06:43.615"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.617" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.616" endtime="20190524 10:06:43.617"></status>
</kw>
<msg timestamp="20190524 10:06:43.617" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.616" endtime="20190524 10:06:43.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.618" endtime="20190524 10:06:43.618"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.621" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.620" endtime="20190524 10:06:43.621"></status>
</kw>
<msg timestamp="20190524 10:06:43.621" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.619" endtime="20190524 10:06:43.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.622" endtime="20190524 10:06:43.623"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.626" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.625" endtime="20190524 10:06:43.626"></status>
</kw>
<msg timestamp="20190524 10:06:43.626" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.624" endtime="20190524 10:06:43.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.627" endtime="20190524 10:06:43.627"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.630" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.630" endtime="20190524 10:06:43.630"></status>
</kw>
<msg timestamp="20190524 10:06:43.630" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.628" endtime="20190524 10:06:43.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.631" endtime="20190524 10:06:43.631"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.633" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.633" endtime="20190524 10:06:43.633"></status>
</kw>
<msg timestamp="20190524 10:06:43.634" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.632" endtime="20190524 10:06:43.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.634" endtime="20190524 10:06:43.635"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.637" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.637" endtime="20190524 10:06:43.637"></status>
</kw>
<msg timestamp="20190524 10:06:43.637" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.636" endtime="20190524 10:06:43.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.638" endtime="20190524 10:06:43.639"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.641" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.641" endtime="20190524 10:06:43.641"></status>
</kw>
<msg timestamp="20190524 10:06:43.641" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.640" endtime="20190524 10:06:43.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.642" endtime="20190524 10:06:43.642"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.645" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.644" endtime="20190524 10:06:43.645"></status>
</kw>
<msg timestamp="20190524 10:06:43.645" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.643" endtime="20190524 10:06:43.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.645" endtime="20190524 10:06:43.646"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.648" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.648" endtime="20190524 10:06:43.649"></status>
</kw>
<msg timestamp="20190524 10:06:43.649" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.647" endtime="20190524 10:06:43.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.650" endtime="20190524 10:06:43.650"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.614" endtime="20190524 10:06:43.650"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.652" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.651" endtime="20190524 10:06:43.652"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.654" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.653" endtime="20190524 10:06:43.654"></status>
</kw>
<msg timestamp="20190524 10:06:43.654" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.652" endtime="20190524 10:06:43.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.655" endtime="20190524 10:06:43.656"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.658" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.657" endtime="20190524 10:06:43.658"></status>
</kw>
<msg timestamp="20190524 10:06:43.658" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.656" endtime="20190524 10:06:43.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.659" endtime="20190524 10:06:43.660"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.662" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.662" endtime="20190524 10:06:43.662"></status>
</kw>
<msg timestamp="20190524 10:06:43.662" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.661" endtime="20190524 10:06:43.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.663" endtime="20190524 10:06:43.663"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.666" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.665" endtime="20190524 10:06:43.666"></status>
</kw>
<msg timestamp="20190524 10:06:43.666" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.664" endtime="20190524 10:06:43.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.667" endtime="20190524 10:06:43.667"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.670" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.669" endtime="20190524 10:06:43.670"></status>
</kw>
<msg timestamp="20190524 10:06:43.670" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.668" endtime="20190524 10:06:43.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.671" endtime="20190524 10:06:43.672"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.674" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.673" endtime="20190524 10:06:43.674"></status>
</kw>
<msg timestamp="20190524 10:06:43.674" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.672" endtime="20190524 10:06:43.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.675" endtime="20190524 10:06:43.676"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.678" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.678" endtime="20190524 10:06:43.678"></status>
</kw>
<msg timestamp="20190524 10:06:43.678" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.677" endtime="20190524 10:06:43.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.679" endtime="20190524 10:06:43.679"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.682" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.681" endtime="20190524 10:06:43.682"></status>
</kw>
<msg timestamp="20190524 10:06:43.682" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.680" endtime="20190524 10:06:43.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.682" endtime="20190524 10:06:43.683"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.685" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.684" endtime="20190524 10:06:43.685"></status>
</kw>
<msg timestamp="20190524 10:06:43.685" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.684" endtime="20190524 10:06:43.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.686" endtime="20190524 10:06:43.686"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.650" endtime="20190524 10:06:43.686"></status>
</kw>
<kw name="${if_policy} = X(infraRsCoppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.688" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.687" endtime="20190524 10:06:43.689"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.692" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.691" endtime="20190524 10:06:43.692"></status>
</kw>
<msg timestamp="20190524 10:06:43.692" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.690" endtime="20190524 10:06:43.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.693" endtime="20190524 10:06:43.693"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.695" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.695" endtime="20190524 10:06:43.696"></status>
</kw>
<msg timestamp="20190524 10:06:43.696" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.694" endtime="20190524 10:06:43.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.696" endtime="20190524 10:06:43.697"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.699" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.698" endtime="20190524 10:06:43.699"></status>
</kw>
<msg timestamp="20190524 10:06:43.699" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.697" endtime="20190524 10:06:43.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.700" endtime="20190524 10:06:43.700"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.702" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.701" endtime="20190524 10:06:43.702"></status>
</kw>
<msg timestamp="20190524 10:06:43.702" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.701" endtime="20190524 10:06:43.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.703" endtime="20190524 10:06:43.704"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.707" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.706" endtime="20190524 10:06:43.707"></status>
</kw>
<msg timestamp="20190524 10:06:43.707" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.705" endtime="20190524 10:06:43.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.708" endtime="20190524 10:06:43.708"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.713" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.712" endtime="20190524 10:06:43.713"></status>
</kw>
<msg timestamp="20190524 10:06:43.713" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.709" endtime="20190524 10:06:43.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.714" endtime="20190524 10:06:43.715"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.717" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.716" endtime="20190524 10:06:43.717"></status>
</kw>
<msg timestamp="20190524 10:06:43.717" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.715" endtime="20190524 10:06:43.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.718" endtime="20190524 10:06:43.718"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.720" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.720" endtime="20190524 10:06:43.721"></status>
</kw>
<msg timestamp="20190524 10:06:43.721" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.719" endtime="20190524 10:06:43.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.722" endtime="20190524 10:06:43.722"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.725" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.724" endtime="20190524 10:06:43.725"></status>
</kw>
<msg timestamp="20190524 10:06:43.725" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.723" endtime="20190524 10:06:43.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.726" endtime="20190524 10:06:43.727"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.686" endtime="20190524 10:06:43.727"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosPfcIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.728" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.728" endtime="20190524 10:06:43.728"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.732" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.731" endtime="20190524 10:06:43.732"></status>
</kw>
<msg timestamp="20190524 10:06:43.732" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.729" endtime="20190524 10:06:43.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.734" endtime="20190524 10:06:43.735"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.739" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.738" endtime="20190524 10:06:43.740"></status>
</kw>
<msg timestamp="20190524 10:06:43.740" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.737" endtime="20190524 10:06:43.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.741" endtime="20190524 10:06:43.742"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.747" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.746" endtime="20190524 10:06:43.747"></status>
</kw>
<msg timestamp="20190524 10:06:43.747" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.744" endtime="20190524 10:06:43.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.748" endtime="20190524 10:06:43.750"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.754" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.753" endtime="20190524 10:06:43.754"></status>
</kw>
<msg timestamp="20190524 10:06:43.754" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.751" endtime="20190524 10:06:43.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.755" endtime="20190524 10:06:43.756"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.760" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.759" endtime="20190524 10:06:43.760"></status>
</kw>
<msg timestamp="20190524 10:06:43.761" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.757" endtime="20190524 10:06:43.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.762" endtime="20190524 10:06:43.763"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.765" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.765" endtime="20190524 10:06:43.766"></status>
</kw>
<msg timestamp="20190524 10:06:43.766" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.764" endtime="20190524 10:06:43.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.767" endtime="20190524 10:06:43.767"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.771" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.770" endtime="20190524 10:06:43.771"></status>
</kw>
<msg timestamp="20190524 10:06:43.771" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.768" endtime="20190524 10:06:43.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.772" endtime="20190524 10:06:43.773"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.777" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.776" endtime="20190524 10:06:43.778"></status>
</kw>
<msg timestamp="20190524 10:06:43.778" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.774" endtime="20190524 10:06:43.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.779" endtime="20190524 10:06:43.780"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.783" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.782" endtime="20190524 10:06:43.783"></status>
</kw>
<msg timestamp="20190524 10:06:43.783" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.781" endtime="20190524 10:06:43.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.784" endtime="20190524 10:06:43.785"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.727" endtime="20190524 10:06:43.785"></status>
</kw>
<kw name="${if_policy} = X(infraRsHIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.786" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.786" endtime="20190524 10:06:43.786"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.789" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.788" endtime="20190524 10:06:43.789"></status>
</kw>
<msg timestamp="20190524 10:06:43.789" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.787" endtime="20190524 10:06:43.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.790" endtime="20190524 10:06:43.790"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.794" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.793" endtime="20190524 10:06:43.795"></status>
</kw>
<msg timestamp="20190524 10:06:43.795" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.792" endtime="20190524 10:06:43.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.796" endtime="20190524 10:06:43.797"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.800" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.799" endtime="20190524 10:06:43.800"></status>
</kw>
<msg timestamp="20190524 10:06:43.800" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.798" endtime="20190524 10:06:43.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.801" endtime="20190524 10:06:43.801"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.805" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.804" endtime="20190524 10:06:43.805"></status>
</kw>
<msg timestamp="20190524 10:06:43.805" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.802" endtime="20190524 10:06:43.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.806" endtime="20190524 10:06:43.807"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.811" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.810" endtime="20190524 10:06:43.812"></status>
</kw>
<msg timestamp="20190524 10:06:43.812" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.808" endtime="20190524 10:06:43.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.813" endtime="20190524 10:06:43.813"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.816" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.816" endtime="20190524 10:06:43.816"></status>
</kw>
<msg timestamp="20190524 10:06:43.816" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.814" endtime="20190524 10:06:43.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.817" endtime="20190524 10:06:43.818"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.819" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.819" endtime="20190524 10:06:43.820"></status>
</kw>
<msg timestamp="20190524 10:06:43.820" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.818" endtime="20190524 10:06:43.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.820" endtime="20190524 10:06:43.821"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.823" endtime="20190524 10:06:43.824"></status>
</kw>
<msg timestamp="20190524 10:06:43.824" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.822" endtime="20190524 10:06:43.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.829" endtime="20190524 10:06:43.830"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.828" endtime="20190524 10:06:43.830"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.831" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.831" endtime="20190524 10:06:43.831"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.827" endtime="20190524 10:06:43.831"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.825" endtime="20190524 10:06:43.831"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.785" endtime="20190524 10:06:43.831"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2PortSecurityPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', r..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.832" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.832" endtime="20190524 10:06:43.832"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.835" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.834" endtime="20190524 10:06:43.835"></status>
</kw>
<msg timestamp="20190524 10:06:43.835" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.833" endtime="20190524 10:06:43.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.836" endtime="20190524 10:06:43.836"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.839" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.838" endtime="20190524 10:06:43.839"></status>
</kw>
<msg timestamp="20190524 10:06:43.839" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.837" endtime="20190524 10:06:43.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.840" endtime="20190524 10:06:43.841"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.844" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.843" endtime="20190524 10:06:43.844"></status>
</kw>
<msg timestamp="20190524 10:06:43.844" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.841" endtime="20190524 10:06:43.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.846" endtime="20190524 10:06:43.847"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.849" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.849" endtime="20190524 10:06:43.849"></status>
</kw>
<msg timestamp="20190524 10:06:43.850" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.848" endtime="20190524 10:06:43.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.850" endtime="20190524 10:06:43.851"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.853" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.852" endtime="20190524 10:06:43.853"></status>
</kw>
<msg timestamp="20190524 10:06:43.853" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.852" endtime="20190524 10:06:43.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.854" endtime="20190524 10:06:43.854"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.857" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.856" endtime="20190524 10:06:43.857"></status>
</kw>
<msg timestamp="20190524 10:06:43.857" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.855" endtime="20190524 10:06:43.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.858" endtime="20190524 10:06:43.858"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.862" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.861" endtime="20190524 10:06:43.862"></status>
</kw>
<msg timestamp="20190524 10:06:43.862" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.860" endtime="20190524 10:06:43.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.863" endtime="20190524 10:06:43.864"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.866" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.865" endtime="20190524 10:06:43.866"></status>
</kw>
<msg timestamp="20190524 10:06:43.866" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.865" endtime="20190524 10:06:43.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.867" endtime="20190524 10:06:43.867"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.870" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.869" endtime="20190524 10:06:43.870"></status>
</kw>
<msg timestamp="20190524 10:06:43.870" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.868" endtime="20190524 10:06:43.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.871" endtime="20190524 10:06:43.872"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.831" endtime="20190524 10:06:43.872"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2PortAuthPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.873" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.873" endtime="20190524 10:06:43.873"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.877" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.876" endtime="20190524 10:06:43.877"></status>
</kw>
<msg timestamp="20190524 10:06:43.877" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.874" endtime="20190524 10:06:43.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.879" endtime="20190524 10:06:43.879"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.882" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.881" endtime="20190524 10:06:43.882"></status>
</kw>
<msg timestamp="20190524 10:06:43.882" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.880" endtime="20190524 10:06:43.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.883" endtime="20190524 10:06:43.883"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.886" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.885" endtime="20190524 10:06:43.886"></status>
</kw>
<msg timestamp="20190524 10:06:43.886" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.884" endtime="20190524 10:06:43.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.887" endtime="20190524 10:06:43.887"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.890" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.889" endtime="20190524 10:06:43.890"></status>
</kw>
<msg timestamp="20190524 10:06:43.890" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.888" endtime="20190524 10:06:43.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.891" endtime="20190524 10:06:43.892"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.895" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.894" endtime="20190524 10:06:43.895"></status>
</kw>
<msg timestamp="20190524 10:06:43.896" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.893" endtime="20190524 10:06:43.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.897" endtime="20190524 10:06:43.897"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.899" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.899" endtime="20190524 10:06:43.899"></status>
</kw>
<msg timestamp="20190524 10:06:43.899" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.898" endtime="20190524 10:06:43.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.900" endtime="20190524 10:06:43.901"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.903" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.902" endtime="20190524 10:06:43.903"></status>
</kw>
<msg timestamp="20190524 10:06:43.903" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.901" endtime="20190524 10:06:43.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.904" endtime="20190524 10:06:43.904"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.907" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.906" endtime="20190524 10:06:43.907"></status>
</kw>
<msg timestamp="20190524 10:06:43.907" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.905" endtime="20190524 10:06:43.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.908" endtime="20190524 10:06:43.909"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.912" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.911" endtime="20190524 10:06:43.912"></status>
</kw>
<msg timestamp="20190524 10:06:43.912" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.910" endtime="20190524 10:06:43.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.913" endtime="20190524 10:06:43.914"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.872" endtime="20190524 10:06:43.914"></status>
</kw>
<kw name="${if_policy} = X(infraRsLacpPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo',..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.916" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.915" endtime="20190524 10:06:43.916"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.918" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.917" endtime="20190524 10:06:43.918"></status>
</kw>
<msg timestamp="20190524 10:06:43.918" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.917" endtime="20190524 10:06:43.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.919" endtime="20190524 10:06:43.919"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.921" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.921" endtime="20190524 10:06:43.921"></status>
</kw>
<msg timestamp="20190524 10:06:43.921" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.920" endtime="20190524 10:06:43.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.922" endtime="20190524 10:06:43.922"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.925" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.924" endtime="20190524 10:06:43.925"></status>
</kw>
<msg timestamp="20190524 10:06:43.925" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.923" endtime="20190524 10:06:43.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.926" endtime="20190524 10:06:43.926"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.929" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.928" endtime="20190524 10:06:43.929"></status>
</kw>
<msg timestamp="20190524 10:06:43.929" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.927" endtime="20190524 10:06:43.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.930" endtime="20190524 10:06:43.930"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.933" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.932" endtime="20190524 10:06:43.933"></status>
</kw>
<msg timestamp="20190524 10:06:43.933" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.931" endtime="20190524 10:06:43.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.934" endtime="20190524 10:06:43.935"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.937" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.937" endtime="20190524 10:06:43.937"></status>
</kw>
<msg timestamp="20190524 10:06:43.938" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.936" endtime="20190524 10:06:43.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.938" endtime="20190524 10:06:43.939"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.941" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.941" endtime="20190524 10:06:43.941"></status>
</kw>
<msg timestamp="20190524 10:06:43.942" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.940" endtime="20190524 10:06:43.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.942" endtime="20190524 10:06:43.943"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.945" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.944" endtime="20190524 10:06:43.945"></status>
</kw>
<msg timestamp="20190524 10:06:43.945" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.944" endtime="20190524 10:06:43.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.946" endtime="20190524 10:06:43.946"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.948" endtime="20190524 10:06:43.949"></status>
</kw>
<msg timestamp="20190524 10:06:43.949" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.947" endtime="20190524 10:06:43.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.954" endtime="20190524 10:06:43.955"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.953" endtime="20190524 10:06:43.955"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:43.956" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:43.956" endtime="20190524 10:06:43.956"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.951" endtime="20190524 10:06:43.956"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.950" endtime="20190524 10:06:43.956"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.915" endtime="20190524 10:06:43.957"></status>
</kw>
<kw name="${if_policy} = X(infraRsFcIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo',..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.959" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.958" endtime="20190524 10:06:43.959"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.962" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.961" endtime="20190524 10:06:43.962"></status>
</kw>
<msg timestamp="20190524 10:06:43.962" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.960" endtime="20190524 10:06:43.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.963" endtime="20190524 10:06:43.963"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.965" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.965" endtime="20190524 10:06:43.965"></status>
</kw>
<msg timestamp="20190524 10:06:43.966" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.964" endtime="20190524 10:06:43.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>"bpdu_guard"</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.967" endtime="20190524 10:06:43.967"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.969" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.969" endtime="20190524 10:06:43.969"></status>
</kw>
<msg timestamp="20190524 10:06:43.969" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.968" endtime="20190524 10:06:43.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>"global_vlan_scope"</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.970" endtime="20190524 10:06:43.970"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.972" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.972" endtime="20190524 10:06:43.973"></status>
</kw>
<msg timestamp="20190524 10:06:43.973" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.971" endtime="20190524 10:06:43.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.974" endtime="20190524 10:06:43.974"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.977" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.976" endtime="20190524 10:06:43.977"></status>
</kw>
<msg timestamp="20190524 10:06:43.977" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.975" endtime="20190524 10:06:43.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>"mcp_enabled"</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.978" endtime="20190524 10:06:43.979"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.981" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.981" endtime="20190524 10:06:43.982"></status>
</kw>
<msg timestamp="20190524 10:06:43.982" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.980" endtime="20190524 10:06:43.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.983" endtime="20190524 10:06:43.983"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.985" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.985" endtime="20190524 10:06:43.986"></status>
</kw>
<msg timestamp="20190524 10:06:43.986" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.984" endtime="20190524 10:06:43.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.987" endtime="20190524 10:06:43.987"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.989" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.989" endtime="20190524 10:06:43.990"></status>
</kw>
<msg timestamp="20190524 10:06:43.990" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.988" endtime="20190524 10:06:43.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.990" endtime="20190524 10:06:43.991"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:43.993" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:43.993" endtime="20190524 10:06:43.993"></status>
</kw>
<msg timestamp="20190524 10:06:43.993" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.992" endtime="20190524 10:06:43.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>"lacp_active"</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.994" endtime="20190524 10:06:43.995"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.957" endtime="20190524 10:06:43.995"></status>
</kw>
<kw name="${if_policy} = X(infraRsLldpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.183+00:00', monPolDn='uni/fabric/monfab-default', rType='mo..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:43.996" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:43.995" endtime="20190524 10:06:43.996"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:43.998" endtime="20190524 10:06:43.998"></status>
</kw>
<msg timestamp="20190524 10:06:43.998" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:43.997" endtime="20190524 10:06:43.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>"lldp_enabled"</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.004" endtime="20190524 10:06:44.005"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.003" endtime="20190524 10:06:44.005"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.007" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.007" endtime="20190524 10:06:44.007"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.001" endtime="20190524 10:06:44.007"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.000" endtime="20190524 10:06:44.007"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.995" endtime="20190524 10:06:44.007"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:43.227" endtime="20190524 10:06:44.007"></status>
</kw>
<doc>Verifies that Leaf Interface Policy Group 'vPC_Port' are configured with the expected parameters
- Interface Policy Group Name: vPC_Port
- Policy Group Type: vPC
- Description: vPC port-channel
- LLDP Policy: lldp_enabled
- STP Policy: bpdu_guard
- L2 Interface Policy: global_vlan_scope
- CDP Policy: cdp_enabled
- MCP Policy: mcp_enabled
- AAEP: baremetal
- Storm Control Policy:
- Link Policy: 10gig_auto
- Port Channel Policy: lacp_active</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy-group</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:43.134" endtime="20190524 10:06:44.008" critical="yes"></status>
</test>
<test id="s1-t69" name="Verify ACI Spine Interface Policy Group Configuration - Policy Group Name spine_pol_grp">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/funcprof/spaccportgrp-spine_pol_grp</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:44.012" level="INFO">${uri} = /api/node/mo/uni/infra/funcprof/spaccportgrp-spine_pol_grp</msg>
<status status="PASS" starttime="20190524 10:06:44.012" endtime="20190524 10:06:44.013"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:44.014" level="INFO">${filter} = rsp-subtree=full</msg>
<status status="PASS" starttime="20190524 10:06:44.014" endtime="20190524 10:06:44.015"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:44.017" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:44.017" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/funcprof/spaccportgrp-spine_pol_grp.json?rsp-subtree=full
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:44.049" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraSpAccPortGrp":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/funcprof/spaccportgrp-spine_pol_grp","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:44.518+00:00","monPolDn":"uni/fabric/monfab-default","name":"spine_pol_grp","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRtSpAccGrp":{"attributes":{"childAction":"","lcOwn":"local","modTs":"2019-05-23T00:35:48.146+00:00","rn":"rtspAccGrp-[uni/infra/spaccportprof-Spine2/shports-e1-typ-range]","status":"","tCl":"infraSHPortS","tDn":"uni/infra/spaccportprof-Spine2/shports-e1-typ-range"}}},{"infraRtSpAccGrp":{"attributes":{"childAction":"","lcOwn":"local","modTs":"2019-05-23T00:35:47.903+00:00","rn":"rtspAccGrp-[uni/infra/spaccportprof-Spine/shports-e1-typ-range]","status":"","tCl":"infraSHPortS","tDn":"uni/infra/spaccportprof-Spine/shports-e1-typ-range"}}},{"infraRsHIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.518+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rshIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"fabricHIfPol","tContextDn":"","tDn":"uni/infra/hintfpol-default","tRn":"hintfpol-default","tType":"name","tnFabricHIfPolName":"","uid":"0"}}},{"infraRsMacsecIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.518+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmacsecIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"macsecIfPol","tContextDn":"","tDn":"uni/infra/macsecifp-default","tRn":"macsecifp-default","tType":"name","tnMacsecIfPolName":"","uid":"0"}}},{"infraRsCoppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.518+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rscoppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"coppIfPol","tContextDn":"","tDn":"uni/infra/coppifpol-default","tRn":"coppifpol-default","tType":"name","tnCoppIfPolName":"","uid":"0"}}},{"infraRsCdpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.518+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rscdpIfPol","state":"formed","stateQual":"none","status":"","tCl":"cdpIfPol","tContextDn":"","tDn":"uni/infra/cdpIfP-cdp_disabled","tRn":"cdpIfP-cdp_disabled","tType":"name","tnCdpIfPolName":"cdp_disabled","uid":"0"}}},{"infraRsAttEntP":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","isUsingConnSel":"no","lcOwn":"local","modTs":"2019-05-23T00:35:44.518+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsattEntP","state":"formed","stateQual":"none","status":"","tCl":"infraAttEntityP","tDn":"uni/infra/attentp-baremetal2","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:44.063" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8d23ef0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:44.016" endtime="20190524 10:06:44.064"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.066" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:44.066" endtime="20190524 10:06:44.066"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy Group does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.068" endtime="20190524 10:06:44.068"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraSpAccPortGrp.attributes.name}</arg>
<arg>spine_pol_grp</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.071" endtime="20190524 10:06:44.071"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].infraSpAccPortGrp.attributes.descr}"</arg>
<arg>""</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.073" endtime="20190524 10:06:44.073"></status>
</kw>
<kw name="${if_policy} IN [ @{return.payload[0].infraSpAccPortGrp.children} ]" type="for">
<kw name="${if_policy} = X(infraRtSpAccGrp=X(attributes=X(childAction='', lcOwn='local', modTs='2019-05-23T00:35:48.146+00:00', rn='rtspAccGrp-[uni/infra/spaccportprof-Spine2/shports-e1-typ-range]', status='', tCl='infraSHPor..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.080" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.075" endtime="20190524 10:06:44.081"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.083" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.082" endtime="20190524 10:06:44.083"></status>
</kw>
<msg timestamp="20190524 10:06:44.083" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.081" endtime="20190524 10:06:44.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.084" endtime="20190524 10:06:44.084"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.086" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.086" endtime="20190524 10:06:44.086"></status>
</kw>
<msg timestamp="20190524 10:06:44.087" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.085" endtime="20190524 10:06:44.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.087" endtime="20190524 10:06:44.088"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.090" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.089" endtime="20190524 10:06:44.090"></status>
</kw>
<msg timestamp="20190524 10:06:44.090" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.088" endtime="20190524 10:06:44.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal2"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.090" endtime="20190524 10:06:44.091"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.074" endtime="20190524 10:06:44.091"></status>
</kw>
<kw name="${if_policy} = X(infraRtSpAccGrp=X(attributes=X(childAction='', lcOwn='local', modTs='2019-05-23T00:35:47.903+00:00', rn='rtspAccGrp-[uni/infra/spaccportprof-Spine/shports-e1-typ-range]', status='', tCl='infraSHPort..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.093" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.092" endtime="20190524 10:06:44.093"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.097" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.096" endtime="20190524 10:06:44.097"></status>
</kw>
<msg timestamp="20190524 10:06:44.097" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.094" endtime="20190524 10:06:44.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.098" endtime="20190524 10:06:44.099"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.101" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.101" endtime="20190524 10:06:44.102"></status>
</kw>
<msg timestamp="20190524 10:06:44.102" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.100" endtime="20190524 10:06:44.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.102" endtime="20190524 10:06:44.103"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.105" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.104" endtime="20190524 10:06:44.105"></status>
</kw>
<msg timestamp="20190524 10:06:44.105" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.103" endtime="20190524 10:06:44.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal2"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.106" endtime="20190524 10:06:44.106"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.091" endtime="20190524 10:06:44.106"></status>
</kw>
<kw name="${if_policy} = X(infraRsHIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.518+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.107" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.107" endtime="20190524 10:06:44.107"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.111" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.110" endtime="20190524 10:06:44.111"></status>
</kw>
<msg timestamp="20190524 10:06:44.111" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.109" endtime="20190524 10:06:44.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.112" endtime="20190524 10:06:44.113"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.114" endtime="20190524 10:06:44.115"></status>
</kw>
<msg timestamp="20190524 10:06:44.115" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.114" endtime="20190524 10:06:44.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.119" endtime="20190524 10:06:44.119"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.118" endtime="20190524 10:06:44.120"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.120" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.120" endtime="20190524 10:06:44.121"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.117" endtime="20190524 10:06:44.121"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.116" endtime="20190524 10:06:44.121"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.106" endtime="20190524 10:06:44.121"></status>
</kw>
<kw name="${if_policy} = X(infraRsMacsecIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.518+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.122" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.121" endtime="20190524 10:06:44.122"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.124" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.123" endtime="20190524 10:06:44.124"></status>
</kw>
<msg timestamp="20190524 10:06:44.124" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.123" endtime="20190524 10:06:44.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.125" endtime="20190524 10:06:44.125"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.128" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.127" endtime="20190524 10:06:44.128"></status>
</kw>
<msg timestamp="20190524 10:06:44.128" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.126" endtime="20190524 10:06:44.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.129" endtime="20190524 10:06:44.129"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.131" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.131" endtime="20190524 10:06:44.131"></status>
</kw>
<msg timestamp="20190524 10:06:44.131" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.130" endtime="20190524 10:06:44.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal2"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.132" endtime="20190524 10:06:44.132"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.121" endtime="20190524 10:06:44.132"></status>
</kw>
<kw name="${if_policy} = X(infraRsCoppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.518+00:00', monPolDn='uni/fabric/monfab-default', rType='mo..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.134" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.133" endtime="20190524 10:06:44.134"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.137" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.136" endtime="20190524 10:06:44.137"></status>
</kw>
<msg timestamp="20190524 10:06:44.137" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.134" endtime="20190524 10:06:44.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.137" endtime="20190524 10:06:44.138"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.140" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.139" endtime="20190524 10:06:44.140"></status>
</kw>
<msg timestamp="20190524 10:06:44.140" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.138" endtime="20190524 10:06:44.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.141" endtime="20190524 10:06:44.141"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.143" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.143" endtime="20190524 10:06:44.143"></status>
</kw>
<msg timestamp="20190524 10:06:44.144" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.142" endtime="20190524 10:06:44.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal2"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.144" endtime="20190524 10:06:44.145"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.132" endtime="20190524 10:06:44.145"></status>
</kw>
<kw name="${if_policy} = X(infraRsCdpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.518+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.146" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.145" endtime="20190524 10:06:44.146"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.147" endtime="20190524 10:06:44.148"></status>
</kw>
<msg timestamp="20190524 10:06:44.148" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.146" endtime="20190524 10:06:44.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.151" endtime="20190524 10:06:44.152"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.150" endtime="20190524 10:06:44.152"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.153" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.153" endtime="20190524 10:06:44.153"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.150" endtime="20190524 10:06:44.153"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.149" endtime="20190524 10:06:44.156"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.145" endtime="20190524 10:06:44.156"></status>
</kw>
<kw name="${if_policy} = X(infraRsAttEntP=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', isUsingConnSel='no', lcOwn='local', modTs='2019-05-23T00:35:44.518+00:00', monPolDn='uni/fabric/monfab-..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.157" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.157" endtime="20190524 10:06:44.157"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.160" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.159" endtime="20190524 10:06:44.160"></status>
</kw>
<msg timestamp="20190524 10:06:44.160" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.158" endtime="20190524 10:06:44.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_disabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.161" endtime="20190524 10:06:44.162"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.164" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.163" endtime="20190524 10:06:44.164"></status>
</kw>
<msg timestamp="20190524 10:06:44.164" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.162" endtime="20190524 10:06:44.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>""</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.165" endtime="20190524 10:06:44.165"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.167" endtime="20190524 10:06:44.167"></status>
</kw>
<msg timestamp="20190524 10:06:44.167" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.166" endtime="20190524 10:06:44.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal2"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal2"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal2"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal2"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.170" endtime="20190524 10:06:44.171"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.169" endtime="20190524 10:06:44.171"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.172" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.171" endtime="20190524 10:06:44.172"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.169" endtime="20190524 10:06:44.172"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.168" endtime="20190524 10:06:44.172"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.156" endtime="20190524 10:06:44.172"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.073" endtime="20190524 10:06:44.172"></status>
</kw>
<doc>Verifies that Spine Interface Policy Group 'spine_pol_grp' are configured with the expected parameters
- Interface Policy Group Name: spine_pol_grp
- Description:
- Link Policy:
- CDP Policy: cdp_disabled
- AAEP: baremetal2</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy-group</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:44.009" endtime="20190524 10:06:44.172" critical="yes"></status>
</test>
<test id="s1-t70" name="Verify ACI Leaf Interface Policy Group Configuration - Policy Group Name pc_Port">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/funcprof/accbundle-pc_Port</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:44.177" level="INFO">${uri} = /api/node/mo/uni/infra/funcprof/accbundle-pc_Port</msg>
<status status="PASS" starttime="20190524 10:06:44.176" endtime="20190524 10:06:44.177"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:44.179" level="INFO">${filter} = rsp-subtree=full</msg>
<status status="PASS" starttime="20190524 10:06:44.178" endtime="20190524 10:06:44.179"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:44.181" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:44.181" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/funcprof/accbundle-pc_Port.json?rsp-subtree=full
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:44.211" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraAccBndlGrp":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/funcprof/accbundle-pc_Port","extMngdBy":"","lagT":"link","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","name":"pc_Port","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRsStpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsstpIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"stpIfPol","tContextDn":"","tDn":"uni/infra/ifPol-default","tRn":"ifPol-default","tType":"name","tnStpIfPolName":"","uid":"0"}}},{"infraRsQosIngressDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsQosIngressDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsStormctrlIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsstormctrlIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"stormctrlIfPol","tContextDn":"","tDn":"uni/infra/stormctrlifp-default","tRn":"stormctrlifp-default","tType":"name","tnStormctrlIfPolName":"","uid":"0"}}},{"infraRsQosEgressDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsQosEgressDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsMonIfInfraPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmonIfInfraPol","state":"formed","stateQual":"default-target","status":"","tCl":"monInfraPol","tContextDn":"","tDn":"uni/infra/moninfra-default","tRn":"moninfra-default","tType":"name","tnMonInfraPolName":"","uid":"0"}}},{"infraRsMcpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmcpIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"mcpIfPol","tContextDn":"","tDn":"uni/infra/mcpIfP-default","tRn":"mcpIfP-default","tType":"name","tnMcpIfPolName":"","uid":"0"}}},{"infraRsMacsecIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsmacsecIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"macsecIfPol","tContextDn":"","tDn":"uni/infra/macsecifp-default","tRn":"macsecifp-default","tType":"name","tnMacsecIfPolName":"","uid":"0"}}},{"infraRsQosSdIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosSdIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosSdIfPol","tContextDn":"","tDn":"uni/infra/qossdpol-default","tRn":"qossdpol-default","tType":"name","tnQosSdIfPolName":"","uid":"0"}}},{"infraRsAttEntP":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","isUsingConnSel":"no","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsattEntP","state":"formed","stateQual":"none","status":"","tCl":"infraAttEntityP","tDn":"uni/infra/attentp-baremetal","tType":"mo","uid":"15374"}}},{"infraRsCdpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rscdpIfPol","state":"formed","stateQual":"none","status":"","tCl":"cdpIfPol","tContextDn":"","tDn":"uni/infra/cdpIfP-cdp_enabled","tRn":"cdpIfP-cdp_enabled","tType":"name","tnCdpIfPolName":"cdp_enabled","uid":"0"}}},{"infraRsL2IfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2IfPol","state":"formed","stateQual":"default-target","status":"","tCl":"l2IfPol","tContextDn":"","tDn":"uni/infra/l2IfP-default","tRn":"l2IfP-default","tType":"name","tnL2IfPolName":"","uid":"0"}}},{"infraRsQosDppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosDppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosDppPol","tContextDn":"","tDn":"uni/infra/qosdpppol-default","tRn":"qosdpppol-default","tType":"name","tnQosDppPolName":"","uid":"0"}}},{"infraRsCoppIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rscoppIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"coppIfPol","tContextDn":"","tDn":"uni/infra/coppifpol-default","tRn":"coppifpol-default","tType":"name","tnCoppIfPolName":"","uid":"0"}}},{"infraRsQosPfcIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsqosPfcIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"qosPfcIfPol","tContextDn":"","tDn":"uni/infra/pfc-default","tRn":"pfc-default","tType":"name","tnQosPfcIfPolName":"","uid":"0"}}},{"infraRsHIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rshIfPol","state":"formed","stateQual":"none","status":"","tCl":"fabricHIfPol","tContextDn":"","tDn":"uni/infra/hintfpol-10gig_auto","tRn":"hintfpol-10gig_auto","tType":"name","tnFabricHIfPolName":"10gig_auto","uid":"0"}}},{"infraRsL2PortSecurityPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2PortSecurityPol","state":"formed","stateQual":"default-target","status":"","tCl":"l2PortSecurityPol","tContextDn":"","tDn":"uni/infra/portsecurityP-default","tRn":"portsecurityP-default","tType":"name","tnL2PortSecurityPolName":"","uid":"0"}}},{"infraRsL2PortAuthPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsl2PortAuthPol","state":"formed","stateQual":"default-target","status":"","tCl":"l2PortAuthPol","tContextDn":"","tDn":"uni/infra/portauthpol-default","tRn":"portauthpol-default","tType":"name","tnL2PortAuthPolName":"","uid":"0"}}},{"infraRsLacpPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rslacpPol","state":"formed","stateQual":"default-target","status":"","tCl":"lacpLagPol","tContextDn":"","tDn":"uni/infra/lacplagp-default","tRn":"lacplagp-default","tType":"name","tnLacpLagPolName":"","uid":"0"}}},{"infraRsFcIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsfcIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"fcIfPol","tContextDn":"","tDn":"uni/infra/fcIfPol-default","tRn":"fcIfPol-default","tType":"name","tnFcIfPolName":"","uid":"0"}}},{"infraRsLldpIfPol":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:44.765+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rslldpIfPol","state":"formed","stateQual":"default-target","status":"","tCl":"lldpIfPol","tContextDn":"","tDn":"uni/infra/lldpIfP-default","tRn":"lldpIfP-default","tType":"name","tnLldpIfPolName":"","uid":"0"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:44.248" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dd9160&gt;</msg>
<status status="PASS" starttime="20190524 10:06:44.180" endtime="20190524 10:06:44.248"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.250" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:44.249" endtime="20190524 10:06:44.250"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Policy Group does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.251" endtime="20190524 10:06:44.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraAccBndlGrp.attributes.name}</arg>
<arg>pc_Port</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.253" endtime="20190524 10:06:44.254"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>False</arg>
</arguments>
<assign>
<var>${lldp_found}</var>
</assign>
<msg timestamp="20190524 10:06:44.255" level="INFO">${lldp_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.255" endtime="20190524 10:06:44.255"></status>
</kw>
<kw name="${if_policy} IN [ @{return.payload[0].infraAccBndlGrp.children} ]" type="for">
<kw name="${if_policy} = X(infraRsStpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.261" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.257" endtime="20190524 10:06:44.262"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.265" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.264" endtime="20190524 10:06:44.265"></status>
</kw>
<msg timestamp="20190524 10:06:44.265" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.263" endtime="20190524 10:06:44.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.266" endtime="20190524 10:06:44.266"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.268" endtime="20190524 10:06:44.268"></status>
</kw>
<msg timestamp="20190524 10:06:44.268" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.267" endtime="20190524 10:06:44.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.271" endtime="20190524 10:06:44.272"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.271" endtime="20190524 10:06:44.272"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.273" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.273" endtime="20190524 10:06:44.273"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.270" endtime="20190524 10:06:44.273"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.269" endtime="20190524 10:06:44.273"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.256" endtime="20190524 10:06:44.273"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosIngressDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', ..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.274" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.274" endtime="20190524 10:06:44.274"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.278" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.277" endtime="20190524 10:06:44.278"></status>
</kw>
<msg timestamp="20190524 10:06:44.278" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.275" endtime="20190524 10:06:44.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.279" endtime="20190524 10:06:44.279"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.281" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.281" endtime="20190524 10:06:44.281"></status>
</kw>
<msg timestamp="20190524 10:06:44.281" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.280" endtime="20190524 10:06:44.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.282" endtime="20190524 10:06:44.283"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.285" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.284" endtime="20190524 10:06:44.285"></status>
</kw>
<msg timestamp="20190524 10:06:44.285" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.283" endtime="20190524 10:06:44.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.286" endtime="20190524 10:06:44.286"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.288" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.288" endtime="20190524 10:06:44.288"></status>
</kw>
<msg timestamp="20190524 10:06:44.288" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.287" endtime="20190524 10:06:44.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.289" endtime="20190524 10:06:44.289"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.291" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.291" endtime="20190524 10:06:44.292"></status>
</kw>
<msg timestamp="20190524 10:06:44.292" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.290" endtime="20190524 10:06:44.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.293" endtime="20190524 10:06:44.293"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.295" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.295" endtime="20190524 10:06:44.296"></status>
</kw>
<msg timestamp="20190524 10:06:44.296" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.294" endtime="20190524 10:06:44.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.297" endtime="20190524 10:06:44.298"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.300" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.299" endtime="20190524 10:06:44.300"></status>
</kw>
<msg timestamp="20190524 10:06:44.300" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.298" endtime="20190524 10:06:44.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.301" endtime="20190524 10:06:44.301"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.303" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.303" endtime="20190524 10:06:44.303"></status>
</kw>
<msg timestamp="20190524 10:06:44.303" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.302" endtime="20190524 10:06:44.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.304" endtime="20190524 10:06:44.305"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.307" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.307" endtime="20190524 10:06:44.307"></status>
</kw>
<msg timestamp="20190524 10:06:44.308" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.306" endtime="20190524 10:06:44.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.308" endtime="20190524 10:06:44.310"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.273" endtime="20190524 10:06:44.310"></status>
</kw>
<kw name="${if_policy} = X(infraRsStormctrlIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rTyp..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.312" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.311" endtime="20190524 10:06:44.312"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.314" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.313" endtime="20190524 10:06:44.314"></status>
</kw>
<msg timestamp="20190524 10:06:44.314" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.313" endtime="20190524 10:06:44.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.315" endtime="20190524 10:06:44.315"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.318" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.318" endtime="20190524 10:06:44.318"></status>
</kw>
<msg timestamp="20190524 10:06:44.318" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.316" endtime="20190524 10:06:44.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.319" endtime="20190524 10:06:44.320"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.322" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.321" endtime="20190524 10:06:44.322"></status>
</kw>
<msg timestamp="20190524 10:06:44.322" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.320" endtime="20190524 10:06:44.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.322" endtime="20190524 10:06:44.323"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.325" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.324" endtime="20190524 10:06:44.325"></status>
</kw>
<msg timestamp="20190524 10:06:44.325" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.324" endtime="20190524 10:06:44.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.326" endtime="20190524 10:06:44.326"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.329" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.328" endtime="20190524 10:06:44.329"></status>
</kw>
<msg timestamp="20190524 10:06:44.329" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.328" endtime="20190524 10:06:44.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.330" endtime="20190524 10:06:44.330"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.332" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.332" endtime="20190524 10:06:44.332"></status>
</kw>
<msg timestamp="20190524 10:06:44.332" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.331" endtime="20190524 10:06:44.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.333" endtime="20190524 10:06:44.333"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.335" endtime="20190524 10:06:44.335"></status>
</kw>
<msg timestamp="20190524 10:06:44.336" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.334" endtime="20190524 10:06:44.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.339" endtime="20190524 10:06:44.340"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.339" endtime="20190524 10:06:44.340"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.341" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.341" endtime="20190524 10:06:44.341"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.338" endtime="20190524 10:06:44.341"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.337" endtime="20190524 10:06:44.341"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.310" endtime="20190524 10:06:44.341"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosEgressDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', r..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.343" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.342" endtime="20190524 10:06:44.343"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.345" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.344" endtime="20190524 10:06:44.345"></status>
</kw>
<msg timestamp="20190524 10:06:44.345" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.344" endtime="20190524 10:06:44.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.346" endtime="20190524 10:06:44.346"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.348" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.348" endtime="20190524 10:06:44.348"></status>
</kw>
<msg timestamp="20190524 10:06:44.349" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.347" endtime="20190524 10:06:44.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.349" endtime="20190524 10:06:44.350"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.351" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.351" endtime="20190524 10:06:44.352"></status>
</kw>
<msg timestamp="20190524 10:06:44.352" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.350" endtime="20190524 10:06:44.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.352" endtime="20190524 10:06:44.353"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.356" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.355" endtime="20190524 10:06:44.356"></status>
</kw>
<msg timestamp="20190524 10:06:44.356" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.353" endtime="20190524 10:06:44.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.356" endtime="20190524 10:06:44.357"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.359" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.359" endtime="20190524 10:06:44.359"></status>
</kw>
<msg timestamp="20190524 10:06:44.359" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.358" endtime="20190524 10:06:44.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.360" endtime="20190524 10:06:44.360"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.363" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.362" endtime="20190524 10:06:44.363"></status>
</kw>
<msg timestamp="20190524 10:06:44.363" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.361" endtime="20190524 10:06:44.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.364" endtime="20190524 10:06:44.364"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.366" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.365" endtime="20190524 10:06:44.366"></status>
</kw>
<msg timestamp="20190524 10:06:44.366" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.365" endtime="20190524 10:06:44.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.367" endtime="20190524 10:06:44.367"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.369" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.369" endtime="20190524 10:06:44.369"></status>
</kw>
<msg timestamp="20190524 10:06:44.369" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.368" endtime="20190524 10:06:44.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.370" endtime="20190524 10:06:44.370"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.373" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.372" endtime="20190524 10:06:44.373"></status>
</kw>
<msg timestamp="20190524 10:06:44.373" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.371" endtime="20190524 10:06:44.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.374" endtime="20190524 10:06:44.375"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.341" endtime="20190524 10:06:44.375"></status>
</kw>
<kw name="${if_policy} = X(infraRsMonIfInfraPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.376" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.376" endtime="20190524 10:06:44.377"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.379" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.378" endtime="20190524 10:06:44.379"></status>
</kw>
<msg timestamp="20190524 10:06:44.379" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.377" endtime="20190524 10:06:44.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.380" endtime="20190524 10:06:44.380"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.382" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.381" endtime="20190524 10:06:44.382"></status>
</kw>
<msg timestamp="20190524 10:06:44.382" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.381" endtime="20190524 10:06:44.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.383" endtime="20190524 10:06:44.383"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.385" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.385" endtime="20190524 10:06:44.385"></status>
</kw>
<msg timestamp="20190524 10:06:44.386" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.384" endtime="20190524 10:06:44.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.386" endtime="20190524 10:06:44.387"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.389" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.389" endtime="20190524 10:06:44.389"></status>
</kw>
<msg timestamp="20190524 10:06:44.389" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.388" endtime="20190524 10:06:44.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.390" endtime="20190524 10:06:44.390"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.394" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.393" endtime="20190524 10:06:44.394"></status>
</kw>
<msg timestamp="20190524 10:06:44.394" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.391" endtime="20190524 10:06:44.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.395" endtime="20190524 10:06:44.395"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.397" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.397" endtime="20190524 10:06:44.397"></status>
</kw>
<msg timestamp="20190524 10:06:44.398" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.396" endtime="20190524 10:06:44.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.398" endtime="20190524 10:06:44.399"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.401" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.400" endtime="20190524 10:06:44.401"></status>
</kw>
<msg timestamp="20190524 10:06:44.401" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.399" endtime="20190524 10:06:44.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.401" endtime="20190524 10:06:44.402"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.404" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.403" endtime="20190524 10:06:44.404"></status>
</kw>
<msg timestamp="20190524 10:06:44.404" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.403" endtime="20190524 10:06:44.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.405" endtime="20190524 10:06:44.405"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.407" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.407" endtime="20190524 10:06:44.408"></status>
</kw>
<msg timestamp="20190524 10:06:44.408" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.406" endtime="20190524 10:06:44.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.408" endtime="20190524 10:06:44.409"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.375" endtime="20190524 10:06:44.409"></status>
</kw>
<kw name="${if_policy} = X(infraRsMcpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.411" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.410" endtime="20190524 10:06:44.411"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.413" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.413" endtime="20190524 10:06:44.413"></status>
</kw>
<msg timestamp="20190524 10:06:44.413" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.412" endtime="20190524 10:06:44.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.414" endtime="20190524 10:06:44.415"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.417" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.416" endtime="20190524 10:06:44.417"></status>
</kw>
<msg timestamp="20190524 10:06:44.417" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.415" endtime="20190524 10:06:44.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.417" endtime="20190524 10:06:44.418"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.420" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.420" endtime="20190524 10:06:44.420"></status>
</kw>
<msg timestamp="20190524 10:06:44.421" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.419" endtime="20190524 10:06:44.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.422" endtime="20190524 10:06:44.422"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.424" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.424" endtime="20190524 10:06:44.424"></status>
</kw>
<msg timestamp="20190524 10:06:44.424" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.423" endtime="20190524 10:06:44.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.425" endtime="20190524 10:06:44.426"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.427" endtime="20190524 10:06:44.428"></status>
</kw>
<msg timestamp="20190524 10:06:44.428" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.427" endtime="20190524 10:06:44.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.432" endtime="20190524 10:06:44.433"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.431" endtime="20190524 10:06:44.433"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.434" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.434" endtime="20190524 10:06:44.434"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.430" endtime="20190524 10:06:44.434"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.429" endtime="20190524 10:06:44.434"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.409" endtime="20190524 10:06:44.435"></status>
</kw>
<kw name="${if_policy} = X(infraRsMacsecIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.436" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.435" endtime="20190524 10:06:44.436"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.438" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.437" endtime="20190524 10:06:44.438"></status>
</kw>
<msg timestamp="20190524 10:06:44.438" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.436" endtime="20190524 10:06:44.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.439" endtime="20190524 10:06:44.439"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.442" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.441" endtime="20190524 10:06:44.442"></status>
</kw>
<msg timestamp="20190524 10:06:44.442" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.440" endtime="20190524 10:06:44.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.443" endtime="20190524 10:06:44.443"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.446" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.445" endtime="20190524 10:06:44.446"></status>
</kw>
<msg timestamp="20190524 10:06:44.446" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.444" endtime="20190524 10:06:44.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.447" endtime="20190524 10:06:44.447"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.449" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.449" endtime="20190524 10:06:44.449"></status>
</kw>
<msg timestamp="20190524 10:06:44.450" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.448" endtime="20190524 10:06:44.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.450" endtime="20190524 10:06:44.451"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.454" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.453" endtime="20190524 10:06:44.454"></status>
</kw>
<msg timestamp="20190524 10:06:44.454" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.452" endtime="20190524 10:06:44.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.455" endtime="20190524 10:06:44.455"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.457" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.457" endtime="20190524 10:06:44.457"></status>
</kw>
<msg timestamp="20190524 10:06:44.458" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.456" endtime="20190524 10:06:44.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.458" endtime="20190524 10:06:44.459"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.461" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.460" endtime="20190524 10:06:44.461"></status>
</kw>
<msg timestamp="20190524 10:06:44.461" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.459" endtime="20190524 10:06:44.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.462" endtime="20190524 10:06:44.462"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.465" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.464" endtime="20190524 10:06:44.465"></status>
</kw>
<msg timestamp="20190524 10:06:44.465" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.463" endtime="20190524 10:06:44.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.466" endtime="20190524 10:06:44.466"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.468" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.467" endtime="20190524 10:06:44.468"></status>
</kw>
<msg timestamp="20190524 10:06:44.468" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.467" endtime="20190524 10:06:44.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.469" endtime="20190524 10:06:44.469"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.435" endtime="20190524 10:06:44.469"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosSdIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='m..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.471" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.471" endtime="20190524 10:06:44.471"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.473" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.473" endtime="20190524 10:06:44.473"></status>
</kw>
<msg timestamp="20190524 10:06:44.473" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.472" endtime="20190524 10:06:44.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.474" endtime="20190524 10:06:44.474"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.476" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.476" endtime="20190524 10:06:44.476"></status>
</kw>
<msg timestamp="20190524 10:06:44.477" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.475" endtime="20190524 10:06:44.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.477" endtime="20190524 10:06:44.478"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.479" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.479" endtime="20190524 10:06:44.480"></status>
</kw>
<msg timestamp="20190524 10:06:44.480" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.478" endtime="20190524 10:06:44.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.480" endtime="20190524 10:06:44.481"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.483" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.482" endtime="20190524 10:06:44.483"></status>
</kw>
<msg timestamp="20190524 10:06:44.483" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.481" endtime="20190524 10:06:44.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.484" endtime="20190524 10:06:44.484"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.486" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.485" endtime="20190524 10:06:44.486"></status>
</kw>
<msg timestamp="20190524 10:06:44.486" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.485" endtime="20190524 10:06:44.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.487" endtime="20190524 10:06:44.487"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.490" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.490" endtime="20190524 10:06:44.490"></status>
</kw>
<msg timestamp="20190524 10:06:44.490" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.488" endtime="20190524 10:06:44.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.491" endtime="20190524 10:06:44.492"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.494" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.493" endtime="20190524 10:06:44.494"></status>
</kw>
<msg timestamp="20190524 10:06:44.494" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.492" endtime="20190524 10:06:44.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.494" endtime="20190524 10:06:44.495"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.497" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.496" endtime="20190524 10:06:44.497"></status>
</kw>
<msg timestamp="20190524 10:06:44.497" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.495" endtime="20190524 10:06:44.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.498" endtime="20190524 10:06:44.498"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.500" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.499" endtime="20190524 10:06:44.500"></status>
</kw>
<msg timestamp="20190524 10:06:44.500" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.499" endtime="20190524 10:06:44.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.501" endtime="20190524 10:06:44.501"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.469" endtime="20190524 10:06:44.501"></status>
</kw>
<kw name="${if_policy} = X(infraRsAttEntP=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', isUsingConnSel='no', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.502" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.502" endtime="20190524 10:06:44.502"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.504" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.504" endtime="20190524 10:06:44.504"></status>
</kw>
<msg timestamp="20190524 10:06:44.504" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.503" endtime="20190524 10:06:44.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.505" endtime="20190524 10:06:44.508"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.510" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.510" endtime="20190524 10:06:44.511"></status>
</kw>
<msg timestamp="20190524 10:06:44.511" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.509" endtime="20190524 10:06:44.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.511" endtime="20190524 10:06:44.512"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.514" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.513" endtime="20190524 10:06:44.514"></status>
</kw>
<msg timestamp="20190524 10:06:44.514" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.513" endtime="20190524 10:06:44.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.515" endtime="20190524 10:06:44.516"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.518" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.517" endtime="20190524 10:06:44.518"></status>
</kw>
<msg timestamp="20190524 10:06:44.518" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.516" endtime="20190524 10:06:44.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.518" endtime="20190524 10:06:44.519"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.521" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.520" endtime="20190524 10:06:44.521"></status>
</kw>
<msg timestamp="20190524 10:06:44.521" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.519" endtime="20190524 10:06:44.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.522" endtime="20190524 10:06:44.523"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.525" endtime="20190524 10:06:44.526"></status>
</kw>
<msg timestamp="20190524 10:06:44.526" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.524" endtime="20190524 10:06:44.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.531" endtime="20190524 10:06:44.532"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.530" endtime="20190524 10:06:44.532"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.534" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.534" endtime="20190524 10:06:44.534"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.528" endtime="20190524 10:06:44.534"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.527" endtime="20190524 10:06:44.534"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.501" endtime="20190524 10:06:44.534"></status>
</kw>
<kw name="${if_policy} = X(infraRsCdpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.536" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.535" endtime="20190524 10:06:44.536"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.538" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.537" endtime="20190524 10:06:44.538"></status>
</kw>
<msg timestamp="20190524 10:06:44.538" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.537" endtime="20190524 10:06:44.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.539" endtime="20190524 10:06:44.539"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.542" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.541" endtime="20190524 10:06:44.542"></status>
</kw>
<msg timestamp="20190524 10:06:44.542" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.540" endtime="20190524 10:06:44.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.543" endtime="20190524 10:06:44.543"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.545" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.544" endtime="20190524 10:06:44.545"></status>
</kw>
<msg timestamp="20190524 10:06:44.545" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.544" endtime="20190524 10:06:44.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.546" endtime="20190524 10:06:44.546"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.548" endtime="20190524 10:06:44.548"></status>
</kw>
<msg timestamp="20190524 10:06:44.548" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.547" endtime="20190524 10:06:44.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.552" endtime="20190524 10:06:44.553"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.551" endtime="20190524 10:06:44.553"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.554" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.554" endtime="20190524 10:06:44.554"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.551" endtime="20190524 10:06:44.554"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.549" endtime="20190524 10:06:44.554"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.534" endtime="20190524 10:06:44.554"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2IfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo',..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.555" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.555" endtime="20190524 10:06:44.555"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.557" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.557" endtime="20190524 10:06:44.557"></status>
</kw>
<msg timestamp="20190524 10:06:44.558" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.556" endtime="20190524 10:06:44.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.558" endtime="20190524 10:06:44.559"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.561" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.560" endtime="20190524 10:06:44.561"></status>
</kw>
<msg timestamp="20190524 10:06:44.561" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.559" endtime="20190524 10:06:44.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.562" endtime="20190524 10:06:44.562"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.564" endtime="20190524 10:06:44.565"></status>
</kw>
<msg timestamp="20190524 10:06:44.565" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.563" endtime="20190524 10:06:44.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.568" endtime="20190524 10:06:44.572"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.567" endtime="20190524 10:06:44.572"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.573" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.573" endtime="20190524 10:06:44.573"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.566" endtime="20190524 10:06:44.574"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.565" endtime="20190524 10:06:44.574"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.554" endtime="20190524 10:06:44.574"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosDppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.575" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.575" endtime="20190524 10:06:44.575"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.577" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.577" endtime="20190524 10:06:44.578"></status>
</kw>
<msg timestamp="20190524 10:06:44.578" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.576" endtime="20190524 10:06:44.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.578" endtime="20190524 10:06:44.579"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.581" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.580" endtime="20190524 10:06:44.581"></status>
</kw>
<msg timestamp="20190524 10:06:44.581" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.579" endtime="20190524 10:06:44.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.581" endtime="20190524 10:06:44.582"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.584" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.583" endtime="20190524 10:06:44.584"></status>
</kw>
<msg timestamp="20190524 10:06:44.584" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.583" endtime="20190524 10:06:44.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.585" endtime="20190524 10:06:44.585"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.587" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.587" endtime="20190524 10:06:44.587"></status>
</kw>
<msg timestamp="20190524 10:06:44.588" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.586" endtime="20190524 10:06:44.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.588" endtime="20190524 10:06:44.589"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.592" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.591" endtime="20190524 10:06:44.592"></status>
</kw>
<msg timestamp="20190524 10:06:44.592" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.590" endtime="20190524 10:06:44.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.593" endtime="20190524 10:06:44.593"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.596" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.595" endtime="20190524 10:06:44.596"></status>
</kw>
<msg timestamp="20190524 10:06:44.596" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.594" endtime="20190524 10:06:44.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.597" endtime="20190524 10:06:44.597"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.599" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.599" endtime="20190524 10:06:44.599"></status>
</kw>
<msg timestamp="20190524 10:06:44.599" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.598" endtime="20190524 10:06:44.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.600" endtime="20190524 10:06:44.600"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.602" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.602" endtime="20190524 10:06:44.602"></status>
</kw>
<msg timestamp="20190524 10:06:44.603" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.601" endtime="20190524 10:06:44.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.603" endtime="20190524 10:06:44.604"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.605" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.605" endtime="20190524 10:06:44.606"></status>
</kw>
<msg timestamp="20190524 10:06:44.606" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.604" endtime="20190524 10:06:44.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.607" endtime="20190524 10:06:44.607"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.574" endtime="20190524 10:06:44.607"></status>
</kw>
<kw name="${if_policy} = X(infraRsCoppIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.608" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.608" endtime="20190524 10:06:44.608"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.611" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.610" endtime="20190524 10:06:44.611"></status>
</kw>
<msg timestamp="20190524 10:06:44.611" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.609" endtime="20190524 10:06:44.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.612" endtime="20190524 10:06:44.612"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.614" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.614" endtime="20190524 10:06:44.614"></status>
</kw>
<msg timestamp="20190524 10:06:44.615" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.613" endtime="20190524 10:06:44.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.615" endtime="20190524 10:06:44.616"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.618" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.617" endtime="20190524 10:06:44.618"></status>
</kw>
<msg timestamp="20190524 10:06:44.618" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.616" endtime="20190524 10:06:44.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.619" endtime="20190524 10:06:44.619"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.622" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.621" endtime="20190524 10:06:44.622"></status>
</kw>
<msg timestamp="20190524 10:06:44.622" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.620" endtime="20190524 10:06:44.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.623" endtime="20190524 10:06:44.624"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.627" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.626" endtime="20190524 10:06:44.627"></status>
</kw>
<msg timestamp="20190524 10:06:44.627" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.625" endtime="20190524 10:06:44.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.628" endtime="20190524 10:06:44.629"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.631" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.630" endtime="20190524 10:06:44.631"></status>
</kw>
<msg timestamp="20190524 10:06:44.631" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.629" endtime="20190524 10:06:44.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.632" endtime="20190524 10:06:44.633"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.635" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.634" endtime="20190524 10:06:44.635"></status>
</kw>
<msg timestamp="20190524 10:06:44.635" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.633" endtime="20190524 10:06:44.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.635" endtime="20190524 10:06:44.636"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.638" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.637" endtime="20190524 10:06:44.638"></status>
</kw>
<msg timestamp="20190524 10:06:44.638" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.637" endtime="20190524 10:06:44.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.639" endtime="20190524 10:06:44.639"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.641" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.641" endtime="20190524 10:06:44.641"></status>
</kw>
<msg timestamp="20190524 10:06:44.641" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.640" endtime="20190524 10:06:44.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.642" endtime="20190524 10:06:44.642"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.607" endtime="20190524 10:06:44.643"></status>
</kw>
<kw name="${if_policy} = X(infraRsQosPfcIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.644" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.643" endtime="20190524 10:06:44.644"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.646" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.645" endtime="20190524 10:06:44.646"></status>
</kw>
<msg timestamp="20190524 10:06:44.646" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.645" endtime="20190524 10:06:44.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.647" endtime="20190524 10:06:44.648"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.651" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.650" endtime="20190524 10:06:44.651"></status>
</kw>
<msg timestamp="20190524 10:06:44.651" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.648" endtime="20190524 10:06:44.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.652" endtime="20190524 10:06:44.652"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.654" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.654" endtime="20190524 10:06:44.654"></status>
</kw>
<msg timestamp="20190524 10:06:44.654" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.653" endtime="20190524 10:06:44.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.655" endtime="20190524 10:06:44.656"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.658" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.657" endtime="20190524 10:06:44.658"></status>
</kw>
<msg timestamp="20190524 10:06:44.658" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.656" endtime="20190524 10:06:44.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.659" endtime="20190524 10:06:44.659"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.661" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.661" endtime="20190524 10:06:44.661"></status>
</kw>
<msg timestamp="20190524 10:06:44.661" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.660" endtime="20190524 10:06:44.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.662" endtime="20190524 10:06:44.662"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.664" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.664" endtime="20190524 10:06:44.665"></status>
</kw>
<msg timestamp="20190524 10:06:44.665" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.663" endtime="20190524 10:06:44.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.665" endtime="20190524 10:06:44.666"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.668" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.667" endtime="20190524 10:06:44.670"></status>
</kw>
<msg timestamp="20190524 10:06:44.670" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.666" endtime="20190524 10:06:44.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.671" endtime="20190524 10:06:44.671"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.674" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.673" endtime="20190524 10:06:44.674"></status>
</kw>
<msg timestamp="20190524 10:06:44.674" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.672" endtime="20190524 10:06:44.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.675" endtime="20190524 10:06:44.675"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.677" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.677" endtime="20190524 10:06:44.677"></status>
</kw>
<msg timestamp="20190524 10:06:44.678" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.676" endtime="20190524 10:06:44.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.678" endtime="20190524 10:06:44.679"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.643" endtime="20190524 10:06:44.679"></status>
</kw>
<kw name="${if_policy} = X(infraRsHIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo', ..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.680" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.679" endtime="20190524 10:06:44.680"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.682" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.681" endtime="20190524 10:06:44.682"></status>
</kw>
<msg timestamp="20190524 10:06:44.682" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.680" endtime="20190524 10:06:44.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.682" endtime="20190524 10:06:44.683"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.685" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.684" endtime="20190524 10:06:44.685"></status>
</kw>
<msg timestamp="20190524 10:06:44.685" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.684" endtime="20190524 10:06:44.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.686" endtime="20190524 10:06:44.687"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.690" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.689" endtime="20190524 10:06:44.690"></status>
</kw>
<msg timestamp="20190524 10:06:44.690" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.687" endtime="20190524 10:06:44.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.691" endtime="20190524 10:06:44.691"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.693" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.693" endtime="20190524 10:06:44.693"></status>
</kw>
<msg timestamp="20190524 10:06:44.694" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.692" endtime="20190524 10:06:44.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.695" endtime="20190524 10:06:44.695"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.698" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.697" endtime="20190524 10:06:44.698"></status>
</kw>
<msg timestamp="20190524 10:06:44.698" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.696" endtime="20190524 10:06:44.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.699" endtime="20190524 10:06:44.699"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.701" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.700" endtime="20190524 10:06:44.701"></status>
</kw>
<msg timestamp="20190524 10:06:44.701" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.700" endtime="20190524 10:06:44.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.702" endtime="20190524 10:06:44.702"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.704" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.704" endtime="20190524 10:06:44.704"></status>
</kw>
<msg timestamp="20190524 10:06:44.704" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.703" endtime="20190524 10:06:44.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.705" endtime="20190524 10:06:44.706"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.707" endtime="20190524 10:06:44.708"></status>
</kw>
<msg timestamp="20190524 10:06:44.709" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.707" endtime="20190524 10:06:44.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.712" endtime="20190524 10:06:44.713"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.711" endtime="20190524 10:06:44.713"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.714" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.713" endtime="20190524 10:06:44.714"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.710" endtime="20190524 10:06:44.714"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.709" endtime="20190524 10:06:44.714"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.679" endtime="20190524 10:06:44.714"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2PortSecurityPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', r..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.715" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.715" endtime="20190524 10:06:44.715"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.717" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.717" endtime="20190524 10:06:44.717"></status>
</kw>
<msg timestamp="20190524 10:06:44.717" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.716" endtime="20190524 10:06:44.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.718" endtime="20190524 10:06:44.719"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.721" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.720" endtime="20190524 10:06:44.721"></status>
</kw>
<msg timestamp="20190524 10:06:44.721" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.719" endtime="20190524 10:06:44.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.722" endtime="20190524 10:06:44.722"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.725" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.724" endtime="20190524 10:06:44.725"></status>
</kw>
<msg timestamp="20190524 10:06:44.725" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.723" endtime="20190524 10:06:44.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.726" endtime="20190524 10:06:44.726"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.731" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.730" endtime="20190524 10:06:44.731"></status>
</kw>
<msg timestamp="20190524 10:06:44.731" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.727" endtime="20190524 10:06:44.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.732" endtime="20190524 10:06:44.733"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.735" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.735" endtime="20190524 10:06:44.735"></status>
</kw>
<msg timestamp="20190524 10:06:44.736" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.734" endtime="20190524 10:06:44.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.737" endtime="20190524 10:06:44.737"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.739" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.739" endtime="20190524 10:06:44.740"></status>
</kw>
<msg timestamp="20190524 10:06:44.740" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.738" endtime="20190524 10:06:44.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.740" endtime="20190524 10:06:44.741"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.743" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.743" endtime="20190524 10:06:44.744"></status>
</kw>
<msg timestamp="20190524 10:06:44.744" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.742" endtime="20190524 10:06:44.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.745" endtime="20190524 10:06:44.745"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.747" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.747" endtime="20190524 10:06:44.748"></status>
</kw>
<msg timestamp="20190524 10:06:44.748" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.746" endtime="20190524 10:06:44.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.749" endtime="20190524 10:06:44.749"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.751" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.751" endtime="20190524 10:06:44.752"></status>
</kw>
<msg timestamp="20190524 10:06:44.752" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.750" endtime="20190524 10:06:44.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.753" endtime="20190524 10:06:44.754"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.714" endtime="20190524 10:06:44.754"></status>
</kw>
<kw name="${if_policy} = X(infraRsL2PortAuthPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.756" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.755" endtime="20190524 10:06:44.756"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.759" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.758" endtime="20190524 10:06:44.759"></status>
</kw>
<msg timestamp="20190524 10:06:44.759" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.757" endtime="20190524 10:06:44.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.760" endtime="20190524 10:06:44.761"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.763" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.763" endtime="20190524 10:06:44.764"></status>
</kw>
<msg timestamp="20190524 10:06:44.764" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.762" endtime="20190524 10:06:44.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.764" endtime="20190524 10:06:44.765"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.767" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.766" endtime="20190524 10:06:44.767"></status>
</kw>
<msg timestamp="20190524 10:06:44.767" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.766" endtime="20190524 10:06:44.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.768" endtime="20190524 10:06:44.768"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.770" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.770" endtime="20190524 10:06:44.770"></status>
</kw>
<msg timestamp="20190524 10:06:44.771" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.769" endtime="20190524 10:06:44.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.771" endtime="20190524 10:06:44.772"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.775" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.774" endtime="20190524 10:06:44.775"></status>
</kw>
<msg timestamp="20190524 10:06:44.775" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.773" endtime="20190524 10:06:44.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.776" endtime="20190524 10:06:44.776"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.779" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.778" endtime="20190524 10:06:44.779"></status>
</kw>
<msg timestamp="20190524 10:06:44.779" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.777" endtime="20190524 10:06:44.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.780" endtime="20190524 10:06:44.780"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.783" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.782" endtime="20190524 10:06:44.783"></status>
</kw>
<msg timestamp="20190524 10:06:44.783" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.781" endtime="20190524 10:06:44.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.784" endtime="20190524 10:06:44.784"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.788" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.787" endtime="20190524 10:06:44.788"></status>
</kw>
<msg timestamp="20190524 10:06:44.788" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.786" endtime="20190524 10:06:44.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.789" endtime="20190524 10:06:44.790"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.792" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.792" endtime="20190524 10:06:44.792"></status>
</kw>
<msg timestamp="20190524 10:06:44.792" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.791" endtime="20190524 10:06:44.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.794" endtime="20190524 10:06:44.794"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.754" endtime="20190524 10:06:44.794"></status>
</kw>
<kw name="${if_policy} = X(infraRsLacpPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo',..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.796" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.795" endtime="20190524 10:06:44.796"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.799" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.798" endtime="20190524 10:06:44.799"></status>
</kw>
<msg timestamp="20190524 10:06:44.799" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.797" endtime="20190524 10:06:44.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.800" endtime="20190524 10:06:44.800"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.803" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.802" endtime="20190524 10:06:44.803"></status>
</kw>
<msg timestamp="20190524 10:06:44.803" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.801" endtime="20190524 10:06:44.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.804" endtime="20190524 10:06:44.805"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.807" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.806" endtime="20190524 10:06:44.807"></status>
</kw>
<msg timestamp="20190524 10:06:44.807" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.805" endtime="20190524 10:06:44.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.808" endtime="20190524 10:06:44.809"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.811" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.811" endtime="20190524 10:06:44.811"></status>
</kw>
<msg timestamp="20190524 10:06:44.812" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.810" endtime="20190524 10:06:44.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.813" endtime="20190524 10:06:44.813"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.816" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.815" endtime="20190524 10:06:44.816"></status>
</kw>
<msg timestamp="20190524 10:06:44.816" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.814" endtime="20190524 10:06:44.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.817" endtime="20190524 10:06:44.817"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.822" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.821" endtime="20190524 10:06:44.822"></status>
</kw>
<msg timestamp="20190524 10:06:44.822" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.818" endtime="20190524 10:06:44.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.823" endtime="20190524 10:06:44.823"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.826" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.825" endtime="20190524 10:06:44.826"></status>
</kw>
<msg timestamp="20190524 10:06:44.826" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.824" endtime="20190524 10:06:44.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.827" endtime="20190524 10:06:44.828"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.830" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.830" endtime="20190524 10:06:44.830"></status>
</kw>
<msg timestamp="20190524 10:06:44.831" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.829" endtime="20190524 10:06:44.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.832" endtime="20190524 10:06:44.832"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.834" endtime="20190524 10:06:44.835"></status>
</kw>
<msg timestamp="20190524 10:06:44.835" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.833" endtime="20190524 10:06:44.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.839" endtime="20190524 10:06:44.840"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.838" endtime="20190524 10:06:44.840"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.841" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.840" endtime="20190524 10:06:44.841"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.837" endtime="20190524 10:06:44.841"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.836" endtime="20190524 10:06:44.841"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.794" endtime="20190524 10:06:44.841"></status>
</kw>
<kw name="${if_policy} = X(infraRsFcIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo',..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.842" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.842" endtime="20190524 10:06:44.843"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.846" level="FAIL">Variable ${if_policy.infraRsLldpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.845" endtime="20190524 10:06:44.846"></status>
</kw>
<msg timestamp="20190524 10:06:44.846" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.844" endtime="20190524 10:06:44.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.847" endtime="20190524 10:06:44.848"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.850" level="FAIL">Variable ${if_policy.infraRsStpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.849" endtime="20190524 10:06:44.850"></status>
</kw>
<msg timestamp="20190524 10:06:44.850" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.848" endtime="20190524 10:06:44.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStpIfPol.attributes.tnStpIfPolName}"</arg>
<arg>""</arg>
<arg>STP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.851" endtime="20190524 10:06:44.852"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsL2IfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.855" level="FAIL">Variable ${if_policy.infraRsL2IfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.854" endtime="20190524 10:06:44.855"></status>
</kw>
<msg timestamp="20190524 10:06:44.855" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.853" endtime="20190524 10:06:44.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsL2IfPol.attributes.tnL2IfPolName}"</arg>
<arg>""</arg>
<arg>L2 Interface Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.856" endtime="20190524 10:06:44.857"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsCdpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.860" level="FAIL">Variable ${if_policy.infraRsCdpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.859" endtime="20190524 10:06:44.860"></status>
</kw>
<msg timestamp="20190524 10:06:44.860" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.857" endtime="20190524 10:06:44.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsCdpIfPol.attributes.tnCdpIfPolName}"</arg>
<arg>"cdp_enabled"</arg>
<arg>CDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.861" endtime="20190524 10:06:44.861"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsMcpIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.864" level="FAIL">Variable ${if_policy.infraRsMcpIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.863" endtime="20190524 10:06:44.864"></status>
</kw>
<msg timestamp="20190524 10:06:44.864" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.862" endtime="20190524 10:06:44.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsMcpIfPol.attributes.tnMcpIfPolName}"</arg>
<arg>""</arg>
<arg>MCP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.865" endtime="20190524 10:06:44.865"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsAttEntP.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.869" level="FAIL">Variable ${if_policy.infraRsAttEntP.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.869" endtime="20190524 10:06:44.869"></status>
</kw>
<msg timestamp="20190524 10:06:44.869" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.866" endtime="20190524 10:06:44.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsAttEntP.attributes.tDn}"</arg>
<arg>"uni/infra/attentp-baremetal"</arg>
<arg>AAEP not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.870" endtime="20190524 10:06:44.871"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsStormctrlIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.873" level="FAIL">Variable ${if_policy.infraRsStormctrlIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.872" endtime="20190524 10:06:44.873"></status>
</kw>
<msg timestamp="20190524 10:06:44.873" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.871" endtime="20190524 10:06:44.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsStormctrlIfPol.attributes.tnStormctrlIfPolName}"</arg>
<arg>""</arg>
<arg>Storm Control Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.874" endtime="20190524 10:06:44.875"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsHIfPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.877" level="FAIL">Variable ${if_policy.infraRsHIfPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.877" endtime="20190524 10:06:44.877"></status>
</kw>
<msg timestamp="20190524 10:06:44.878" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.876" endtime="20190524 10:06:44.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsHIfPol.attributes.tnFabricHIfPolName}"</arg>
<arg>"10gig_auto"</arg>
<arg>Link Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.878" endtime="20190524 10:06:44.879"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLacpPol.attributes.tDn}</arg>
</arguments>
<msg timestamp="20190524 10:06:44.882" level="FAIL">Variable ${if_policy.infraRsLacpPol.attributes.tDn} does not exist.</msg>
<status status="FAIL" starttime="20190524 10:06:44.881" endtime="20190524 10:06:44.882"></status>
</kw>
<msg timestamp="20190524 10:06:44.882" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.880" endtime="20190524 10:06:44.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLacpPol.attributes.tnLacpLagPolName}"</arg>
<arg>""</arg>
<arg>Port Channel Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.883" endtime="20190524 10:06:44.884"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.841" endtime="20190524 10:06:44.884"></status>
</kw>
<kw name="${if_policy} = X(infraRsLldpIfPol=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:44.765+00:00', monPolDn='uni/fabric/monfab-default', rType='mo..." type="foritem">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${policy_found}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.886" level="INFO">${policy_found} = False</msg>
<status status="PASS" starttime="20190524 10:06:44.885" endtime="20190524 10:06:44.886"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<assign>
<var>${policy_found}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${if_policy.infraRsLldpIfPol.attributes.tDn}</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.888" endtime="20190524 10:06:44.889"></status>
</kw>
<msg timestamp="20190524 10:06:44.889" level="INFO">${policy_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:44.887" endtime="20190524 10:06:44.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${policy_found} == True</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>continue for loop</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${if_policy.infraRsLldpIfPol.attributes.tnLldpIfPolName}"</arg>
<arg>""</arg>
<arg>LLDP Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.894" endtime="20190524 10:06:44.895"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.893" endtime="20190524 10:06:44.895"></status>
</kw>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20190524 10:06:44.897" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20190524 10:06:44.896" endtime="20190524 10:06:44.897"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.891" endtime="20190524 10:06:44.897"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.890" endtime="20190524 10:06:44.897"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.884" endtime="20190524 10:06:44.897"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:44.256" endtime="20190524 10:06:44.897"></status>
</kw>
<doc>Verifies that Leaf Interface Policy Group 'pc_Port' are configured with the expected parameters
- Interface Policy Group Name: pc_Port
- Policy Group Type: PC
- LLDP Policy:
- STP Policy:
- L2 Interface Policy:
- CDP Policy: cdp_enabled
- MCP Policy:
- AAEP: baremetal
- Storm Control Policy:
- Link Policy: 10gig_auto
- Port Channel Policy:</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy-group</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:44.173" endtime="20190524 10:06:44.897" critical="yes"></status>
</test>
<test id="s1-t71" name="Checking ACI Leaf Interface Policy Group for Faults - Policy Group Name Access_Port">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/funcprof/accportgrp-Access_Port/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:44.903" level="INFO">${uri} = /api/node/mo/uni/infra/funcprof/accportgrp-Access_Port/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:44.902" endtime="20190524 10:06:44.903"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:44.906" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:44.906" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/funcprof/accportgrp-Access_Port/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:44.928" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/funcprof/accportgrp-Access_Port/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:44.932" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c30c50&gt;</msg>
<status status="PASS" starttime="20190524 10:06:44.905" endtime="20190524 10:06:44.932"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.934" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:44.933" endtime="20190524 10:06:44.934"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.936" endtime="20190524 10:06:44.937"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:44.939" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:44.939" endtime="20190524 10:06:44.940"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:44.942" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:44.941" endtime="20190524 10:06:44.942"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:44.945" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:44.944" endtime="20190524 10:06:44.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.946" endtime="20190524 10:06:44.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.949" endtime="20190524 10:06:44.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.951" endtime="20190524 10:06:44.952"></status>
</kw>
<doc>Verifies ACI faults for Leaf Interface Policy Group 'Access_Port'
- Interface Policy Group Name: Access_Port
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy-group</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:44.899" endtime="20190524 10:06:44.953" critical="yes"></status>
</test>
<test id="s1-t72" name="Checking ACI Leaf Interface Policy Group for Faults - Policy Group Name vPC_Port">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/funcprof/accbundle-vPC_Port/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:44.957" level="INFO">${uri} = /api/node/mo/uni/infra/funcprof/accbundle-vPC_Port/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:44.957" endtime="20190524 10:06:44.957"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:44.959" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:44.959" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/funcprof/accbundle-vPC_Port/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:44.989" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/funcprof/accbundle-vPC_Port/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:44.992" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c2dda0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:44.959" endtime="20190524 10:06:44.992"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:44.995" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:44.994" endtime="20190524 10:06:44.995"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:44.997" endtime="20190524 10:06:44.998"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.000" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:44.999" endtime="20190524 10:06:45.000"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.003" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.002" endtime="20190524 10:06:45.003"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.005" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.005" endtime="20190524 10:06:45.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.007" endtime="20190524 10:06:45.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.009" endtime="20190524 10:06:45.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.011" endtime="20190524 10:06:45.011"></status>
</kw>
<doc>Verifies ACI faults for Leaf Interface Policy Group 'vPC_Port'
- Interface Policy Group Name: vPC_Port
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy-group</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:44.955" endtime="20190524 10:06:45.012" critical="yes"></status>
</test>
<test id="s1-t73" name="Checking ACI Spine Interface Policy Group for Faults - Policy Group Name spine_pol_grp">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>//api/node/mo/uni/infra/funcprof/spaccportgrp-spine_pol_grp/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.017" level="INFO">${uri} = //api/node/mo/uni/infra/funcprof/spaccportgrp-spine_pol_grp/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:45.017" endtime="20190524 10:06:45.017"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.019" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.019" level="INFO">Sending REST GET request to https://10.49.96.69:443//api/node/mo/uni/infra/funcprof/spaccportgrp-spine_pol_grp/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.039" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/funcprof/spaccportgrp-spine_pol_grp/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.043" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8cc7f98&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.019" endtime="20190524 10:06:45.043"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.045" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.045" endtime="20190524 10:06:45.045"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.047" endtime="20190524 10:06:45.047"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.050" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.049" endtime="20190524 10:06:45.050"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.051" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.051" endtime="20190524 10:06:45.051"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.053" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.053" endtime="20190524 10:06:45.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.055" endtime="20190524 10:06:45.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.056" endtime="20190524 10:06:45.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.058" endtime="20190524 10:06:45.059"></status>
</kw>
<doc>Verifies ACI faults for Spine Interface Policy Group 'spine_pol_grp'
- Interface Policy Group Name: spine_pol_grp
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy-group</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.014" endtime="20190524 10:06:45.059" critical="yes"></status>
</test>
<test id="s1-t74" name="Checking ACI Leaf Interface Policy Group for Faults - Policy Group Name pc_Port">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/funcprof/accbundle-pc_Port/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.064" level="INFO">${uri} = /api/node/mo/uni/infra/funcprof/accbundle-pc_Port/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:45.063" endtime="20190524 10:06:45.064"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.066" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.066" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/funcprof/accbundle-pc_Port/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.084" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/funcprof/accbundle-pc_Port/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.086" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8e33278&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.065" endtime="20190524 10:06:45.087"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.088" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.088" endtime="20190524 10:06:45.088"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.090" endtime="20190524 10:06:45.090"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.092" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.091" endtime="20190524 10:06:45.092"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.094" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.094" endtime="20190524 10:06:45.094"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.097" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.096" endtime="20190524 10:06:45.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.099" endtime="20190524 10:06:45.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.101" endtime="20190524 10:06:45.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Policy Group has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.103" endtime="20190524 10:06:45.103"></status>
</kw>
<doc>Verifies ACI faults for Leaf Interface Policy Group 'pc_Port'
- Interface Policy Group Name: pc_Port
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-policy-group</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.061" endtime="20190524 10:06:45.104" critical="yes"></status>
</test>
<test id="s1-t75" name="Verify ACI Leaf Interface Profile Configuration - Profile Leaf">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/accportprof-Leaf</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.107" level="INFO">${uri} = /api/node/mo/uni/infra/accportprof-Leaf</msg>
<status status="PASS" starttime="20190524 10:06:45.107" endtime="20190524 10:06:45.107"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.109" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.109" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/accportprof-Leaf.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.128" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraAccPortP":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/accportprof-Leaf","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:46.031+00:00","monPolDn":"uni/fabric/monfab-default","name":"Leaf","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.131" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c50710&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.108" endtime="20190524 10:06:45.131"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.133" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.132" endtime="20190524 10:06:45.133"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.134" endtime="20190524 10:06:45.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraAccPortP.attributes.name}</arg>
<arg>Leaf</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.137" endtime="20190524 10:06:45.138"></status>
</kw>
<doc>Verifies that Leaf Interface Profile 'Leaf' are configured with the expected parameters
- Profile Name: Leaf</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.105" endtime="20190524 10:06:45.138" critical="yes"></status>
</test>
<test id="s1-t76" name="Verify ACI Spine Interface Profile Configuration - Profile Spine">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spaccportprof-Spine</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.142" level="INFO">${uri} = /api/node/mo/uni/infra/spaccportprof-Spine</msg>
<status status="PASS" starttime="20190524 10:06:45.142" endtime="20190524 10:06:45.142"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.144" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.144" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spaccportprof-Spine.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.162" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraSpAccPortP":{"attributes":{"annotation":"","childAction":"","descr":"test","dn":"uni/infra/spaccportprof-Spine","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:46.257+00:00","monPolDn":"uni/fabric/monfab-default","name":"Spine","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.165" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c2dc18&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.144" endtime="20190524 10:06:45.165"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.167" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.166" endtime="20190524 10:06:45.167"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.168" endtime="20190524 10:06:45.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraSpAccPortP.attributes.name}</arg>
<arg>Spine</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.170" endtime="20190524 10:06:45.171"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].infraSpAccPortP.attributes.descr}"</arg>
<arg>"test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].infraSpAccPortP.attributes.descr}"</arg>
<arg>"test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.173" endtime="20190524 10:06:45.174"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.172" endtime="20190524 10:06:45.174"></status>
</kw>
<doc>Verifies that Spine Interface Profile 'Spine' are configured with the expected parameters
- Profile Name: Spine
- Description: test</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.140" endtime="20190524 10:06:45.174" critical="yes"></status>
</test>
<test id="s1-t77" name="Verify ACI Spine Interface Profile Configuration - Profile Spine2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spaccportprof-Spine2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.178" level="INFO">${uri} = /api/node/mo/uni/infra/spaccportprof-Spine2</msg>
<status status="PASS" starttime="20190524 10:06:45.178" endtime="20190524 10:06:45.178"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.180" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.181" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spaccportprof-Spine2.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.197" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraSpAccPortP":{"attributes":{"annotation":"","childAction":"","descr":"test","dn":"uni/infra/spaccportprof-Spine2","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:46.483+00:00","monPolDn":"uni/fabric/monfab-default","name":"Spine2","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.200" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c414a8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.180" endtime="20190524 10:06:45.200"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.201" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.201" endtime="20190524 10:06:45.202"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.203" endtime="20190524 10:06:45.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraSpAccPortP.attributes.name}</arg>
<arg>Spine2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.205" endtime="20190524 10:06:45.205"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].infraSpAccPortP.attributes.descr}"</arg>
<arg>"test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].infraSpAccPortP.attributes.descr}"</arg>
<arg>"test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.207" endtime="20190524 10:06:45.208"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.206" endtime="20190524 10:06:45.208"></status>
</kw>
<doc>Verifies that Spine Interface Profile 'Spine2' are configured with the expected parameters
- Profile Name: Spine2
- Description: test</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.176" endtime="20190524 10:06:45.209" critical="yes"></status>
</test>
<test id="s1-t78" name="Checking ACI Leaf Interface Profile for Faults - Profile Leaf">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/accportprof-Leaf/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.212" level="INFO">${uri} = /api/node/mo/uni/infra/accportprof-Leaf/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:45.212" endtime="20190524 10:06:45.212"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.214" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.214" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/accportprof-Leaf/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.231" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/accportprof-Leaf/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.234" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c18550&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.214" endtime="20190524 10:06:45.234"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.236" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.235" endtime="20190524 10:06:45.236"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.237" endtime="20190524 10:06:45.238"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.239" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.239" endtime="20190524 10:06:45.239"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.241" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.241" endtime="20190524 10:06:45.241"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.243" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.242" endtime="20190524 10:06:45.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.245" endtime="20190524 10:06:45.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.247" endtime="20190524 10:06:45.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${minor_count} minor faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.249" endtime="20190524 10:06:45.250"></status>
</kw>
<doc>Verifies ACI faults for Leaf Interface Profile 'Leaf'
- Profile Name: Leaf
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 1</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.210" endtime="20190524 10:06:45.250" critical="yes"></status>
</test>
<test id="s1-t79" name="Checking ACI Spine Interface Profile for Faults - Profile Spine">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spaccportprof-Spine/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.254" level="INFO">${uri} = /api/node/mo/uni/infra/spaccportprof-Spine/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:45.254" endtime="20190524 10:06:45.254"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.256" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.256" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spaccportprof-Spine/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.274" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/spaccportprof-Spine/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.279" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd26d8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.255" endtime="20190524 10:06:45.279"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.281" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.280" endtime="20190524 10:06:45.281"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.283" endtime="20190524 10:06:45.283"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.286" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.285" endtime="20190524 10:06:45.286"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.288" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.287" endtime="20190524 10:06:45.288"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.290" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.289" endtime="20190524 10:06:45.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.292" endtime="20190524 10:06:45.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.293" endtime="20190524 10:06:45.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${minor_count} minor faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.296" endtime="20190524 10:06:45.296"></status>
</kw>
<doc>Verifies ACI faults for Spine Interface Profile 'Spine'
- Profile Name: Spine
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 1</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.252" endtime="20190524 10:06:45.297" critical="yes"></status>
</test>
<test id="s1-t80" name="Checking ACI Spine Interface Profile for Faults - Profile Spine2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spaccportprof-Spine2/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.300" level="INFO">${uri} = /api/node/mo/uni/infra/spaccportprof-Spine2/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:45.300" endtime="20190524 10:06:45.300"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.303" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.303" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spaccportprof-Spine2/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.322" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/infra/spaccportprof-Spine2/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"1","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.325" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c30470&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.302" endtime="20190524 10:06:45.326"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.328" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.327" endtime="20190524 10:06:45.328"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.330" endtime="20190524 10:06:45.331"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.333" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.332" endtime="20190524 10:06:45.333"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.335" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:45.334" endtime="20190524 10:06:45.335"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:45.337" level="INFO">${minor_count} = 1</msg>
<status status="PASS" starttime="20190524 10:06:45.336" endtime="20190524 10:06:45.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.338" endtime="20190524 10:06:45.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.340" endtime="20190524 10:06:45.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Interface Profile has ${minor_count} minor faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.342" endtime="20190524 10:06:45.342"></status>
</kw>
<doc>Verifies ACI faults for Spine Interface Profile 'Spine2'
- Profile Name: Spine2
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 1</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
<tag>aci-faults</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.298" endtime="20190524 10:06:45.343" critical="yes"></status>
</test>
<test id="s1-t81" name="Verify ACI Leaf Interface Profile to Switch Profile Association Configuration - Switch Profile Leaf1_2, Interface Profile Leaf">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/nprof-Leaf1_2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.347" level="INFO">${uri} = /api/node/mo/uni/infra/nprof-Leaf1_2</msg>
<status status="PASS" starttime="20190524 10:06:45.347" endtime="20190524 10:06:45.347"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsAccPortP</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:45.350" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsAccPortP</msg>
<status status="PASS" starttime="20190524 10:06:45.349" endtime="20190524 10:06:45.350"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.352" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.352" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/nprof-Leaf1_2.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsAccPortP
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.372" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraNodeP":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/nprof-Leaf1_2","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:31.632+00:00","monPolDn":"uni/fabric/monfab-default","name":"Leaf1_2","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRsAccPortP":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:46.713+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsaccPortP-[uni/infra/accportprof-Leaf]","state":"formed","stateQual":"none","status":"","tCl":"infraAccPortP","tDn":"uni/infra/accportprof-Leaf","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:45.376" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c18080&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.352" endtime="20190524 10:06:45.376"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.379" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.378" endtime="20190524 10:06:45.379"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Switch Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.381" endtime="20190524 10:06:45.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraNodeP.attributes.name}</arg>
<arg>Leaf1_2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.384" endtime="20190524 10:06:45.385"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${node_block_found}</arg>
<arg>"Interface Profile not found"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.393" level="INFO">${node_block_found} = "Interface Profile not found"</msg>
<status status="PASS" starttime="20190524 10:06:45.387" endtime="20190524 10:06:45.393"></status>
</kw>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>@{return.payload[0].infraNodeP.children}</arg>
<arg>Interface Profile not associated with switch profile</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.395" endtime="20190524 10:06:45.396"></status>
</kw>
<kw name="${if_profile} IN [ @{return.payload[0].infraNodeP.children} ]" type="for">
<kw name="${if_profile} = X(infraRsAccPortP=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:46.713+00:00', monPolDn='uni/fabric/monfab-default', rType='mo'..." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${if_profile.infraRsAccPortP.attributes.tDn}" == "uni/infra/accportprof-Leaf"</arg>
<arg>run keywords</arg>
<arg>Set Test Variable</arg>
<arg>${node_block_found}</arg>
<arg>"Interface Profile found"</arg>
<arg>AND</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${node_block_found}</arg>
<arg>"Interface Profile found"</arg>
<arg>AND</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${node_block_found}</arg>
<arg>"Interface Profile found"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.403" level="INFO">${node_block_found} = "Interface Profile found"</msg>
<status status="PASS" starttime="20190524 10:06:45.403" endtime="20190524 10:06:45.403"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20190524 10:06:45.405" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20190524 10:06:45.404" endtime="20190524 10:06:45.405"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.402" endtime="20190524 10:06:45.405"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.399" endtime="20190524 10:06:45.405"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.397" endtime="20190524 10:06:45.405"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.397" endtime="20190524 10:06:45.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${node_block_found} == "Interface Profile found"</arg>
<arg>run keyword</arg>
<arg>Fail</arg>
<arg>Interface Profile not associated with switch profile</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.408" endtime="20190524 10:06:45.408"></status>
</kw>
<doc>Verifies that ACI Leaf Interface Profile 'Leaf' are associated with Switch Profile 'Leaf1_2'
- Switch Profile Name: Leaf1_2
- Interface Profile: Leaf</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-switch-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.344" endtime="20190524 10:06:45.409" critical="yes"></status>
</test>
<test id="s1-t82" name="Verify ACI Spine Interface Profile to Switch Profile Association Configuration - Switch Profile Spine, Interface Profile Spine2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spprof-Spine</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.416" level="INFO">${uri} = /api/node/mo/uni/infra/spprof-Spine</msg>
<status status="PASS" starttime="20190524 10:06:45.414" endtime="20190524 10:06:45.416"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraRsSpAccPortP</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:45.418" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraRsSpAccPortP</msg>
<status status="PASS" starttime="20190524 10:06:45.418" endtime="20190524 10:06:45.418"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.422" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.423" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spprof-Spine.json?rsp-subtree=full&amp;rsp-subtree-class=infraRsSpAccPortP
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.447" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraSpineP":{"attributes":{"annotation":"","childAction":"","descr":"Test","dn":"uni/infra/spprof-Spine","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:31.868+00:00","monPolDn":"uni/fabric/monfab-default","name":"Spine","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"},"children":[{"infraRsSpAccPortP":{"attributes":{"annotation":"","childAction":"","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:46.959+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","rn":"rsspAccPortP-[uni/infra/spaccportprof-Spine2]","state":"formed","stateQual":"none","status":"","tCl":"infraSpAccPortP","tDn":"uni/infra/spaccportprof-Spine2","tType":"mo","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:45.451" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bce470&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.421" endtime="20190524 10:06:45.451"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.453" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.452" endtime="20190524 10:06:45.453"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Switch Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.454" endtime="20190524 10:06:45.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraSpineP.attributes.name}</arg>
<arg>Spine</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.457" endtime="20190524 10:06:45.458"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${node_block_found}</arg>
<arg>"Interface Profile not found"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.465" level="INFO">${node_block_found} = "Interface Profile not found"</msg>
<status status="PASS" starttime="20190524 10:06:45.459" endtime="20190524 10:06:45.465"></status>
</kw>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>@{return.payload[0].infraSpineP.children}</arg>
<arg>Interface Profile not associated with switch profile</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.467" endtime="20190524 10:06:45.467"></status>
</kw>
<kw name="${if_profile} IN [ @{return.payload[0].infraSpineP.children} ]" type="for">
<kw name="${if_profile} = X(infraRsSpAccPortP=X(attributes=X(annotation='', childAction='', extMngdBy='', forceResolve='yes', lcOwn='local', modTs='2019-05-23T00:35:46.959+00:00', monPolDn='uni/fabric/monfab-default', rType='m..." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${if_profile.infraRsSpAccPortP.attributes.tDn}" == "uni/infra/spaccportprof-Spine2"</arg>
<arg>run keywords</arg>
<arg>Set Test Variable</arg>
<arg>${node_block_found}</arg>
<arg>"Interface Profile found"</arg>
<arg>AND</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${node_block_found}</arg>
<arg>"Interface Profile found"</arg>
<arg>AND</arg>
<arg>Exit For Loop</arg>
</arguments>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${node_block_found}</arg>
<arg>"Interface Profile found"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.472" level="INFO">${node_block_found} = "Interface Profile found"</msg>
<status status="PASS" starttime="20190524 10:06:45.472" endtime="20190524 10:06:45.472"></status>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20190524 10:06:45.473" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20190524 10:06:45.473" endtime="20190524 10:06:45.473"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.470" endtime="20190524 10:06:45.473"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.469" endtime="20190524 10:06:45.473"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.468" endtime="20190524 10:06:45.473"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.467" endtime="20190524 10:06:45.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${node_block_found} == "Interface Profile found"</arg>
<arg>run keyword</arg>
<arg>Fail</arg>
<arg>Interface Profile not associated with switch profile</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.475" endtime="20190524 10:06:45.475"></status>
</kw>
<doc>Verifies that Spine Interface Profile 'Spine2' are associated with Switch Profile 'Spine'
- Switch Profile Name: Spine
- Interface Profile: Spine2</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-switch-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.411" endtime="20190524 10:06:45.476" critical="yes"></status>
</test>
<test id="s1-t83" name="Verify ACI Leaf Interface Selector Configuration - Interface Profile Leaf, Interface Selector e1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/accportprof-Leaf/hports-e1-typ-range</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.480" level="INFO">${uri} = /api/node/mo/uni/infra/accportprof-Leaf/hports-e1-typ-range</msg>
<status status="PASS" starttime="20190524 10:06:45.479" endtime="20190524 10:06:45.480"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:45.482" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</msg>
<status status="PASS" starttime="20190524 10:06:45.482" endtime="20190524 10:06:45.482"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.484" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.484" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/accportprof-Leaf/hports-e1-typ-range.json?rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.504" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraHPortS":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/accportprof-Leaf/hports-e1-typ-range","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:47.206+00:00","monPolDn":"uni/fabric/monfab-default","name":"e1","nameAlias":"","ownerKey":"","ownerTag":"","status":"","type":"range","uid":"15374"},"children":[{"infraPortBlk":{"attributes":{"annotation":"","childAction":"","descr":"","extMngdBy":"","fromCard":"1","fromPort":"1","lcOwn":"local","modTs":"2019-05-23T00:35:47.206+00:00","monPolDn":"uni/fabric/monfab-default","name":"Block1111","nameAlias":"","rn":"portblk-Block1111","status":"","toCard":"1","toPort":"1","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:45.511" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd79b0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.484" endtime="20190524 10:06:45.511"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.519" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.517" endtime="20190524 10:06:45.519"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.521" endtime="20190524 10:06:45.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraHPortS.attributes.name}</arg>
<arg>e1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.524" endtime="20190524 10:06:45.524"></status>
</kw>
<kw name="${block} IN [ @{return.payload[0].infraHPortS.children} ]" type="for">
<kw name="${block} = X(infraPortBlk=X(attributes=X(annotation='', childAction='', descr='', extMngdBy='', fromCard='1', fromPort='1', lcOwn='local', modTs='2019-05-23T00:35:47.206+00:00', monPolDn='uni/fabric/monfab-defau..." type="foritem">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"False"</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.526" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.526" endtime="20190524 10:06:45.526"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${port_block_found}</arg>
<arg>"False"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.528" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.527" endtime="20190524 10:06:45.528"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toPort}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.530" level="INFO">${toPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.529" endtime="20190524 10:06:45.530"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toCard_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.531" level="INFO">${toCard_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.531" endtime="20190524 10:06:45.531"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.fromPort}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.533" level="INFO">${fromPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.532" endtime="20190524 10:06:45.533"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromSlotfound}</var>
</assign>
<msg timestamp="20190524 10:06:45.534" level="INFO">${fromSlotfound} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.534" endtime="20190524 10:06:45.534"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${toPort_found} == True and ${toCard_found} == True and ${fromPort_found} == True</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.535" level="INFO">${port_block_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.535" endtime="20190524 10:06:45.535"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.525" endtime="20190524 10:06:45.536"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.524" endtime="20190524 10:06:45.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${port_block_found} == True</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Port block (to/from card and port) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.537" endtime="20190524 10:06:45.537"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/accportprof-Leaf/hports-e1-typ-range/rsaccBaseGrp</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.539" level="INFO">${uri} = /api/node/mo/uni/infra/accportprof-Leaf/hports-e1-typ-range/rsaccBaseGrp</msg>
<status status="PASS" starttime="20190524 10:06:45.539" endtime="20190524 10:06:45.540"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${if_polgrp}</var>
</assign>
<msg timestamp="20190524 10:06:45.542" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.542" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/accportprof-Leaf/hports-e1-typ-range/rsaccBaseGrp.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.561" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsAccBaseGrp":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/accportprof-Leaf/hports-e1-typ-range/rsaccBaseGrp","extMngdBy":"","fexId":"101","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:47.206+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"infraAccPortGrp","tDn":"uni/infra/funcprof/accportgrp-Access_Port","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.564" level="INFO">${if_polgrp} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bcc1d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.541" endtime="20190524 10:06:45.564"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.568" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.567" endtime="20190524 10:06:45.569"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.575" endtime="20190524 10:06:45.575"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.572" endtime="20190524 10:06:45.575"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${if_polgrp.payload[0].infraRsAccBaseGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/accportgrp-Access_Port</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${if_polgrp.payload[0].infraRsAccBaseGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/accportgrp-Access_Port</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.578" endtime="20190524 10:06:45.579"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.577" endtime="20190524 10:06:45.579"></status>
</kw>
<doc>Verifies that ACI Leaf Interface Selector 'e1' under 'Leaf' are configured with the expected parameters
- Interface Profile Name: Leaf
- Interface Selector Name: e1
- From Slot: 1
- From Port: 1
- To Slot: 1
- To Port: 1
- Associated Interface Policy Group: Access_Port
- Associated Interface Policy Group Type: Access</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.477" endtime="20190524 10:06:45.580" critical="yes"></status>
</test>
<test id="s1-t84" name="Verify ACI Leaf Interface Selector Configuration - Interface Profile Leaf, Interface Selector e2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/accportprof-Leaf/hports-e2-typ-range</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.584" level="INFO">${uri} = /api/node/mo/uni/infra/accportprof-Leaf/hports-e2-typ-range</msg>
<status status="PASS" starttime="20190524 10:06:45.584" endtime="20190524 10:06:45.584"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:45.586" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</msg>
<status status="PASS" starttime="20190524 10:06:45.586" endtime="20190524 10:06:45.586"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.588" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.588" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/accportprof-Leaf/hports-e2-typ-range.json?rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.607" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraHPortS":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/accportprof-Leaf/hports-e2-typ-range","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:47.439+00:00","monPolDn":"uni/fabric/monfab-default","name":"e2","nameAlias":"","ownerKey":"","ownerTag":"","status":"","type":"range","uid":"15374"},"children":[{"infraPortBlk":{"attributes":{"annotation":"","childAction":"","descr":"","extMngdBy":"","fromCard":"1","fromPort":"2","lcOwn":"local","modTs":"2019-05-23T00:35:47.439+00:00","monPolDn":"uni/fabric/monfab-default","name":"Block1122","nameAlias":"","rn":"portblk-Block1122","status":"","toCard":"1","toPort":"2","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:45.612" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be7710&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.588" endtime="20190524 10:06:45.612"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.614" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.613" endtime="20190524 10:06:45.614"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.615" endtime="20190524 10:06:45.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraHPortS.attributes.name}</arg>
<arg>e2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.619" endtime="20190524 10:06:45.620"></status>
</kw>
<kw name="${block} IN [ @{return.payload[0].infraHPortS.children} ]" type="for">
<kw name="${block} = X(infraPortBlk=X(attributes=X(annotation='', childAction='', descr='', extMngdBy='', fromCard='1', fromPort='2', lcOwn='local', modTs='2019-05-23T00:35:47.439+00:00', monPolDn='uni/fabric/monfab-defau..." type="foritem">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"False"</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.622" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.621" endtime="20190524 10:06:45.622"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${port_block_found}</arg>
<arg>"False"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.623" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.622" endtime="20190524 10:06:45.623"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toPort}" == "2"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.624" level="INFO">${toPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.624" endtime="20190524 10:06:45.624"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toCard_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.626" level="INFO">${toCard_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.625" endtime="20190524 10:06:45.626"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.fromPort}" == "2"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.628" level="INFO">${fromPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.627" endtime="20190524 10:06:45.628"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromSlotfound}</var>
</assign>
<msg timestamp="20190524 10:06:45.629" level="INFO">${fromSlotfound} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.629" endtime="20190524 10:06:45.630"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${toPort_found} == True and ${toCard_found} == True and ${fromPort_found} == True</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.631" level="INFO">${port_block_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.630" endtime="20190524 10:06:45.631"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.620" endtime="20190524 10:06:45.631"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.620" endtime="20190524 10:06:45.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${port_block_found} == True</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Port block (to/from card and port) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.633" endtime="20190524 10:06:45.633"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/accportprof-Leaf/hports-e2-typ-range/rsaccBaseGrp</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.635" level="INFO">${uri} = /api/node/mo/uni/infra/accportprof-Leaf/hports-e2-typ-range/rsaccBaseGrp</msg>
<status status="PASS" starttime="20190524 10:06:45.635" endtime="20190524 10:06:45.635"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${if_polgrp}</var>
</assign>
<msg timestamp="20190524 10:06:45.637" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.637" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/accportprof-Leaf/hports-e2-typ-range/rsaccBaseGrp.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.655" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsAccBaseGrp":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/accportprof-Leaf/hports-e2-typ-range/rsaccBaseGrp","extMngdBy":"","fexId":"101","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:47.439+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"infraAccBndlGrp","tDn":"uni/infra/funcprof/accbundle-vPC_Port","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.657" level="INFO">${if_polgrp} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be95c0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.637" endtime="20190524 10:06:45.657"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.659" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.659" endtime="20190524 10:06:45.659"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.663" endtime="20190524 10:06:45.664"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.661" endtime="20190524 10:06:45.664"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${if_polgrp.payload[0].infraRsAccBaseGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/accbundle-vPC_Port</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${if_polgrp.payload[0].infraRsAccBaseGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/accbundle-vPC_Port</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.668" endtime="20190524 10:06:45.668"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.666" endtime="20190524 10:06:45.668"></status>
</kw>
<doc>Verifies that ACI Leaf Interface Selector 'e2' under 'Leaf' are configured with the expected parameters
- Interface Profile Name: Leaf
- Interface Selector Name: e2
- From Slot: 1
- From Port: 2
- To Slot: 1
- To Port: 2
- Associated Interface Policy Group: vPC_Port
- Associated Interface Policy Group Type: vPC</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.581" endtime="20190524 10:06:45.669" critical="yes"></status>
</test>
<test id="s1-t85" name="Verify ACI Leaf Interface Selector Configuration - Interface Profile Leaf, Interface Selector e3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/accportprof-Leaf/hports-e3-typ-range</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.672" level="INFO">${uri} = /api/node/mo/uni/infra/accportprof-Leaf/hports-e3-typ-range</msg>
<status status="PASS" starttime="20190524 10:06:45.671" endtime="20190524 10:06:45.672"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:45.673" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</msg>
<status status="PASS" starttime="20190524 10:06:45.673" endtime="20190524 10:06:45.673"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.675" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.675" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/accportprof-Leaf/hports-e3-typ-range.json?rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.693" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraHPortS":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/infra/accportprof-Leaf/hports-e3-typ-range","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:47.673+00:00","monPolDn":"uni/fabric/monfab-default","name":"e3","nameAlias":"","ownerKey":"","ownerTag":"","status":"","type":"range","uid":"15374"},"children":[{"infraPortBlk":{"attributes":{"annotation":"","childAction":"","descr":"","extMngdBy":"","fromCard":"1","fromPort":"3","lcOwn":"local","modTs":"2019-05-23T00:35:47.673+00:00","monPolDn":"uni/fabric/monfab-default","name":"Block1133","nameAlias":"","rn":"portblk-Block1133","status":"","toCard":"1","toPort":"3","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:45.698" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bffe80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.675" endtime="20190524 10:06:45.698"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.700" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.699" endtime="20190524 10:06:45.700"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.701" endtime="20190524 10:06:45.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraHPortS.attributes.name}</arg>
<arg>e3</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.703" endtime="20190524 10:06:45.705"></status>
</kw>
<kw name="${block} IN [ @{return.payload[0].infraHPortS.children} ]" type="for">
<kw name="${block} = X(infraPortBlk=X(attributes=X(annotation='', childAction='', descr='', extMngdBy='', fromCard='1', fromPort='3', lcOwn='local', modTs='2019-05-23T00:35:47.673+00:00', monPolDn='uni/fabric/monfab-defau..." type="foritem">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"False"</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.707" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.707" endtime="20190524 10:06:45.707"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${port_block_found}</arg>
<arg>"False"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.709" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.708" endtime="20190524 10:06:45.709"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toPort}" == "3"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.710" level="INFO">${toPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.710" endtime="20190524 10:06:45.710"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toCard_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.712" level="INFO">${toCard_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.712" endtime="20190524 10:06:45.712"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.fromPort}" == "3"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.714" level="INFO">${fromPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.713" endtime="20190524 10:06:45.714"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromSlotfound}</var>
</assign>
<msg timestamp="20190524 10:06:45.718" level="INFO">${fromSlotfound} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.717" endtime="20190524 10:06:45.718"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${toPort_found} == True and ${toCard_found} == True and ${fromPort_found} == True</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.719" level="INFO">${port_block_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.719" endtime="20190524 10:06:45.720"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.705" endtime="20190524 10:06:45.720"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.705" endtime="20190524 10:06:45.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${port_block_found} == True</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Port block (to/from card and port) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.721" endtime="20190524 10:06:45.721"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/accportprof-Leaf/hports-e3-typ-range/rsaccBaseGrp</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.723" level="INFO">${uri} = /api/node/mo/uni/infra/accportprof-Leaf/hports-e3-typ-range/rsaccBaseGrp</msg>
<status status="PASS" starttime="20190524 10:06:45.722" endtime="20190524 10:06:45.723"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${if_polgrp}</var>
</assign>
<msg timestamp="20190524 10:06:45.725" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.725" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/accportprof-Leaf/hports-e3-typ-range/rsaccBaseGrp.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.743" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsAccBaseGrp":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/accportprof-Leaf/hports-e3-typ-range/rsaccBaseGrp","extMngdBy":"","fexId":"101","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:47.673+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"infraAccPortGrp","tDn":"uni/infra/funcprof/accportgrp-Access_Port","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.746" level="INFO">${if_polgrp} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bffcf8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.724" endtime="20190524 10:06:45.746"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.748" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.748" endtime="20190524 10:06:45.749"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.751" endtime="20190524 10:06:45.752"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.750" endtime="20190524 10:06:45.752"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${if_polgrp.payload[0].infraRsAccBaseGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/accportgrp-Access_Port</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${if_polgrp.payload[0].infraRsAccBaseGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/accportgrp-Access_Port</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.755" endtime="20190524 10:06:45.756"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.754" endtime="20190524 10:06:45.756"></status>
</kw>
<doc>Verifies that ACI Leaf Interface Selector 'e3' under 'Leaf' are configured with the expected parameters
- Interface Profile Name: Leaf
- Interface Selector Name: e3
- From Slot: 1
- From Port: 3
- To Slot: 1
- To Port: 3
- Associated Interface Policy Group: Access_Port
- Associated Interface Policy Group Type: Access</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.670" endtime="20190524 10:06:45.756" critical="yes"></status>
</test>
<test id="s1-t86" name="Verify ACI Spine Interface Selector Configuration - Interface Profile Spine, Interface Selector e1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spaccportprof-Spine/shports-e1-typ-range</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.760" level="INFO">${uri} = /api/node/mo/uni/infra/spaccportprof-Spine/shports-e1-typ-range</msg>
<status status="PASS" starttime="20190524 10:06:45.760" endtime="20190524 10:06:45.760"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:45.763" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</msg>
<status status="PASS" starttime="20190524 10:06:45.762" endtime="20190524 10:06:45.763"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.764" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.765" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spaccportprof-Spine/shports-e1-typ-range.json?rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.784" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraSHPortS":{"attributes":{"annotation":"","childAction":"","descr":"test","dn":"uni/infra/spaccportprof-Spine/shports-e1-typ-range","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:47.903+00:00","monPolDn":"uni/fabric/monfab-default","name":"e1","nameAlias":"","ownerKey":"","ownerTag":"","status":"","type":"range","uid":"15374"},"children":[{"infraPortBlk":{"attributes":{"annotation":"","childAction":"","descr":"test2","extMngdBy":"","fromCard":"1","fromPort":"1","lcOwn":"local","modTs":"2019-05-23T00:35:47.903+00:00","monPolDn":"uni/fabric/monfab-default","name":"Block1111","nameAlias":"","rn":"portblk-Block1111","status":"","toCard":"1","toPort":"1","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:45.789" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bbaef0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.764" endtime="20190524 10:06:45.789"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.791" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.791" endtime="20190524 10:06:45.791"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.793" endtime="20190524 10:06:45.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraSHPortS.attributes.name}</arg>
<arg>e1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.795" endtime="20190524 10:06:45.796"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].infraSHPortS.attributes.descr}"</arg>
<arg>"test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].infraSHPortS.attributes.descr}"</arg>
<arg>"test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.798" endtime="20190524 10:06:45.799"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.797" endtime="20190524 10:06:45.799"></status>
</kw>
<kw name="${block} IN [ @{return.payload[0].infraSHPortS.children} ]" type="for">
<kw name="${block} = X(infraPortBlk=X(attributes=X(annotation='', childAction='', descr='test2', extMngdBy='', fromCard='1', fromPort='1', lcOwn='local', modTs='2019-05-23T00:35:47.903+00:00', monPolDn='uni/fabric/monfab-..." type="foritem">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"False"</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.801" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.801" endtime="20190524 10:06:45.801"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${port_block_found}</arg>
<arg>"False"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.803" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.802" endtime="20190524 10:06:45.803"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toPort}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.804" level="INFO">${toPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.804" endtime="20190524 10:06:45.804"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toCard_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.806" level="INFO">${toCard_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.805" endtime="20190524 10:06:45.806"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.fromPort}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.807" level="INFO">${fromPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.807" endtime="20190524 10:06:45.807"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromSlotfound}</var>
</assign>
<msg timestamp="20190524 10:06:45.808" level="INFO">${fromSlotfound} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.808" endtime="20190524 10:06:45.808"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${toPort_found} == True and ${toCard_found} == True and ${fromPort_found} == True</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.810" level="INFO">${port_block_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.809" endtime="20190524 10:06:45.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${port_block_found} == True</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${block.infraPortBlk.attributes.descr}"</arg>
<arg>"test2"</arg>
<arg>Port Block Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${block.infraPortBlk.attributes.descr}"</arg>
<arg>"test2"</arg>
<arg>Port Block Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.descr}"</arg>
<arg>"test2"</arg>
<arg>Port Block Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.813" endtime="20190524 10:06:45.814"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.812" endtime="20190524 10:06:45.814"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.810" endtime="20190524 10:06:45.814"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.800" endtime="20190524 10:06:45.814"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.799" endtime="20190524 10:06:45.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${port_block_found} == True</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Port block (to/from card and port) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.816" endtime="20190524 10:06:45.816"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spaccportprof-Spine/shports-e1-typ-range/rsspAccGrp</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.818" level="INFO">${uri} = /api/node/mo/uni/infra/spaccportprof-Spine/shports-e1-typ-range/rsspAccGrp</msg>
<status status="PASS" starttime="20190524 10:06:45.818" endtime="20190524 10:06:45.818"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${if_polgrp}</var>
</assign>
<msg timestamp="20190524 10:06:45.820" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.820" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spaccportprof-Spine/shports-e1-typ-range/rsspAccGrp.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.839" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsSpAccGrp":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/spaccportprof-Spine/shports-e1-typ-range/rsspAccGrp","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:47.903+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"infraSpAccPortGrp","tDn":"uni/infra/funcprof/spaccportgrp-spine_pol_grp","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.841" level="INFO">${if_polgrp} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb5668&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.819" endtime="20190524 10:06:45.841"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.843" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.842" endtime="20190524 10:06:45.843"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.846" endtime="20190524 10:06:45.847"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.845" endtime="20190524 10:06:45.847"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${if_polgrp.payload[0].infraRsSpAccGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/spaccportgrp-spine_pol_grp</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${if_polgrp.payload[0].infraRsSpAccGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/spaccportgrp-spine_pol_grp</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.850" endtime="20190524 10:06:45.850"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.849" endtime="20190524 10:06:45.851"></status>
</kw>
<doc>Verifies that ACI Spine Interface Selector 'e1' under 'Spine' are configured with the expected parameters
- Interface Profile Name: Spine
- Interface Selector Name: e1
- Interface Selector Description: test
- From Slot: 1
- From Port: 1
- To Slot: 1
- To Port: 1
- Port Block Description: test2
- Associated Interface Policy Group: spine_pol_grp
- Associated Interface Policy Group Type: Access</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.758" endtime="20190524 10:06:45.851" critical="yes"></status>
</test>
<test id="s1-t87" name="Verify ACI Spine Interface Selector Configuration - Interface Profile Spine2, Interface Selector e1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spaccportprof-Spine2/shports-e1-typ-range</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.855" level="INFO">${uri} = /api/node/mo/uni/infra/spaccportprof-Spine2/shports-e1-typ-range</msg>
<status status="PASS" starttime="20190524 10:06:45.854" endtime="20190524 10:06:45.855"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:45.856" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk</msg>
<status status="PASS" starttime="20190524 10:06:45.856" endtime="20190524 10:06:45.856"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.858" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.858" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spaccportprof-Spine2/shports-e1-typ-range.json?rsp-subtree=full&amp;rsp-subtree-class=infraPortBlk
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.877" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraSHPortS":{"attributes":{"annotation":"","childAction":"","descr":"test","dn":"uni/infra/spaccportprof-Spine2/shports-e1-typ-range","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:48.146+00:00","monPolDn":"uni/fabric/monfab-default","name":"e1","nameAlias":"","ownerKey":"","ownerTag":"","status":"","type":"range","uid":"15374"},"children":[{"infraPortBlk":{"attributes":{"annotation":"","childAction":"","descr":"test2","extMngdBy":"","fromCard":"1","fromPort":"1","lcOwn":"local","modTs":"2019-05-23T00:35:48.146+00:00","monPolDn":"uni/fabric/monfab-default","name":"Block1111","nameAlias":"","rn":"portblk-Block1111","status":"","toCard":"1","toPort":"1","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:45.883" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb11d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.858" endtime="20190524 10:06:45.883"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.885" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.884" endtime="20190524 10:06:45.885"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface Selector does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.887" endtime="20190524 10:06:45.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].infraSHPortS.attributes.name}</arg>
<arg>e1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.890" endtime="20190524 10:06:45.891"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].infraSHPortS.attributes.descr}"</arg>
<arg>"test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].infraSHPortS.attributes.descr}"</arg>
<arg>"test"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.894" endtime="20190524 10:06:45.895"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.892" endtime="20190524 10:06:45.895"></status>
</kw>
<kw name="${block} IN [ @{return.payload[0].infraSHPortS.children} ]" type="for">
<kw name="${block} = X(infraPortBlk=X(attributes=X(annotation='', childAction='', descr='test2', extMngdBy='', fromCard='1', fromPort='1', lcOwn='local', modTs='2019-05-23T00:35:48.146+00:00', monPolDn='uni/fabric/monfab-..." type="foritem">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>"False"</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.897" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.897" endtime="20190524 10:06:45.897"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${port_block_found}</arg>
<arg>"False"</arg>
</arguments>
<msg timestamp="20190524 10:06:45.898" level="INFO">${port_block_found} = "False"</msg>
<status status="PASS" starttime="20190524 10:06:45.898" endtime="20190524 10:06:45.898"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toPort}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.901" level="INFO">${toPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.900" endtime="20190524 10:06:45.901"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${toCard_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.902" level="INFO">${toCard_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.901" endtime="20190524 10:06:45.902"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.fromPort}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromPort_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.903" level="INFO">${fromPort_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.903" endtime="20190524 10:06:45.904"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.toCard}" == "1"</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${fromSlotfound}</var>
</assign>
<msg timestamp="20190524 10:06:45.905" level="INFO">${fromSlotfound} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.904" endtime="20190524 10:06:45.905"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${toPort_found} == True and ${toCard_found} == True and ${fromPort_found} == True</arg>
<arg>True</arg>
</arguments>
<assign>
<var>${port_block_found}</var>
</assign>
<msg timestamp="20190524 10:06:45.906" level="INFO">${port_block_found} = True</msg>
<status status="PASS" starttime="20190524 10:06:45.906" endtime="20190524 10:06:45.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${port_block_found} == True</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${block.infraPortBlk.attributes.descr}"</arg>
<arg>"test2"</arg>
<arg>Port Block Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${block.infraPortBlk.attributes.descr}"</arg>
<arg>"test2"</arg>
<arg>Port Block Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${block.infraPortBlk.attributes.descr}"</arg>
<arg>"test2"</arg>
<arg>Port Block Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.909" endtime="20190524 10:06:45.910"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.908" endtime="20190524 10:06:45.910"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.907" endtime="20190524 10:06:45.910"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.896" endtime="20190524 10:06:45.910"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.895" endtime="20190524 10:06:45.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${port_block_found} == True</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>Port block (to/from card and port) not matching expected configuration</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.912" endtime="20190524 10:06:45.913"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/infra/spaccportprof-Spine2/shports-e1-typ-range/rsspAccGrp</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.915" level="INFO">${uri} = /api/node/mo/uni/infra/spaccportprof-Spine2/shports-e1-typ-range/rsspAccGrp</msg>
<status status="PASS" starttime="20190524 10:06:45.914" endtime="20190524 10:06:45.916"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${if_polgrp}</var>
</assign>
<msg timestamp="20190524 10:06:45.917" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.918" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/infra/spaccportprof-Spine2/shports-e1-typ-range/rsspAccGrp.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.938" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"infraRsSpAccGrp":{"attributes":{"annotation":"","childAction":"","dn":"uni/infra/spaccportprof-Spine2/shports-e1-typ-range/rsspAccGrp","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:48.146+00:00","monPolDn":"uni/fabric/monfab-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"infraSpAccPortGrp","tDn":"uni/infra/funcprof/spaccportgrp-spine_pol_grp","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.940" level="INFO">${if_polgrp} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb4b38&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.917" endtime="20190524 10:06:45.941"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.942" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.942" endtime="20190524 10:06:45.943"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${if_polgrp.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving interface policy group association</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.946" endtime="20190524 10:06:45.947"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.944" endtime="20190524 10:06:45.947"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${if_polgrp.payload[0].infraRsSpAccGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/spaccportgrp-spine_pol_grp</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${if_polgrp.payload[0].infraRsSpAccGrp.attributes.tDn}</arg>
<arg>uni/infra/funcprof/spaccportgrp-spine_pol_grp</arg>
<arg>Interface Policy Group Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.950" endtime="20190524 10:06:45.951"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:45.948" endtime="20190524 10:06:45.951"></status>
</kw>
<doc>Verifies that ACI Spine Interface Selector 'e1' under 'Spine2' are configured with the expected parameters
- Interface Profile Name: Spine2
- Interface Selector Name: e1
- Interface Selector Description: test
- From Slot: 1
- From Port: 1
- To Slot: 1
- To Port: 1
- Port Block Description: test2
- Associated Interface Policy Group: spine_pol_grp
- Associated Interface Policy Group Type: Access</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-interface-profile</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.852" endtime="20190524 10:06:45.951" critical="yes"></status>
</test>
<test id="s1-t88" name="Verify ACI Tenant Configuration - Tenant tenant1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.955" level="INFO">${uri} = /api/mo/uni/tn-tenant1</msg>
<status status="PASS" starttime="20190524 10:06:45.954" endtime="20190524 10:06:45.955"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.956" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.956" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:45.974" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvTenant":{"attributes":{"annotation":"","childAction":"","descr":"TEST","dn":"uni/tn-tenant1","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:48.391+00:00","monPolDn":"uni/tn-common/monepg-default","name":"tenant1","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:45.977" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb1390&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.956" endtime="20190524 10:06:45.977"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:45.980" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.979" endtime="20190524 10:06:45.980"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.982" endtime="20190524 10:06:45.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvTenant.attributes.dn}</arg>
<arg>uni/tn-tenant1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.984" endtime="20190524 10:06:45.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvTenant.attributes.name}</arg>
<arg>tenant1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:45.986" endtime="20190524 10:06:45.987"></status>
</kw>
<doc>Verifies that ACI tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.952" endtime="20190524 10:06:45.988" critical="yes"></status>
</test>
<test id="s1-t89" name="Verify ACI Tenant Configuration - Tenant tenant2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:45.992" level="INFO">${uri} = /api/mo/uni/tn-tenant2</msg>
<status status="PASS" starttime="20190524 10:06:45.992" endtime="20190524 10:06:45.992"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:45.994" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:45.994" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant2.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.012" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvTenant":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant2","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:48.610+00:00","monPolDn":"uni/tn-common/monepg-default","name":"tenant2","nameAlias":"","ownerKey":"","ownerTag":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.015" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b91748&gt;</msg>
<status status="PASS" starttime="20190524 10:06:45.993" endtime="20190524 10:06:46.015"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.017" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.016" endtime="20190524 10:06:46.017"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.018" endtime="20190524 10:06:46.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvTenant.attributes.dn}</arg>
<arg>uni/tn-tenant2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.020" endtime="20190524 10:06:46.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvTenant.attributes.name}</arg>
<arg>tenant2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.023" endtime="20190524 10:06:46.024"></status>
</kw>
<doc>Verifies that ACI tenant 'tenant2' are configured with the expected parameters:
- Tenant Name: tenant2</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:45.990" endtime="20190524 10:06:46.024" critical="yes"></status>
</test>
<test id="s1-t90" name="Verify ACI VRF Configuration - Tenant tenant1, VRF main">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-main</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.028" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-main</msg>
<status status="PASS" starttime="20190524 10:06:46.028" endtime="20190524 10:06:46.028"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.030" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.030" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-main.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.048" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvCtx":{"attributes":{"annotation":"","bdEnforcedEnable":"no","childAction":"","descr":"","dn":"uni/tn-tenant1/ctx-main","extMngdBy":"","knwMcastAct":"permit","lcOwn":"local","modTs":"2019-05-23T00:35:48.901+00:00","monPolDn":"uni/tn-common/monepg-default","name":"main","nameAlias":"","ownerKey":"","ownerTag":"","pcEnfDir":"egress","pcEnfDirUpdated":"yes","pcEnfPref":"enforced","pcTag":"49153","scope":"2686976","seg":"2686976","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.051" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b91d68&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.030" endtime="20190524 10:06:46.051"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.053" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.052" endtime="20190524 10:06:46.053"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>VRF not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.054" endtime="20190524 10:06:46.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvCtx.attributes.name}</arg>
<arg>main</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.056" endtime="20190524 10:06:46.057"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvCtx.attributes.pcEnfPref}"</arg>
<arg>"enforced"</arg>
<arg>Policy Control Enforcement Preference not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvCtx.attributes.pcEnfPref}"</arg>
<arg>"enforced"</arg>
<arg>Policy Control Enforcement Preference not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.059" endtime="20190524 10:06:46.061"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.058" endtime="20190524 10:06:46.061"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvCtx.attributes.pcEnfDir}"</arg>
<arg>"egress"</arg>
<arg>Policy Control Enforcement Direction not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvCtx.attributes.pcEnfDir}"</arg>
<arg>"egress"</arg>
<arg>Policy Control Enforcement Direction not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.064" endtime="20190524 10:06:46.064"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.062" endtime="20190524 10:06:46.064"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-main/rsbgpCtxPol</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.066" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-main/rsbgpCtxPol</msg>
<status status="PASS" starttime="20190524 10:06:46.066" endtime="20190524 10:06:46.066"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.068" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.068" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-main/rsbgpCtxPol.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.086" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsBgpCtxPol":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/ctx-main/rsbgpCtxPol","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:48.888+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"bgpCtxPol","tContextDn":"","tDn":"uni/tn-common/bgpCtxP-default","tRn":"bgpCtxP-default","tType":"name","tnBgpCtxPolName":"default","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.089" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb4c50&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.068" endtime="20190524 10:06:46.089"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (BGP Timer)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (BGP Timer)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.097" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.096" endtime="20190524 10:06:46.098"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.092" endtime="20190524 10:06:46.098"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (BGP Timer)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (BGP Timer)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.100" endtime="20190524 10:06:46.101"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.099" endtime="20190524 10:06:46.101"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsBgpCtxPol.attributes.tnBgpCtxPolName}"</arg>
<arg>"default"</arg>
<arg>BGP Timer not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsBgpCtxPol.attributes.tnBgpCtxPolName}"</arg>
<arg>"default"</arg>
<arg>BGP Timer not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.103" endtime="20190524 10:06:46.104"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.102" endtime="20190524 10:06:46.104"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-main/rsCtxMonPol</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.106" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-main/rsCtxMonPol</msg>
<status status="PASS" starttime="20190524 10:06:46.105" endtime="20190524 10:06:46.106"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.107" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.107" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-main/rsCtxMonPol.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.126" level="INFO">Request returned with status code 200 and text "{"totalCount":"0","imdata":[]}"</msg>
<msg timestamp="20190524 10:06:46.127" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bebba8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.107" endtime="20190524 10:06:46.127"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (Monitoring Policy)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (Monitoring Policy)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.136" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.135" endtime="20190524 10:06:46.137"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.131" endtime="20190524 10:06:46.137"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>0</arg>
<arg>Monitoring Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>0</arg>
<arg>Monitoring Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.140" endtime="20190524 10:06:46.140"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.138" endtime="20190524 10:06:46.140"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-main/rsctxToBgpCtxAfPol-[default]-ipv4-ucast</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.142" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-main/rsctxToBgpCtxAfPol-[default]-ipv4-ucast</msg>
<status status="PASS" starttime="20190524 10:06:46.141" endtime="20190524 10:06:46.142"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.143" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.144" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-main/rsctxToBgpCtxAfPol-[default]-ipv4-ucast.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.162" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsCtxToBgpCtxAfPol":{"attributes":{"af":"ipv4-ucast","annotation":"","childAction":"","dn":"uni/tn-tenant1/ctx-main/rsctxToBgpCtxAfPol-[default]-ipv4-ucast","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:48.888+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"bgpCtxAfPol","tContextDn":"","tDn":"uni/tn-common/bgpCtxAfP-default","tRn":"bgpCtxAfP-default","tType":"name","tnBgpCtxAfPolName":"default","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.165" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bba9b0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.143" endtime="20190524 10:06:46.165"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (BGP IPv4 Context Policy)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (BGP IPv4 Context Policy)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.174" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.173" endtime="20190524 10:06:46.174"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.169" endtime="20190524 10:06:46.174"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (BGP IPv4 Context Policy)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (BGP IPv4 Context Policy)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.177" endtime="20190524 10:06:46.177"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.176" endtime="20190524 10:06:46.178"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsCtxToBgpCtxAfPol.attributes.tnBgpCtxAfPolName}"</arg>
<arg>"default"</arg>
<arg>BGP IPv4 Context Policy Name not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsCtxToBgpCtxAfPol.attributes.tnBgpCtxAfPolName}"</arg>
<arg>"default"</arg>
<arg>BGP IPv4 Context Policy Name not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.180" endtime="20190524 10:06:46.181"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.179" endtime="20190524 10:06:46.181"></status>
</kw>
<doc>Verifies that ACI VRF 'main' under tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1
- VRF Name: main
- Policy Enforcement: enforced
- Policy Enforcement Direction: egress
- BGP Timers: default
- Monitoring Policy:
- BGP IPv4 Context Policy Name: default
- GOLF Opflex Mode:
- GOLF VRF Name:</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-vrf</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.026" endtime="20190524 10:06:46.181" critical="yes"></status>
</test>
<test id="s1-t91" name="Verify ACI VRF Configuration - Tenant tenant1, VRF secondary">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-secondary</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.184" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-secondary</msg>
<status status="PASS" starttime="20190524 10:06:46.184" endtime="20190524 10:06:46.185"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.186" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.186" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-secondary.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.204" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvCtx":{"attributes":{"annotation":"","bdEnforcedEnable":"no","childAction":"","descr":"","dn":"uni/tn-tenant1/ctx-secondary","extMngdBy":"","knwMcastAct":"permit","lcOwn":"local","modTs":"2019-05-23T00:35:49.123+00:00","monPolDn":"uni/tn-common/monepg-default","name":"secondary","nameAlias":"","ownerKey":"","ownerTag":"","pcEnfDir":"ingress","pcEnfDirUpdated":"yes","pcEnfPref":"enforced","pcTag":"49153","scope":"2654209","seg":"2654209","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.207" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8beb5c0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.186" endtime="20190524 10:06:46.207"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.212" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.210" endtime="20190524 10:06:46.212"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>VRF not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.215" endtime="20190524 10:06:46.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvCtx.attributes.name}</arg>
<arg>secondary</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.217" endtime="20190524 10:06:46.218"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvCtx.attributes.pcEnfPref}"</arg>
<arg>"enforced"</arg>
<arg>Policy Control Enforcement Preference not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvCtx.attributes.pcEnfPref}"</arg>
<arg>"enforced"</arg>
<arg>Policy Control Enforcement Preference not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.220" endtime="20190524 10:06:46.221"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.219" endtime="20190524 10:06:46.221"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvCtx.attributes.pcEnfDir}"</arg>
<arg>"ingress"</arg>
<arg>Policy Control Enforcement Direction not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvCtx.attributes.pcEnfDir}"</arg>
<arg>"ingress"</arg>
<arg>Policy Control Enforcement Direction not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.223" endtime="20190524 10:06:46.224"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.222" endtime="20190524 10:06:46.224"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-secondary/rsCtxMonPol</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.226" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-secondary/rsCtxMonPol</msg>
<status status="PASS" starttime="20190524 10:06:46.225" endtime="20190524 10:06:46.226"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.228" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.228" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-secondary/rsCtxMonPol.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.246" level="INFO">Request returned with status code 200 and text "{"totalCount":"0","imdata":[]}"</msg>
<msg timestamp="20190524 10:06:46.247" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b91908&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.227" endtime="20190524 10:06:46.247"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (Monitoring Policy)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (Monitoring Policy)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.258" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.256" endtime="20190524 10:06:46.258"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.250" endtime="20190524 10:06:46.258"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>0</arg>
<arg>Monitoring Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>0</arg>
<arg>Monitoring Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.265" endtime="20190524 10:06:46.267"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.261" endtime="20190524 10:06:46.267"></status>
</kw>
<doc>Verifies that ACI VRF 'secondary' under tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1
- VRF Name: secondary
- Policy Enforcement: enforced
- Policy Enforcement Direction: ingress
- Monitoring Policy:
- GOLF Opflex Mode:
- GOLF VRF Name:</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-vrf</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.182" endtime="20190524 10:06:46.267" critical="yes"></status>
</test>
<test id="s1-t92" name="Checking ACI VRF for Faults - Tenant tenant1, VRF main">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-main/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.270" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-main/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:46.270" endtime="20190524 10:06:46.270"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.272" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.272" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-main/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.291" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/ctx-main/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.294" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b91358&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.271" endtime="20190524 10:06:46.295"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.301" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.299" endtime="20190524 10:06:46.301"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.304" endtime="20190524 10:06:46.305"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.306" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.306" endtime="20190524 10:06:46.306"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.308" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.307" endtime="20190524 10:06:46.308"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.309" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.309" endtime="20190524 10:06:46.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VRF has ${critical_count} critical faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.311" endtime="20190524 10:06:46.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VRF has ${major_count} major faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.313" endtime="20190524 10:06:46.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 3</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VRF has ${minor_count} minor faults (passing threshold 3)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.314" endtime="20190524 10:06:46.315"></status>
</kw>
<doc>Verifies ACI faults for VRF 'main' under tenant 'tenant1'
- Tenant Name: tenant1
- VRF Name: main
- Critical fault count &lt;= 1
- Major fault count &lt;= 2
- Minor fault count &lt;= 3</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-vrf</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.268" endtime="20190524 10:06:46.315" critical="yes"></status>
</test>
<test id="s1-t93" name="Checking ACI VRF for Faults - Tenant tenant1, VRF secondary">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-secondary/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.318" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-secondary/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:46.318" endtime="20190524 10:06:46.318"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.320" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.320" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-secondary/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.338" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/ctx-secondary/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.340" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be75f8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.319" endtime="20190524 10:06:46.341"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.345" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.343" endtime="20190524 10:06:46.345"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.349" endtime="20190524 10:06:46.350"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.351" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.351" endtime="20190524 10:06:46.351"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.353" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.353" endtime="20190524 10:06:46.353"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.355" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.355" endtime="20190524 10:06:46.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VRF has ${critical_count} critical faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.356" endtime="20190524 10:06:46.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VRF has ${major_count} major faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.358" endtime="20190524 10:06:46.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 3</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"VRF has ${minor_count} minor faults (passing threshold 3)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.359" endtime="20190524 10:06:46.360"></status>
</kw>
<doc>Verifies ACI faults for VRF 'secondary' under tenant 'tenant1'
- Tenant Name: tenant1
- VRF Name: secondary
- Critical fault count &lt;= 1
- Major fault count &lt;= 2
- Minor fault count &lt;= 3</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-vrf</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.316" endtime="20190524 10:06:46.360" critical="yes"></status>
</test>
<test id="s1-t94" name="Verify ACI VRF BGP Route-Target Configuration - Tenant tenant1, VRF main, Address-Family ipv4-ucast, Route-Target: route-target:as4-nn2:1:1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-main/rtp-ipv4-ucast/rt-[route-target:as4-nn2:1:1]-import</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.364" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-main/rtp-ipv4-ucast/rt-[route-target:as4-nn2:1:1]-import</msg>
<status status="PASS" starttime="20190524 10:06:46.363" endtime="20190524 10:06:46.364"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.366" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.366" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-main/rtp-ipv4-ucast/rt-[route-target:as4-nn2:1:1]-import.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.385" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"bgpRtTarget":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/ctx-main/rtp-ipv4-ucast/rt-[route-target:as4-nn2:1:1]-import","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:49.308+00:00","name":"","nameAlias":"","ownerKey":"","ownerTag":"","rt":"route-target:as4-nn2:1:1","status":"","targetAf":"l2vpn-evpn","type":"import","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.387" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be5588&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.365" endtime="20190524 10:06:46.387"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.391" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.390" endtime="20190524 10:06:46.391"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BGP Route-Target not configured with expected parameters</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.395" endtime="20190524 10:06:46.396"></status>
</kw>
<doc>Verifies that ACI BGP Route-Target Profile for VRF 'main' under tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1
- VRF Name: main
- Address-Family: ipv4-ucast
- BGP Route-Target: route-target:as4-nn2:1:1
- BGP Route-Target Type: import</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-vrf</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.361" endtime="20190524 10:06:46.396" critical="yes"></status>
</test>
<test id="s1-t95" name="Verify ACI VRF BGP Route-Target Configuration - Tenant tenant1, VRF main, Address-Family ipv4-ucast, Route-Target: route-target:as4-nn2:1:2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ctx-main/rtp-ipv4-ucast/rt-[route-target:as4-nn2:1:2]-export</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.400" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ctx-main/rtp-ipv4-ucast/rt-[route-target:as4-nn2:1:2]-export</msg>
<status status="PASS" starttime="20190524 10:06:46.399" endtime="20190524 10:06:46.400"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.402" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.402" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ctx-main/rtp-ipv4-ucast/rt-[route-target:as4-nn2:1:2]-export.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.420" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"bgpRtTarget":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/ctx-main/rtp-ipv4-ucast/rt-[route-target:as4-nn2:1:2]-export","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:49.537+00:00","name":"","nameAlias":"","ownerKey":"","ownerTag":"","rt":"route-target:as4-nn2:1:2","status":"","targetAf":"l2vpn-evpn","type":"export","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.422" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb5400&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.402" endtime="20190524 10:06:46.423"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.427" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.426" endtime="20190524 10:06:46.427"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BGP Route-Target not configured with expected parameters</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.430" endtime="20190524 10:06:46.431"></status>
</kw>
<doc>Verifies that ACI BGP Route-Target Profile for VRF 'main' under tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1
- VRF Name: main
- Address-Family: ipv4-ucast
- BGP Route-Target: route-target:as4-nn2:1:2
- BGP Route-Target Type: export</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-vrf</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.397" endtime="20190524 10:06:46.432" critical="yes"></status>
</test>
<test id="s1-t96" name="Verify ACI BD Configuration - Tenant tenant1, BD bd1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.435" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd1</msg>
<status status="PASS" starttime="20190524 10:06:46.435" endtime="20190524 10:06:46.435"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.437" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.437" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd1.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.454" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvBD":{"attributes":{"OptimizeWanBandwidth":"no","annotation":"","arpFlood":"no","bcastP":"225.1.186.160","childAction":"","configIssues":"","descr":"","dn":"uni/tn-tenant1/BD-bd1","epClear":"no","epMoveDetectMode":"","extMngdBy":"","intersiteBumTrafficAllow":"no","intersiteL2Stretch":"no","ipLearning":"yes","lcOwn":"local","limitIpLearnToSubnets":"no","llAddr":"::","mac":"00:22:BD:F8:19:FF","mcastAllow":"no","modTs":"2019-05-23T00:35:49.901+00:00","monPolDn":"uni/tn-common/monepg-default","mtu":"inherit","multiDstPktAct":"bd-flood","name":"bd1","nameAlias":"","ownerKey":"","ownerTag":"","pcTag":"49154","scope":"2686976","seg":"15925206","status":"","type":"regular","uid":"15374","unicastRoute":"no","unkMacUcastAct":"proxy","unkMcastAct":"flood","vmac":"not-applicable"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.457" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb5f60&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.436" endtime="20190524 10:06:46.458"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.462" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.460" endtime="20190524 10:06:46.462"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BD not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.466" endtime="20190524 10:06:46.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvBD.attributes.name}</arg>
<arg>bd1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.468" endtime="20190524 10:06:46.469"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.471" endtime="20190524 10:06:46.471"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.470" endtime="20190524 10:06:46.471"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unkMacUcastAct}"</arg>
<arg>"proxy"</arg>
<arg>L2 Unknown Unicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unkMacUcastAct}"</arg>
<arg>"proxy"</arg>
<arg>L2 Unknown Unicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.473" endtime="20190524 10:06:46.474"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.472" endtime="20190524 10:06:46.474"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unkMcastAct}"</arg>
<arg>"flood"</arg>
<arg>L3 Unknown Multicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unkMcastAct}"</arg>
<arg>"flood"</arg>
<arg>L3 Unknown Multicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.476" endtime="20190524 10:06:46.476"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.475" endtime="20190524 10:06:46.476"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.multiDstPktAct}"</arg>
<arg>"bd-flood"</arg>
<arg>Multi Destination Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.multiDstPktAct}"</arg>
<arg>"bd-flood"</arg>
<arg>Multi Destination Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.480" endtime="20190524 10:06:46.480"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.477" endtime="20190524 10:06:46.481"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.arpFlood}"</arg>
<arg>"no"</arg>
<arg>ARP Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.arpFlood}"</arg>
<arg>"no"</arg>
<arg>ARP Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.483" endtime="20190524 10:06:46.484"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.482" endtime="20190524 10:06:46.484"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unicastRoute}"</arg>
<arg>"no"</arg>
<arg>Unicast Routing not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unicastRoute}"</arg>
<arg>"no"</arg>
<arg>Unicast Routing not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.486" endtime="20190524 10:06:46.487"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.485" endtime="20190524 10:06:46.487"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.limitIpLearnToSubnets}"</arg>
<arg>"no"</arg>
<arg>Limit IP Learning to Subnet not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.limitIpLearnToSubnets}"</arg>
<arg>"no"</arg>
<arg>Limit IP Learning to Subnet not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.489" endtime="20190524 10:06:46.490"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.488" endtime="20190524 10:06:46.490"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.ipLearning}"</arg>
<arg>"yes"</arg>
<arg>Endpoint Dataplane Learning not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.ipLearning}"</arg>
<arg>"yes"</arg>
<arg>Endpoint Dataplane Learning not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.492" endtime="20190524 10:06:46.493"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.491" endtime="20190524 10:06:46.493"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.mcastAllow}"</arg>
<arg>"no"</arg>
<arg>PIM not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.mcastAllow}"</arg>
<arg>"no"</arg>
<arg>PIM not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.496" endtime="20190524 10:06:46.496"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.494" endtime="20190524 10:06:46.497"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.epMoveDetectMode}"</arg>
<arg>""</arg>
<arg>Endpoint Move Detection Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.epMoveDetectMode}"</arg>
<arg>""</arg>
<arg>Endpoint Move Detection Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.499" endtime="20190524 10:06:46.500"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.498" endtime="20190524 10:06:46.500"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd1/rsctx</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.502" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd1/rsctx</msg>
<status status="PASS" starttime="20190524 10:06:46.501" endtime="20190524 10:06:46.502"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.503" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.503" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd1/rsctx.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.520" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsCtx":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/BD-bd1/rsctx","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:49.873+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"fvCtx","tContextDn":"","tDn":"uni/tn-tenant1/ctx-main","tRn":"ctx-main","tType":"name","tnFvCtxName":"main","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.523" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be9780&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.503" endtime="20190524 10:06:46.523"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (VRF)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (VRF)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.532" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.531" endtime="20190524 10:06:46.532"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.526" endtime="20190524 10:06:46.532"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (VRF)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (VRF)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.535" endtime="20190524 10:06:46.535"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.533" endtime="20190524 10:06:46.535"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsCtx.attributes.tnFvCtxName}"</arg>
<arg>"main"</arg>
<arg>Associated VRF not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsCtx.attributes.tnFvCtxName}"</arg>
<arg>"main"</arg>
<arg>Associated VRF not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.538" endtime="20190524 10:06:46.538"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.537" endtime="20190524 10:06:46.538"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd1/rsigmpsn</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.540" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd1/rsigmpsn</msg>
<status status="PASS" starttime="20190524 10:06:46.539" endtime="20190524 10:06:46.540"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.542" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.542" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd1/rsigmpsn.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.560" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsIgmpsn":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/BD-bd1/rsigmpsn","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:49.919+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"default-target","status":"","tCl":"igmpSnoopPol","tContextDn":"","tDn":"uni/tn-common/snPol-default","tRn":"snPol-default","tType":"name","tnIgmpSnoopPolName":"","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.563" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be50b8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.542" endtime="20190524 10:06:46.563"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.572" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.571" endtime="20190524 10:06:46.572"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.567" endtime="20190524 10:06:46.572"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.575" endtime="20190524 10:06:46.575"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.573" endtime="20190524 10:06:46.575"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsIgmpsn.attributes.tnIgmpSnoopPolName}"</arg>
<arg>""</arg>
<arg>IGMP Snooping Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsIgmpsn.attributes.tnIgmpSnoopPolName}"</arg>
<arg>""</arg>
<arg>IGMP Snooping Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.578" endtime="20190524 10:06:46.579"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.577" endtime="20190524 10:06:46.579"></status>
</kw>
<doc>Verifies that ACI BD 'bd1' under tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1
- BD Name: bd1
- BD Name Alias:
- Associated to VRF: main
- L2 Unknown Unicast Flooding: proxy
- L3 Unknown Multicast Flooding: flood
- Multi Destination Flooding: bd-flood
- Enable PIM: no
- ARP Flooding: no
- Unicast Routing: no
- Limit IP Learning to Subnet: no
- Endpoint Dataplane Learning: yes
- Endpoint Move Detection Mode:
- IGMP Snooping Policy:
- Legacy Mode: no</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.433" endtime="20190524 10:06:46.579" critical="yes"></status>
</test>
<test id="s1-t97" name="Verify ACI BD Configuration - Tenant tenant1, BD bd2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.583" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd2</msg>
<status status="PASS" starttime="20190524 10:06:46.582" endtime="20190524 10:06:46.583"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.585" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.585" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd2.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.603" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvBD":{"attributes":{"OptimizeWanBandwidth":"no","annotation":"","arpFlood":"no","bcastP":"225.1.121.32","childAction":"","configIssues":"","descr":"","dn":"uni/tn-tenant1/BD-bd2","epClear":"no","epMoveDetectMode":"","extMngdBy":"","intersiteBumTrafficAllow":"no","intersiteL2Stretch":"no","ipLearning":"yes","lcOwn":"local","limitIpLearnToSubnets":"no","llAddr":"::","mac":"00:22:BD:F8:19:FF","mcastAllow":"no","modTs":"2019-05-23T00:35:50.128+00:00","monPolDn":"uni/tn-common/monepg-default","mtu":"inherit","multiDstPktAct":"bd-flood","name":"bd2","nameAlias":"","ownerKey":"","ownerTag":"","pcTag":"32770","scope":"2686976","seg":"16056262","status":"","type":"regular","uid":"15374","unicastRoute":"yes","unkMacUcastAct":"proxy","unkMcastAct":"flood","vmac":"not-applicable"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.606" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be7ac8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.585" endtime="20190524 10:06:46.606"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.608" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.607" endtime="20190524 10:06:46.608"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BD not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.609" endtime="20190524 10:06:46.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvBD.attributes.name}</arg>
<arg>bd2</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.612" endtime="20190524 10:06:46.613"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.616" endtime="20190524 10:06:46.617"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.614" endtime="20190524 10:06:46.617"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unkMacUcastAct}"</arg>
<arg>"proxy"</arg>
<arg>L2 Unknown Unicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unkMacUcastAct}"</arg>
<arg>"proxy"</arg>
<arg>L2 Unknown Unicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.620" endtime="20190524 10:06:46.621"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.618" endtime="20190524 10:06:46.621"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unkMcastAct}"</arg>
<arg>"flood"</arg>
<arg>L3 Unknown Multicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unkMcastAct}"</arg>
<arg>"flood"</arg>
<arg>L3 Unknown Multicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.624" endtime="20190524 10:06:46.624"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.622" endtime="20190524 10:06:46.625"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.multiDstPktAct}"</arg>
<arg>"bd-flood"</arg>
<arg>Multi Destination Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.multiDstPktAct}"</arg>
<arg>"bd-flood"</arg>
<arg>Multi Destination Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.627" endtime="20190524 10:06:46.628"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.626" endtime="20190524 10:06:46.628"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.arpFlood}"</arg>
<arg>"no"</arg>
<arg>ARP Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.arpFlood}"</arg>
<arg>"no"</arg>
<arg>ARP Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.631" endtime="20190524 10:06:46.632"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.630" endtime="20190524 10:06:46.632"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unicastRoute}"</arg>
<arg>"yes"</arg>
<arg>Unicast Routing not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unicastRoute}"</arg>
<arg>"yes"</arg>
<arg>Unicast Routing not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.635" endtime="20190524 10:06:46.636"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.633" endtime="20190524 10:06:46.636"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.limitIpLearnToSubnets}"</arg>
<arg>"no"</arg>
<arg>Limit IP Learning to Subnet not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.limitIpLearnToSubnets}"</arg>
<arg>"no"</arg>
<arg>Limit IP Learning to Subnet not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.638" endtime="20190524 10:06:46.639"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.637" endtime="20190524 10:06:46.639"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.ipLearning}"</arg>
<arg>"yes"</arg>
<arg>Endpoint Dataplane Learning not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.ipLearning}"</arg>
<arg>"yes"</arg>
<arg>Endpoint Dataplane Learning not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.641" endtime="20190524 10:06:46.642"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.640" endtime="20190524 10:06:46.642"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.mcastAllow}"</arg>
<arg>"no"</arg>
<arg>PIM not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.mcastAllow}"</arg>
<arg>"no"</arg>
<arg>PIM not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.644" endtime="20190524 10:06:46.645"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.643" endtime="20190524 10:06:46.645"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.epMoveDetectMode}"</arg>
<arg>""</arg>
<arg>Endpoint Move Detection Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.epMoveDetectMode}"</arg>
<arg>""</arg>
<arg>Endpoint Move Detection Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.647" endtime="20190524 10:06:46.648"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.646" endtime="20190524 10:06:46.648"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd2/rsctx</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.650" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd2/rsctx</msg>
<status status="PASS" starttime="20190524 10:06:46.649" endtime="20190524 10:06:46.650"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.652" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.652" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd2/rsctx.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.670" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsCtx":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/BD-bd2/rsctx","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:50.102+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"fvCtx","tContextDn":"","tDn":"uni/tn-tenant1/ctx-main","tRn":"ctx-main","tType":"name","tnFvCtxName":"main","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.673" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8ddd828&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.651" endtime="20190524 10:06:46.673"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (VRF)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (VRF)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.676" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.676" endtime="20190524 10:06:46.677"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.674" endtime="20190524 10:06:46.677"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (VRF)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (VRF)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.680" endtime="20190524 10:06:46.680"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.678" endtime="20190524 10:06:46.680"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsCtx.attributes.tnFvCtxName}"</arg>
<arg>"main"</arg>
<arg>Associated VRF not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsCtx.attributes.tnFvCtxName}"</arg>
<arg>"main"</arg>
<arg>Associated VRF not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.684" endtime="20190524 10:06:46.685"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.681" endtime="20190524 10:06:46.685"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd2/rsigmpsn</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.686" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd2/rsigmpsn</msg>
<status status="PASS" starttime="20190524 10:06:46.686" endtime="20190524 10:06:46.686"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.688" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.688" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd2/rsigmpsn.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.706" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsIgmpsn":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/BD-bd2/rsigmpsn","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:50.102+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"default-target","status":"","tCl":"igmpSnoopPol","tContextDn":"","tDn":"uni/tn-common/snPol-default","tRn":"snPol-default","tType":"name","tnIgmpSnoopPolName":"","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.709" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd2860&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.687" endtime="20190524 10:06:46.709"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.712" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.711" endtime="20190524 10:06:46.712"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.710" endtime="20190524 10:06:46.712"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.715" endtime="20190524 10:06:46.716"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.713" endtime="20190524 10:06:46.716"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsIgmpsn.attributes.tnIgmpSnoopPolName}"</arg>
<arg>""</arg>
<arg>IGMP Snooping Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsIgmpsn.attributes.tnIgmpSnoopPolName}"</arg>
<arg>""</arg>
<arg>IGMP Snooping Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.718" endtime="20190524 10:06:46.719"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.717" endtime="20190524 10:06:46.719"></status>
</kw>
<doc>Verifies that ACI BD 'bd2' under tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1
- BD Name: bd2
- BD Name Alias:
- Associated to VRF: main
- L2 Unknown Unicast Flooding: proxy
- L3 Unknown Multicast Flooding: flood
- Multi Destination Flooding: bd-flood
- Enable PIM: no
- ARP Flooding: no
- Unicast Routing: yes
- Limit IP Learning to Subnet: no
- Endpoint Dataplane Learning: yes
- Endpoint Move Detection Mode:
- IGMP Snooping Policy:
- Legacy Mode: no</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.580" endtime="20190524 10:06:46.719" critical="yes"></status>
</test>
<test id="s1-t98" name="Verify ACI BD Configuration - Tenant tenant1, BD bd3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd3</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.723" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd3</msg>
<status status="PASS" starttime="20190524 10:06:46.722" endtime="20190524 10:06:46.723"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.724" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.724" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd3.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.742" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvBD":{"attributes":{"OptimizeWanBandwidth":"no","annotation":"","arpFlood":"yes","bcastP":"225.1.41.144","childAction":"","configIssues":"","descr":"","dn":"uni/tn-tenant1/BD-bd3","epClear":"no","epMoveDetectMode":"garp","extMngdBy":"","intersiteBumTrafficAllow":"no","intersiteL2Stretch":"no","ipLearning":"yes","lcOwn":"local","limitIpLearnToSubnets":"no","llAddr":"::","mac":"00:22:BD:F8:19:FF","mcastAllow":"no","modTs":"2019-05-23T00:35:50.353+00:00","monPolDn":"uni/tn-common/monepg-default","mtu":"inherit","multiDstPktAct":"bd-flood","name":"bd3","nameAlias":"","ownerKey":"","ownerTag":"","pcTag":"16386","scope":"2686976","seg":"16285611","status":"","type":"regular","uid":"15374","unicastRoute":"yes","unkMacUcastAct":"proxy","unkMcastAct":"flood","vmac":"not-applicable"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.747" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bbb048&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.724" endtime="20190524 10:06:46.747"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.749" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.748" endtime="20190524 10:06:46.749"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BD not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.750" endtime="20190524 10:06:46.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvBD.attributes.name}</arg>
<arg>bd3</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.752" endtime="20190524 10:06:46.752"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.756" endtime="20190524 10:06:46.756"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.754" endtime="20190524 10:06:46.756"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unkMacUcastAct}"</arg>
<arg>"proxy"</arg>
<arg>L2 Unknown Unicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unkMacUcastAct}"</arg>
<arg>"proxy"</arg>
<arg>L2 Unknown Unicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.759" endtime="20190524 10:06:46.759"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.758" endtime="20190524 10:06:46.759"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unkMcastAct}"</arg>
<arg>"flood"</arg>
<arg>L3 Unknown Multicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unkMcastAct}"</arg>
<arg>"flood"</arg>
<arg>L3 Unknown Multicast Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.761" endtime="20190524 10:06:46.762"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.760" endtime="20190524 10:06:46.762"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.multiDstPktAct}"</arg>
<arg>"bd-flood"</arg>
<arg>Multi Destination Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.multiDstPktAct}"</arg>
<arg>"bd-flood"</arg>
<arg>Multi Destination Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.764" endtime="20190524 10:06:46.765"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.763" endtime="20190524 10:06:46.765"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.arpFlood}"</arg>
<arg>"yes"</arg>
<arg>ARP Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.arpFlood}"</arg>
<arg>"yes"</arg>
<arg>ARP Flooding not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.767" endtime="20190524 10:06:46.768"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.766" endtime="20190524 10:06:46.768"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.unicastRoute}"</arg>
<arg>"yes"</arg>
<arg>Unicast Routing not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.unicastRoute}"</arg>
<arg>"yes"</arg>
<arg>Unicast Routing not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.770" endtime="20190524 10:06:46.771"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.769" endtime="20190524 10:06:46.771"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.limitIpLearnToSubnets}"</arg>
<arg>"no"</arg>
<arg>Limit IP Learning to Subnet not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.limitIpLearnToSubnets}"</arg>
<arg>"no"</arg>
<arg>Limit IP Learning to Subnet not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.773" endtime="20190524 10:06:46.774"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.772" endtime="20190524 10:06:46.774"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.ipLearning}"</arg>
<arg>"yes"</arg>
<arg>Endpoint Dataplane Learning not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.ipLearning}"</arg>
<arg>"yes"</arg>
<arg>Endpoint Dataplane Learning not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.778" endtime="20190524 10:06:46.778"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.775" endtime="20190524 10:06:46.779"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.mcastAllow}"</arg>
<arg>"no"</arg>
<arg>PIM not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.mcastAllow}"</arg>
<arg>"no"</arg>
<arg>PIM not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.782" endtime="20190524 10:06:46.782"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.780" endtime="20190524 10:06:46.782"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvBD.attributes.epMoveDetectMode}"</arg>
<arg>"garp"</arg>
<arg>Endpoint Move Detection Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvBD.attributes.epMoveDetectMode}"</arg>
<arg>"garp"</arg>
<arg>Endpoint Move Detection Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.785" endtime="20190524 10:06:46.786"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.784" endtime="20190524 10:06:46.786"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd3/rsctx</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.787" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd3/rsctx</msg>
<status status="PASS" starttime="20190524 10:06:46.787" endtime="20190524 10:06:46.787"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.789" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.789" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd3/rsctx.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.807" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsCtx":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/BD-bd3/rsctx","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:50.331+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"fvCtx","tContextDn":"","tDn":"uni/tn-tenant1/ctx-main","tRn":"ctx-main","tType":"name","tnFvCtxName":"main","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.810" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c12c50&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.789" endtime="20190524 10:06:46.810"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (VRF)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (VRF)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.814" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.813" endtime="20190524 10:06:46.815"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.812" endtime="20190524 10:06:46.815"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (VRF)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (VRF)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.817" endtime="20190524 10:06:46.818"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.816" endtime="20190524 10:06:46.818"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsCtx.attributes.tnFvCtxName}"</arg>
<arg>"main"</arg>
<arg>Associated VRF not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsCtx.attributes.tnFvCtxName}"</arg>
<arg>"main"</arg>
<arg>Associated VRF not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.822" endtime="20190524 10:06:46.822"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.820" endtime="20190524 10:06:46.822"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd3/rsigmpsn</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.823" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd3/rsigmpsn</msg>
<status status="PASS" starttime="20190524 10:06:46.823" endtime="20190524 10:06:46.823"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.825" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.825" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd3/rsigmpsn.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.843" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsIgmpsn":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/BD-bd3/rsigmpsn","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:50.331+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"default-target","status":"","tCl":"igmpSnoopPol","tContextDn":"","tDn":"uni/tn-common/snPol-default","tRn":"snPol-default","tType":"name","tnIgmpSnoopPolName":"","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.847" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bffda0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.824" endtime="20190524 10:06:46.847"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.850" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.850" endtime="20190524 10:06:46.850"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.848" endtime="20190524 10:06:46.851"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration (IGMP Snooping)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.854" endtime="20190524 10:06:46.854"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.852" endtime="20190524 10:06:46.855"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsIgmpsn.attributes.tnIgmpSnoopPolName}"</arg>
<arg>""</arg>
<arg>IGMP Snooping Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsIgmpsn.attributes.tnIgmpSnoopPolName}"</arg>
<arg>""</arg>
<arg>IGMP Snooping Policy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.857" endtime="20190524 10:06:46.858"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:46.856" endtime="20190524 10:06:46.858"></status>
</kw>
<doc>Verifies that ACI BD 'bd3' under tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1
- BD Name: bd3
- BD Name Alias:
- Associated to VRF: main
- L2 Unknown Unicast Flooding: proxy
- L3 Unknown Multicast Flooding: flood
- Multi Destination Flooding: bd-flood
- Enable PIM: no
- ARP Flooding: yes
- Unicast Routing: yes
- Limit IP Learning to Subnet: no
- Endpoint Dataplane Learning: yes
- Endpoint Move Detection Mode: garp
- IGMP Snooping Policy:
- Legacy Mode: no</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.720" endtime="20190524 10:06:46.858" critical="yes"></status>
</test>
<test id="s1-t99" name="Checking ACI BD for Faults - Tenant tenant1, BD bd1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd1/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.861" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd1/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:46.861" endtime="20190524 10:06:46.861"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.863" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.863" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd1/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.882" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/BD-bd1/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.886" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd2630&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.863" endtime="20190524 10:06:46.886"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.888" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.887" endtime="20190524 10:06:46.888"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.889" endtime="20190524 10:06:46.890"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.892" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.891" endtime="20190524 10:06:46.892"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.894" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.893" endtime="20190524 10:06:46.894"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.896" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.895" endtime="20190524 10:06:46.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.898" endtime="20190524 10:06:46.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.899" endtime="20190524 10:06:46.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${minor_count} minor faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.902" endtime="20190524 10:06:46.902"></status>
</kw>
<doc>Verifies ACI faults for VRF 'bd1' under tenant 'tenant1'
- Tenant Name: tenant1
- BD Name: bd1
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 1</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.859" endtime="20190524 10:06:46.903" critical="yes"></status>
</test>
<test id="s1-t100" name="Checking ACI BD for Faults - Tenant tenant1, BD bd2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd2/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.906" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd2/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:46.906" endtime="20190524 10:06:46.906"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.908" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.909" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd2/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.926" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/BD-bd2/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.929" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c2dd68&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.908" endtime="20190524 10:06:46.930"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.932" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.931" endtime="20190524 10:06:46.932"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.933" endtime="20190524 10:06:46.934"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.936" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.935" endtime="20190524 10:06:46.936"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.938" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.938" endtime="20190524 10:06:46.938"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.940" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.940" endtime="20190524 10:06:46.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.941" endtime="20190524 10:06:46.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.943" endtime="20190524 10:06:46.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${minor_count} minor faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.944" endtime="20190524 10:06:46.945"></status>
</kw>
<doc>Verifies ACI faults for VRF 'bd2' under tenant 'tenant1'
- Tenant Name: tenant1
- BD Name: bd2
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 1</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.904" endtime="20190524 10:06:46.945" critical="yes"></status>
</test>
<test id="s1-t101" name="Checking ACI BD for Faults - Tenant tenant1, BD bd3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd3/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.949" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd3/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:46.948" endtime="20190524 10:06:46.949"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.951" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.951" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd3/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:46.968" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/BD-bd3/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:46.971" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bbb048&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.950" endtime="20190524 10:06:46.971"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:46.973" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.972" endtime="20190524 10:06:46.973"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.974" endtime="20190524 10:06:46.975"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.976" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.976" endtime="20190524 10:06:46.976"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.978" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.977" endtime="20190524 10:06:46.978"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:46.980" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:46.979" endtime="20190524 10:06:46.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.982" endtime="20190524 10:06:46.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.984" endtime="20190524 10:06:46.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 1</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BD has ${minor_count} minor faults (passing threshold 1)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:46.986" endtime="20190524 10:06:46.986"></status>
</kw>
<doc>Verifies ACI faults for VRF 'bd3' under tenant 'tenant1'
- Tenant Name: tenant1
- BD Name: bd3
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 1</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.946" endtime="20190524 10:06:46.987" critical="yes"></status>
</test>
<test id="s1-t102" name="Verify ACI BD Subnet Configuration - Tenant tenant1, BD bd2, Subnet 10.0.0.1/24">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd2/subnet-[10.0.0.1/24]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:46.990" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd2/subnet-[10.0.0.1/24]</msg>
<status status="PASS" starttime="20190524 10:06:46.989" endtime="20190524 10:06:46.990"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:46.992" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:46.992" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd2/subnet-[10.0.0.1/24].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.014" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvSubnet":{"attributes":{"annotation":"","childAction":"","ctrl":"","descr":"","dn":"uni/tn-tenant1/BD-bd2/subnet-[10.0.0.1/24]","extMngdBy":"","ip":"10.0.0.1/24","lcOwn":"local","modTs":"2019-05-23T00:35:50.564+00:00","monPolDn":"uni/tn-common/monepg-default","name":"","nameAlias":"","preferred":"no","scope":"public","status":"","uid":"15374","virtual":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.018" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8de4dd8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:46.991" endtime="20190524 10:06:47.018"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.020" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.019" endtime="20190524 10:06:47.020"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BD Subnet not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.022" endtime="20190524 10:06:47.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvSubnet.attributes.ip}</arg>
<arg>10.0.0.1/24</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.024" endtime="20190524 10:06:47.025"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.scope}"</arg>
<arg>"public"</arg>
<arg>Subnet Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.scope}"</arg>
<arg>"public"</arg>
<arg>Subnet Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.027" endtime="20190524 10:06:47.028"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.026" endtime="20190524 10:06:47.028"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.preferred}"</arg>
<arg>"no"</arg>
<arg>Primary IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.preferred}"</arg>
<arg>"no"</arg>
<arg>Primary IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.031" endtime="20190524 10:06:47.032"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.029" endtime="20190524 10:06:47.032"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.virtual}"</arg>
<arg>"no"</arg>
<arg>Virtual IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.virtual}"</arg>
<arg>"no"</arg>
<arg>Virtual IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.034" endtime="20190524 10:06:47.035"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.033" endtime="20190524 10:06:47.035"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.ctrl}"</arg>
<arg>""</arg>
<arg>Subnet Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.ctrl}"</arg>
<arg>""</arg>
<arg>Subnet Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.038" endtime="20190524 10:06:47.038"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.036" endtime="20190524 10:06:47.038"></status>
</kw>
<doc>Verifies that ACI BD Subnet '10.0.0.1/24' under tenant 'tenant1', BD 'bd2' are configured with the expected parameters:
- Tenant Name: tenant1
- BD Name: bd2
- Subnet: 10.0.0.1/24
- Subnet Scope: public
- Primary IP Address: no
- Virtual IP Address: no
- Subnet Control:
- ND RA Prefix Policy Name:</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:46.988" endtime="20190524 10:06:47.038" critical="yes"></status>
</test>
<test id="s1-t103" name="Verify ACI BD Subnet Configuration - Tenant tenant1, BD bd2, Subnet 11.0.0.1/24">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd2/subnet-[11.0.0.1/24]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.041" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd2/subnet-[11.0.0.1/24]</msg>
<status status="PASS" starttime="20190524 10:06:47.041" endtime="20190524 10:06:47.041"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.043" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.043" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd2/subnet-[11.0.0.1/24].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.060" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvSubnet":{"attributes":{"annotation":"","childAction":"","ctrl":"","descr":"","dn":"uni/tn-tenant1/BD-bd2/subnet-[11.0.0.1/24]","extMngdBy":"","ip":"11.0.0.1/24","lcOwn":"local","modTs":"2019-05-23T00:35:50.794+00:00","monPolDn":"uni/tn-common/monepg-default","name":"","nameAlias":"","preferred":"no","scope":"private","status":"","uid":"15374","virtual":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.063" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c2da20&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.042" endtime="20190524 10:06:47.063"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.066" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.065" endtime="20190524 10:06:47.066"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BD Subnet not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.067" endtime="20190524 10:06:47.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvSubnet.attributes.ip}</arg>
<arg>11.0.0.1/24</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.068" endtime="20190524 10:06:47.070"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.scope}"</arg>
<arg>"private"</arg>
<arg>Subnet Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.scope}"</arg>
<arg>"private"</arg>
<arg>Subnet Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.072" endtime="20190524 10:06:47.073"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.071" endtime="20190524 10:06:47.073"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.preferred}"</arg>
<arg>"no"</arg>
<arg>Primary IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.preferred}"</arg>
<arg>"no"</arg>
<arg>Primary IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.075" endtime="20190524 10:06:47.076"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.074" endtime="20190524 10:06:47.076"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.virtual}"</arg>
<arg>"no"</arg>
<arg>Virtual IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.virtual}"</arg>
<arg>"no"</arg>
<arg>Virtual IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.079" endtime="20190524 10:06:47.080"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.078" endtime="20190524 10:06:47.080"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.ctrl}"</arg>
<arg>""</arg>
<arg>Subnet Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.ctrl}"</arg>
<arg>""</arg>
<arg>Subnet Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.083" endtime="20190524 10:06:47.084"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.081" endtime="20190524 10:06:47.084"></status>
</kw>
<doc>Verifies that ACI BD Subnet '11.0.0.1/24' under tenant 'tenant1', BD 'bd2' are configured with the expected parameters:
- Tenant Name: tenant1
- BD Name: bd2
- Subnet: 11.0.0.1/24
- Subnet Scope: private
- Primary IP Address: no
- Virtual IP Address: no
- Subnet Control:
- ND RA Prefix Policy Name:</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.039" endtime="20190524 10:06:47.084" critical="yes"></status>
</test>
<test id="s1-t104" name="Verify ACI BD Subnet Configuration - Tenant tenant1, BD bd3, Subnet 12.0.0.1/24">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd3/subnet-[12.0.0.1/24]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.088" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd3/subnet-[12.0.0.1/24]</msg>
<status status="PASS" starttime="20190524 10:06:47.087" endtime="20190524 10:06:47.088"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.089" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.090" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd3/subnet-[12.0.0.1/24].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.107" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvSubnet":{"attributes":{"annotation":"","childAction":"","ctrl":"","descr":"","dn":"uni/tn-tenant1/BD-bd3/subnet-[12.0.0.1/24]","extMngdBy":"","ip":"12.0.0.1/24","lcOwn":"local","modTs":"2019-05-23T00:35:51.007+00:00","monPolDn":"uni/tn-common/monepg-default","name":"","nameAlias":"","preferred":"no","scope":"public","status":"","uid":"15374","virtual":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.110" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bc2e80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.089" endtime="20190524 10:06:47.110"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.111" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.111" endtime="20190524 10:06:47.112"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BD Subnet not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.113" endtime="20190524 10:06:47.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvSubnet.attributes.ip}</arg>
<arg>12.0.0.1/24</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.115" endtime="20190524 10:06:47.116"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.scope}"</arg>
<arg>"public"</arg>
<arg>Subnet Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.scope}"</arg>
<arg>"public"</arg>
<arg>Subnet Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.118" endtime="20190524 10:06:47.120"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.117" endtime="20190524 10:06:47.120"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.preferred}"</arg>
<arg>"no"</arg>
<arg>Primary IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.preferred}"</arg>
<arg>"no"</arg>
<arg>Primary IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.122" endtime="20190524 10:06:47.122"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.121" endtime="20190524 10:06:47.123"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.virtual}"</arg>
<arg>"no"</arg>
<arg>Virtual IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.virtual}"</arg>
<arg>"no"</arg>
<arg>Virtual IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.125" endtime="20190524 10:06:47.125"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.123" endtime="20190524 10:06:47.125"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvSubnet.attributes.ctrl}"</arg>
<arg>""</arg>
<arg>Subnet Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvSubnet.attributes.ctrl}"</arg>
<arg>""</arg>
<arg>Subnet Control not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.127" endtime="20190524 10:06:47.128"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.126" endtime="20190524 10:06:47.128"></status>
</kw>
<doc>Verifies that ACI BD Subnet '12.0.0.1/24' under tenant 'tenant1', BD 'bd3' are configured with the expected parameters:
- Tenant Name: tenant1
- BD Name: bd3
- Subnet: 12.0.0.1/24
- Subnet Scope: public
- Primary IP Address: no
- Virtual IP Address: no
- Subnet Control:
- ND RA Prefix Policy Name:</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.085" endtime="20190524 10:06:47.128" critical="yes"></status>
</test>
<test id="s1-t105" name="Verify ACI BD L3Out Configuration - Tenant tenant1, BD bd2, L3Out L3OUT-main_INT">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/BD-bd2/rsBDToOut-L3OUT-main_INT</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.132" level="INFO">${uri} = /api/mo/uni/tn-tenant1/BD-bd2/rsBDToOut-L3OUT-main_INT</msg>
<status status="PASS" starttime="20190524 10:06:47.132" endtime="20190524 10:06:47.132"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.134" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.134" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/BD-bd2/rsBDToOut-L3OUT-main_INT.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.152" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsBDToOut":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/BD-bd2/rsBDToOut-L3OUT-main_INT","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:53.212+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"l3extOut","tContextDn":"","tDn":"uni/tn-tenant1/out-L3OUT-main_INT","tRn":"out-L3OUT-main_INT","tType":"name","tnL3extOutName":"L3OUT-main_INT","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.155" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8ddd828&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.133" endtime="20190524 10:06:47.155"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.157" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.156" endtime="20190524 10:06:47.157"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>L3Out not associated with BD</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.158" endtime="20190524 10:06:47.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvRsBDToOut.attributes.tnL3extOutName}</arg>
<arg>L3OUT-main_INT</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.159" endtime="20190524 10:06:47.160"></status>
</kw>
<doc>Verifies that ACI BD L3Out 'L3OUT-main_INT' under tenant 'tenant1', BD '' are configured with the expected parameters:
- Tenant Name: tenant1
- BD Name: bd2
- Associated L3Out: L3OUT-main_INT</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-bd</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.129" endtime="20190524 10:06:47.160" critical="yes"></status>
</test>
<test id="s1-t106" name="Verify ACI Application Profile Configuration - Tenant tenant1, App Profile app1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.163" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1</msg>
<status status="PASS" starttime="20190524 10:06:47.163" endtime="20190524 10:06:47.163"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.166" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.166" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.182" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvAp":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/ap-app1","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:51.476+00:00","monPolDn":"uni/tn-common/monepg-default","name":"app1","nameAlias":"","ownerKey":"","ownerTag":"","prio":"unspecified","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.185" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c18ac8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.165" endtime="20190524 10:06:47.185"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.187" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.186" endtime="20190524 10:06:47.187"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>VRF not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.188" endtime="20190524 10:06:47.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvAp.attributes.name}</arg>
<arg>app1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.189" endtime="20190524 10:06:47.190"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvAp.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvAp.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.192" endtime="20190524 10:06:47.192"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.191" endtime="20190524 10:06:47.193"></status>
</kw>
<doc>Verifies that ACI Application Profile 'app1' under tenant 'tenant1' are configured with the expected parameters:
- Tenant Name: tenant1
- Application Profile Name: app1
- QoS Class: unspecified</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-ap</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.161" endtime="20190524 10:06:47.193" critical="yes"></status>
</test>
<test id="s1-t107" name="Verify ACI EPG Configuration - Tenant tenant1, App Profile app1, EPG epg1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.196" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1</msg>
<status status="PASS" starttime="20190524 10:06:47.195" endtime="20190524 10:06:47.196"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.197" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.197" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.215" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvAEPg":{"attributes":{"annotation":"","childAction":"","configIssues":"","configSt":"applied","descr":"","dn":"uni/tn-tenant1/ap-app1/epg-epg1","exceptionTag":"","extMngdBy":"","floodOnEncap":"disabled","fwdCtrl":"","isAttrBasedEPg":"no","isSharedSrvMsiteEPg":"no","lcOwn":"local","matchT":"AtleastOne","modTs":"2019-05-23T00:35:51.745+00:00","monPolDn":"uni/tn-common/monepg-default","name":"epg1","nameAlias":"","pcEnfPref":"unenforced","pcTag":"16387","prefGrMemb":"exclude","prio":"unspecified","scope":"2686976","status":"","triggerSt":"triggerable","txId":"17293822569102731890","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.218" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c0be80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.197" endtime="20190524 10:06:47.218"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.220" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.219" endtime="20190524 10:06:47.220"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.221" endtime="20190524 10:06:47.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvAEPg.attributes.name}</arg>
<arg>epg1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.223" endtime="20190524 10:06:47.224"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvAEPg.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvAEPg.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.226" endtime="20190524 10:06:47.227"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.225" endtime="20190524 10:06:47.228"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvAEPg.attributes.prefGrMemb}"</arg>
<arg>"exclude"</arg>
<arg>Preferred Group Member not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvAEPg.attributes.prefGrMemb}"</arg>
<arg>"exclude"</arg>
<arg>Preferred Group Member not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.231" endtime="20190524 10:06:47.231"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.229" endtime="20190524 10:06:47.231"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvAEPg.attributes.pcEnfPref}"</arg>
<arg>"unenforced"</arg>
<arg>Intra EPG Isolation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvAEPg.attributes.pcEnfPref}"</arg>
<arg>"unenforced"</arg>
<arg>Intra EPG Isolation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.234" endtime="20190524 10:06:47.234"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.233" endtime="20190524 10:06:47.234"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvAEPg.attributes.floodOnEncap}"</arg>
<arg>"disabled"</arg>
<arg>Flood on Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvAEPg.attributes.floodOnEncap}"</arg>
<arg>"disabled"</arg>
<arg>Flood on Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.238" endtime="20190524 10:06:47.238"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.236" endtime="20190524 10:06:47.238"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsbd</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.240" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsbd</msg>
<status status="PASS" starttime="20190524 10:06:47.240" endtime="20190524 10:06:47.240"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.241" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.242" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsbd.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.259" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsBd":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/ap-app1/epg-epg1/rsbd","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:51.726+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"fvBD","tContextDn":"","tDn":"uni/tn-tenant1/BD-bd1","tRn":"BD-bd1","tType":"name","tnFvBDName":"bd1","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.262" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c2d6a0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.241" endtime="20190524 10:06:47.262"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.264" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.264" endtime="20190524 10:06:47.264"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.266" endtime="20190524 10:06:47.266"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fvRsBd.attributes.tnFvBDName}</arg>
<arg>bd1</arg>
<arg>Associated Bridge Domain not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fvRsBd.attributes.tnFvBDName}</arg>
<arg>bd1</arg>
<arg>Associated Bridge Domain not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.269" endtime="20190524 10:06:47.270"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.268" endtime="20190524 10:06:47.270"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdppPol</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.271" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdppPol</msg>
<status status="PASS" starttime="20190524 10:06:47.271" endtime="20190524 10:06:47.271"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.273" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.273" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdppPol.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.291" level="INFO">Request returned with status code 200 and text "{"totalCount":"0","imdata":[]}"</msg>
<msg timestamp="20190524 10:06:47.292" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c18cc0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.273" endtime="20190524 10:06:47.292"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.294" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.293" endtime="20190524 10:06:47.294"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>0</arg>
<arg>Data-Plane Policer not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>0</arg>
<arg>Data-Plane Policer not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.297" endtime="20190524 10:06:47.298"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.296" endtime="20190524 10:06:47.298"></status>
</kw>
<doc>Verifies that ACI EPG 'epg1' under tenant 'tenant1' are configured with the expected parameters
- Tenant Name: tenant1
- Application Profile Name: app1
- EPG Name: epg1
- Associated to BD: bd1
- QoS Class: unspecified
- Intra EPG Isolation: unenforced
- Preferred Group Member: exclude
- Flood on Encapsulation: disabled</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-epg</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.193" endtime="20190524 10:06:47.298" critical="yes"></status>
</test>
<test id="s1-t108" name="Checking ACI EPG for Faults - Tenant tenant1, App Profile app1, EPG epg1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.301" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:47.301" endtime="20190524 10:06:47.301"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.303" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.303" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.321" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/ap-app1/epg-epg1/fltCnts","maj":"5","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.324" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c30eb8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.302" endtime="20190524 10:06:47.324"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.325" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.325" endtime="20190524 10:06:47.325"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.327" endtime="20190524 10:06:47.327"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:47.329" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:47.328" endtime="20190524 10:06:47.329"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:47.331" level="INFO">${major_count} = 5</msg>
<status status="PASS" starttime="20190524 10:06:47.331" endtime="20190524 10:06:47.331"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:47.333" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:47.332" endtime="20190524 10:06:47.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"EPG has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.334" endtime="20190524 10:06:47.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 5</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"EPG has ${major_count} major faults (passing threshold 5)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.336" endtime="20190524 10:06:47.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"EPG has ${minor_count} minor faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.338" endtime="20190524 10:06:47.339"></status>
</kw>
<doc>Verifies ACI faults for EPG 'epg1' under tenant 'tenant1'
- Tenant Name: tenant1
- Application Profile Name: app1
- EPG Name: epg1
- Critical fault count &lt;= 0
- Major fault count &lt;= 5
- Minor fault count &lt;= 2</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-epg</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.299" endtime="20190524 10:06:47.339" critical="yes"></status>
</test>
<test id="s1-t109" name="Verify ACI EPG Domain Configuration - Tenant tenant1, App Profile app1, EPG epg1, Domain baremetal">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/phys-baremetal]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.344" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/phys-baremetal]</msg>
<status status="PASS" starttime="20190524 10:06:47.342" endtime="20190524 10:06:47.344"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=vmmSecP</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:47.346" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=vmmSecP</msg>
<status status="PASS" starttime="20190524 10:06:47.345" endtime="20190524 10:06:47.346"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.348" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.348" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/phys-baremetal].json?rsp-subtree=full&amp;rsp-subtree-class=vmmSecP
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.366" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsDomAtt":{"attributes":{"annotation":"","childAction":"","classPref":"encap","configIssues":"","delimiter":"","dn":"uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/phys-baremetal]","encap":"unknown","encapMode":"auto","epgCos":"Cos0","epgCosPref":"disabled","extMngdBy":"","forceResolve":"yes","instrImedcy":"immediate","lcOwn":"local","modTs":"2019-05-23T00:35:51.974+00:00","mode":"default","monPolDn":"uni/tn-common/monepg-default","netflowDir":"both","netflowPref":"disabled","primaryEncap":"unknown","primaryEncapInner":"unknown","rType":"mo","resImedcy":"immediate","secondaryEncapInner":"unknown","state":"formed","stateQual":"none","status":"","switchingMode":"native","tCl":"physDomP","tDn":"uni/phys-baremetal","tType":"mo","triggerSt":"not_triggerable","txId":"17293822569102731900","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.369" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd25c0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.347" endtime="20190524 10:06:47.369"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.370" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.370" endtime="20190524 10:06:47.370"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Domain not associated with EPG</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.371" endtime="20190524 10:06:47.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.tDn}"</arg>
<arg>"uni/phys-baremetal"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.373" endtime="20190524 10:06:47.374"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.attributes.instrImedcy}"</arg>
<arg>"immediate"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.instrImedcy}"</arg>
<arg>"immediate"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.376" endtime="20190524 10:06:47.377"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.375" endtime="20190524 10:06:47.377"></status>
</kw>
<doc>Verifies that ACI EPG Domain association for 'epg1' under tenant 'tenant1' are configured with the expected parameters
- Tenant Name: tenant1
- Application Profile Name: app1
- EPG name: epg1
- Domain Name: baremetal
- Domain Type: physical
- Deployment Immediacy: immediate
- Resolution Immediacy: lazy</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-epg</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.340" endtime="20190524 10:06:47.377" critical="yes"></status>
</test>
<test id="s1-t110" name="Verify ACI EPG Domain Configuration - Tenant tenant1, App Profile app1, EPG epg1, Domain baremetal2">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/phys-baremetal2]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.380" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/phys-baremetal2]</msg>
<status status="PASS" starttime="20190524 10:06:47.380" endtime="20190524 10:06:47.380"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=vmmSecP</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:47.381" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=vmmSecP</msg>
<status status="PASS" starttime="20190524 10:06:47.381" endtime="20190524 10:06:47.381"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.383" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.383" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/phys-baremetal2].json?rsp-subtree=full&amp;rsp-subtree-class=vmmSecP
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.404" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsDomAtt":{"attributes":{"annotation":"","childAction":"","classPref":"encap","configIssues":"","delimiter":"","dn":"uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/phys-baremetal2]","encap":"unknown","encapMode":"auto","epgCos":"Cos0","epgCosPref":"disabled","extMngdBy":"","forceResolve":"yes","instrImedcy":"immediate","lcOwn":"local","modTs":"2019-05-23T00:35:52.213+00:00","mode":"default","monPolDn":"uni/tn-common/monepg-default","netflowDir":"both","netflowPref":"disabled","primaryEncap":"unknown","primaryEncapInner":"unknown","rType":"mo","resImedcy":"immediate","secondaryEncapInner":"unknown","state":"formed","stateQual":"none","status":"","switchingMode":"native","tCl":"physDomP","tDn":"uni/phys-baremetal2","tType":"mo","triggerSt":"not_triggerable","txId":"17293822569102731906","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.407" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c12630&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.382" endtime="20190524 10:06:47.408"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.409" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.409" endtime="20190524 10:06:47.409"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Domain not associated with EPG</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.411" endtime="20190524 10:06:47.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.tDn}"</arg>
<arg>"uni/phys-baremetal2"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.412" endtime="20190524 10:06:47.413"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.attributes.instrImedcy}"</arg>
<arg>"immediate"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.instrImedcy}"</arg>
<arg>"immediate"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.416" endtime="20190524 10:06:47.416"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.414" endtime="20190524 10:06:47.416"></status>
</kw>
<doc>Verifies that ACI EPG Domain association for 'epg1' under tenant 'tenant1' are configured with the expected parameters
- Tenant Name: tenant1
- Application Profile Name: app1
- EPG name: epg1
- Domain Name: baremetal2
- Domain Type: physical
- Deployment Immediacy: immediate
- Resolution Immediacy: lazy</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-epg</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.378" endtime="20190524 10:06:47.417" critical="yes"></status>
</test>
<test id="s1-t111" name="Verify ACI EPG Domain Configuration - Tenant tenant1, App Profile app1, EPG epg1, Domain vmware_aar2-lab">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/vmmp-VMware/dom-vmware_aar2-lab]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.419" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/vmmp-VMware/dom-vmware_aar2-lab]</msg>
<status status="PASS" starttime="20190524 10:06:47.419" endtime="20190524 10:06:47.419"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=vmmSecP</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:47.421" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=vmmSecP</msg>
<status status="PASS" starttime="20190524 10:06:47.421" endtime="20190524 10:06:47.421"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.422" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.423" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/vmmp-VMware/dom-vmware_aar2-lab].json?rsp-subtree=full&amp;rsp-subtree-class=vmmSecP
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.441" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsDomAtt":{"attributes":{"annotation":"","childAction":"","classPref":"encap","configIssues":"","delimiter":"","dn":"uni/tn-tenant1/ap-app1/epg-epg1/rsdomAtt-[uni/vmmp-VMware/dom-vmware_aar2-lab]","encap":"unknown","encapMode":"auto","epgCos":"Cos0","epgCosPref":"disabled","extMngdBy":"","forceResolve":"yes","instrImedcy":"lazy","lcOwn":"local","modTs":"2019-05-23T00:35:52.452+00:00","mode":"default","monPolDn":"uni/tn-common/monepg-default","netflowDir":"both","netflowPref":"disabled","primaryEncap":"unknown","primaryEncapInner":"unknown","rType":"mo","resImedcy":"immediate","secondaryEncapInner":"unknown","state":"formed","stateQual":"none","status":"","switchingMode":"native","tCl":"vmmDomP","tDn":"uni/vmmp-VMware/dom-vmware_aar2-lab","tType":"mo","triggerSt":"triggerable","txId":"17293822569102731912","uid":"15374"},"children":[{"vmmSecP":{"attributes":{"allowPromiscuous":"reject","annotation":"","childAction":"","descr":"","extMngdBy":"","forgedTransmits":"reject","lcOwn":"local","macChanges":"reject","modTs":"2019-05-23T00:35:52.441+00:00","name":"","nameAlias":"","ownerKey":"","ownerTag":"","rn":"sec","status":"","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:47.446" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c30fd0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.422" endtime="20190524 10:06:47.446"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.448" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.447" endtime="20190524 10:06:47.448"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Domain not associated with EPG</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.449" endtime="20190524 10:06:47.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.tDn}"</arg>
<arg>"uni/vmmp-VMware/dom-vmware_aar2-lab"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.451" endtime="20190524 10:06:47.452"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.attributes.instrImedcy}"</arg>
<arg>"lazy"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.instrImedcy}"</arg>
<arg>"lazy"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.455" endtime="20190524 10:06:47.456"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.454" endtime="20190524 10:06:47.456"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.attributes.resImedcy}"</arg>
<arg>"immediate"</arg>
<arg>Resolution Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.resImedcy}"</arg>
<arg>"immediate"</arg>
<arg>Resolution Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.459" endtime="20190524 10:06:47.459"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.458" endtime="20190524 10:06:47.460"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.attributes.switchingMode}"</arg>
<arg>"native"</arg>
<arg>DVS switching mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.switchingMode}"</arg>
<arg>"native"</arg>
<arg>DVS switching mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.464" endtime="20190524 10:06:47.466"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.461" endtime="20190524 10:06:47.466"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.attributes.netflowPref}"</arg>
<arg>"disabled"</arg>
<arg>DVS netflow preference not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.netflowPref}"</arg>
<arg>"disabled"</arg>
<arg>DVS netflow preference not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.470" endtime="20190524 10:06:47.471"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.468" endtime="20190524 10:06:47.471"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.attributes.encap}"</arg>
<arg>"unknown"</arg>
<arg>DVS static encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.attributes.encap}"</arg>
<arg>"unknown"</arg>
<arg>DVS static encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.474" endtime="20190524 10:06:47.475"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.473" endtime="20190524 10:06:47.475"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.children[0].vmmSecP.attributes.allowPromiscuous}"</arg>
<arg>"reject"</arg>
<arg>DVS allow promiscuous not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.children[0].vmmSecP.attributes.allowPromiscuous}"</arg>
<arg>"reject"</arg>
<arg>DVS allow promiscuous not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.478" endtime="20190524 10:06:47.478"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.476" endtime="20190524 10:06:47.479"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.children[0].vmmSecP.attributes.forgedTransmits}"</arg>
<arg>"reject"</arg>
<arg>DVS forged transmits not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.children[0].vmmSecP.attributes.forgedTransmits}"</arg>
<arg>"reject"</arg>
<arg>DVS forged transmits not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.482" endtime="20190524 10:06:47.483"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.480" endtime="20190524 10:06:47.483"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsDomAtt.children[0].vmmSecP.attributes.macChanges}"</arg>
<arg>"reject"</arg>
<arg>DVS mac changes not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsDomAtt.children[0].vmmSecP.attributes.macChanges}"</arg>
<arg>"reject"</arg>
<arg>DVS mac changes not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.486" endtime="20190524 10:06:47.487"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.484" endtime="20190524 10:06:47.487"></status>
</kw>
<doc>Verifies that ACI EPG Domain association for 'epg1' under tenant 'tenant1' are configured with the expected parameters
- Tenant Name: tenant1
- Application Profile Name: app1
- EPG name: epg1
- Domain Name: vmware_aar2-lab
- Domain Type: vmm_vmware
- Deployment Immediacy: lazy
- Resolution Immediacy: immediate
- DVS Switching Mode: native
- DVS Netflow Preference: disabled
- DVS Static Encapsulation: unknown
- DVS Allow Promiscuous: reject
- DVS Forge Transmits: reject
- DVS Mac Changes: reject</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-epg</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.417" endtime="20190524 10:06:47.487" critical="yes"></status>
</test>
<test id="s1-t112" name="Verify ACI EPG Binding Configuration - Tenant tenant1, App Profile app1, EPG epg1, Node 201, Interface eth1/1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rspathAtt-[topology/pod-1/paths-201/pathep-[eth1/1]]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.493" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rspathAtt-[topology/pod-1/paths-201/pathep-[eth1/1]]</msg>
<status status="PASS" starttime="20190524 10:06:47.491" endtime="20190524 10:06:47.493"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.496" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.496" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rspathAtt-[topology/pod-1/paths-201/pathep-[eth1/1]].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.519" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsPathAtt":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/ap-app1/epg-epg1/rspathAtt-[topology/pod-1/paths-201/pathep-[eth1/1]]","encap":"vlan-100","extMngdBy":"","forceResolve":"yes","instrImedcy":"lazy","lcC":"","lcOwn":"local","modTs":"2019-05-23T00:35:52.689+00:00","mode":"regular","monPolDn":"uni/tn-common/monepg-default","primaryEncap":"unknown","rType":"mo","state":"unformed","stateQual":"none","status":"","tCl":"fabricPathEp","tDn":"topology/pod-1/paths-201/pathep-[eth1/1]","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.521" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b98e48&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.495" endtime="20190524 10:06:47.521"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.523" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.522" endtime="20190524 10:06:47.523"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface not having a static binding for the EPG</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.524" endtime="20190524 10:06:47.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsPathAtt.attributes.tDn}"</arg>
<arg>"topology/pod-1/paths-201/pathep-[eth1/1]"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.527" endtime="20190524 10:06:47.529"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsPathAtt.attributes.mode}"</arg>
<arg>"regular"</arg>
<arg>Binding Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsPathAtt.attributes.mode}"</arg>
<arg>"regular"</arg>
<arg>Binding Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.532" endtime="20190524 10:06:47.533"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.530" endtime="20190524 10:06:47.533"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsPathAtt.attributes.instrImedcy}"</arg>
<arg>"lazy"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsPathAtt.attributes.instrImedcy}"</arg>
<arg>"lazy"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.536" endtime="20190524 10:06:47.536"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.534" endtime="20190524 10:06:47.536"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsPathAtt.attributes.encap}"</arg>
<arg>"vlan-100"</arg>
<arg>VLAN Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsPathAtt.attributes.encap}"</arg>
<arg>"vlan-100"</arg>
<arg>VLAN Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.539" endtime="20190524 10:06:47.539"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.538" endtime="20190524 10:06:47.539"></status>
</kw>
<doc>Verifies that ACI EPG Binding for 'epg1' are configured under tenant 'tenant1' are configured with the expected parameters
with the parameters defined in the NIP
- Tenant Name: tenant1
- Application Profile Name: app1
- EPG Name: epg1
- POD ID: 1
- Node: 201
- Interface: eth1/1
- Encapsulation: vlan-100
- Deployment Immediacy: lazy</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-epg</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.488" endtime="20190524 10:06:47.540" critical="yes"></status>
</test>
<test id="s1-t113" name="Verify ACI EPG Binding Configuration - Tenant tenant1, App Profile app1, EPG epg1, Interface Policy Group vPC_Port">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rspathAtt-[topology/pod-1/protpaths-201-202/pathep-[vPC_Port]]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.542" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rspathAtt-[topology/pod-1/protpaths-201-202/pathep-[vPC_Port]]</msg>
<status status="PASS" starttime="20190524 10:06:47.542" endtime="20190524 10:06:47.542"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.544" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.544" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rspathAtt-[topology/pod-1/protpaths-201-202/pathep-[vPC_Port]].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.564" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsPathAtt":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/ap-app1/epg-epg1/rspathAtt-[topology/pod-1/protpaths-201-202/pathep-[vPC_Port]]","encap":"vlan-101","extMngdBy":"","forceResolve":"yes","instrImedcy":"lazy","lcC":"","lcOwn":"local","modTs":"2019-05-23T00:35:52.922+00:00","mode":"regular","monPolDn":"uni/tn-common/monepg-default","primaryEncap":"unknown","rType":"mo","state":"unformed","stateQual":"none","status":"","tCl":"fabricPathEp","tDn":"topology/pod-1/protpaths-201-202/pathep-[vPC_Port]","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.567" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb0358&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.544" endtime="20190524 10:06:47.567"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.569" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.569" endtime="20190524 10:06:47.569"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Interface not having a static binding for the EPG</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.570" endtime="20190524 10:06:47.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsPathAtt.attributes.tDn}"</arg>
<arg>"topology/pod-1/protpaths-201-202/pathep-[vPC_Port]"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.572" endtime="20190524 10:06:47.573"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsPathAtt.attributes.mode}"</arg>
<arg>"regular"</arg>
<arg>Binding Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsPathAtt.attributes.mode}"</arg>
<arg>"regular"</arg>
<arg>Binding Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.576" endtime="20190524 10:06:47.577"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.575" endtime="20190524 10:06:47.577"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsPathAtt.attributes.instrImedcy}"</arg>
<arg>"lazy"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsPathAtt.attributes.instrImedcy}"</arg>
<arg>"lazy"</arg>
<arg>Deployment Immediacy not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.580" endtime="20190524 10:06:47.581"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.579" endtime="20190524 10:06:47.581"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsPathAtt.attributes.encap}"</arg>
<arg>"vlan-101"</arg>
<arg>VLAN Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsPathAtt.attributes.encap}"</arg>
<arg>"vlan-101"</arg>
<arg>VLAN Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.583" endtime="20190524 10:06:47.584"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.582" endtime="20190524 10:06:47.584"></status>
</kw>
<doc>Verifies that ACI EPG Binding for 'epg1' are configured under tenant 'tenant1' are configured with the expected parameters
with the parameters defined in the NIP
- Tenant Name: tenant1
- Application Profile Name: app1
- EPG Name: epg1
- POD ID: 1
- Node (left): 201
- Node (right): 202
- Interface Policy Group: vPC_Port
- Encapsulation: vlan-101
- Deployment Immediacy: lazy</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-epg</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.540" endtime="20190524 10:06:47.584" critical="yes"></status>
</test>
<test id="s1-t114" name="Verify ACI L3Out Configuration - Tenant tenant1, L3Out L3OUT-main_INT">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.588" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT</msg>
<status status="PASS" starttime="20190524 10:06:47.588" endtime="20190524 10:06:47.588"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.590" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.590" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.607" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extOut":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT","enforceRtctrl":"export","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:53.212+00:00","monPolDn":"uni/tn-common/monepg-default","name":"L3OUT-main_INT","nameAlias":"","ownerKey":"","ownerTag":"","status":"","targetDscp":"unspecified","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.610" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c304e0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.589" endtime="20190524 10:06:47.610"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.611" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.611" endtime="20190524 10:06:47.612"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>L3Out does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.613" endtime="20190524 10:06:47.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extOut.attributes.name}"</arg>
<arg>"L3OUT-main_INT"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.615" endtime="20190524 10:06:47.616"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extOut.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extOut.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.619" endtime="20190524 10:06:47.620"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.617" endtime="20190524 10:06:47.620"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/rsectx</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.621" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/rsectx</msg>
<status status="PASS" starttime="20190524 10:06:47.621" endtime="20190524 10:06:47.621"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.623" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.623" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/rsectx.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.639" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extRsEctx":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/rsectx","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:53.212+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"fvCtx","tContextDn":"","tDn":"uni/tn-tenant1/ctx-main","tRn":"ctx-main","tType":"name","tnFvCtxName":"main","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.642" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bcc860&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.622" endtime="20190524 10:06:47.642"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.644" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.643" endtime="20190524 10:06:47.644"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving VRF configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving VRF configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.647" endtime="20190524 10:06:47.647"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.645" endtime="20190524 10:06:47.647"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extRsEctx.attributes.tnFvCtxName}"</arg>
<arg>"main"</arg>
<arg>VRF Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extRsEctx.attributes.tnFvCtxName}"</arg>
<arg>"main"</arg>
<arg>VRF Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.649" endtime="20190524 10:06:47.650"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.648" endtime="20190524 10:06:47.650"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/rsl3DomAtt</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.652" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/rsl3DomAtt</msg>
<status status="PASS" starttime="20190524 10:06:47.651" endtime="20190524 10:06:47.652"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.653" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.653" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/rsl3DomAtt.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.671" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extRsL3DomAtt":{"attributes":{"annotation":"","childAction":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/rsl3DomAtt","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:53.235+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"l3extDomP","tDn":"uni/l3dom-l3out_dom","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.673" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bbb780&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.653" endtime="20190524 10:06:47.673"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.675" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.675" endtime="20190524 10:06:47.676"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving Domain configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving Domain configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.678" endtime="20190524 10:06:47.679"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.677" endtime="20190524 10:06:47.679"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extRsL3DomAtt.attributes.tDn}"</arg>
<arg>"uni/l3dom-l3out_dom"</arg>
<arg>Domain Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extRsL3DomAtt.attributes.tDn}"</arg>
<arg>"uni/l3dom-l3out_dom"</arg>
<arg>Domain Association not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.682" endtime="20190524 10:06:47.683"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.680" endtime="20190524 10:06:47.683"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/ospfExtP</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.685" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/ospfExtP</msg>
<status status="PASS" starttime="20190524 10:06:47.684" endtime="20190524 10:06:47.685"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.687" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.687" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/ospfExtP.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.705" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"ospfExtP":{"attributes":{"annotation":"","areaCost":"10","areaCtrl":"redistribute,summary","areaId":"0.0.0.1","areaType":"regular","childAction":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/ospfExtP","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:53.212+00:00","monPolDn":"uni/tn-common/monepg-default","multipodInternal":"no","name":"ospf","nameAlias":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.708" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb4ac8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.687" endtime="20190524 10:06:47.708"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.709" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.709" endtime="20190524 10:06:47.709"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>OSPF not enabled</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>OSPF not enabled</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.712" endtime="20190524 10:06:47.713"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.711" endtime="20190524 10:06:47.713"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].ospfExtP.attributes.areaId}"</arg>
<arg>"0.0.0.1"</arg>
<arg>OSPF Area ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].ospfExtP.attributes.areaId}"</arg>
<arg>"0.0.0.1"</arg>
<arg>OSPF Area ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.716" endtime="20190524 10:06:47.716"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.715" endtime="20190524 10:06:47.716"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].ospfExtP.attributes.areaType}"</arg>
<arg>"regular"</arg>
<arg>OSPF Area Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].ospfExtP.attributes.areaType}"</arg>
<arg>"regular"</arg>
<arg>OSPF Area Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.719" endtime="20190524 10:06:47.719"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.718" endtime="20190524 10:06:47.720"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/bgpExtP</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.721" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/bgpExtP</msg>
<status status="PASS" starttime="20190524 10:06:47.721" endtime="20190524 10:06:47.721"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.723" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.723" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/bgpExtP.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.741" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"bgpExtP":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/bgpExtP","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:53.212+00:00","monPolDn":"uni/tn-common/monepg-default","name":"bgp","nameAlias":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.744" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c308d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.723" endtime="20190524 10:06:47.744"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.746" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.745" endtime="20190524 10:06:47.746"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BGP not enabled</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>BGP not enabled</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.748" endtime="20190524 10:06:47.749"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.747" endtime="20190524 10:06:47.749"></status>
</kw>
<doc>Verifies that ACI L3Out 'L3OUT-main_INT' under tenant 'tenant1' are configured with the expected parameters
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- Name Alias:
- VRF Association: main
- OSPF Enabled: yes
- OSPF Area: 1
- OSPF Area Type: regular
- BGP Enabled: yes
- Consumer Label:
- Provider Label:</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.585" endtime="20190524 10:06:47.749" critical="yes"></status>
</test>
<test id="s1-t115" name="Checking ACI L3Out for Faults - Tenant tenant1, L3Out L3OUT-main_INT">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.752" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:47.752" endtime="20190524 10:06:47.752"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.754" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.754" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.771" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/out-L3OUT-main_INT/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"1","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.774" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bcc6a0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.753" endtime="20190524 10:06:47.774"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.775" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.775" endtime="20190524 10:06:47.776"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.777" endtime="20190524 10:06:47.777"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:47.779" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:47.778" endtime="20190524 10:06:47.779"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:47.780" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:47.780" endtime="20190524 10:06:47.780"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:47.782" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:47.782" endtime="20190524 10:06:47.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"L3Out has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.784" endtime="20190524 10:06:47.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"L3Out has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.785" endtime="20190524 10:06:47.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"L3Out has ${minor_count} minor faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.787" endtime="20190524 10:06:47.788"></status>
</kw>
<doc>Verifies ACI faults for L3Out 'L3OUT-main_INT' under tenant 'tenant1'
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 2</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.750" endtime="20190524 10:06:47.788" critical="yes"></status>
</test>
<test id="s1-t116" name="Verify ACI L3Out Node Profile Configuration - Tenant tenant1, L3Out L3OUT-main_INT, Node Profile leaf1, Node pod-1/node-201">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.793" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1</msg>
<status status="PASS" starttime="20190524 10:06:47.792" endtime="20190524 10:06:47.793"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.794" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.794" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.812" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extLNodeP":{"attributes":{"annotation":"","childAction":"","configIssues":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:53.492+00:00","monPolDn":"uni/tn-common/monepg-default","name":"leaf1","nameAlias":"","ownerKey":"","ownerTag":"","status":"","tag":"yellow-green","targetDscp":"unspecified","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.816" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bba7f0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.794" endtime="20190524 10:06:47.816"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.818" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.817" endtime="20190524 10:06:47.818"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>L3Out Node Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.819" endtime="20190524 10:06:47.820"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLNodeP.attributes.name}"</arg>
<arg>"leaf1"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.822" endtime="20190524 10:06:47.823"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLNodeP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLNodeP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.825" endtime="20190524 10:06:47.826"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.824" endtime="20190524 10:06:47.826"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLNodeP.attributes.targetDscp}"</arg>
<arg>"unspecified"</arg>
<arg>Target DSCP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLNodeP.attributes.targetDscp}"</arg>
<arg>"unspecified"</arg>
<arg>Target DSCP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.828" endtime="20190524 10:06:47.828"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.827" endtime="20190524 10:06:47.829"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/rsnodeL3OutAtt-[topology/pod-1/node-201]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.830" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/rsnodeL3OutAtt-[topology/pod-1/node-201]</msg>
<status status="PASS" starttime="20190524 10:06:47.830" endtime="20190524 10:06:47.830"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.832" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.832" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/rsnodeL3OutAtt-[topology/pod-1/node-201].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.853" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extRsNodeL3OutAtt":{"attributes":{"annotation":"","childAction":"","configIssues":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/rsnodeL3OutAtt-[topology/pod-1/node-201]","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:53.492+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","rtrId":"172.17.8.3","rtrIdLoopBack":"yes","state":"unformed","stateQual":"none","status":"","tCl":"fabricNode","tDn":"topology/pod-1/node-201","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.856" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bbb7f0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.832" endtime="20190524 10:06:47.856"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.859" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.858" endtime="20190524 10:06:47.859"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node not associated with Node Profile</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node not associated with Node Profile</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.862" endtime="20190524 10:06:47.863"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.860" endtime="20190524 10:06:47.863"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extRsNodeL3OutAtt.attributes.rtrId}"</arg>
<arg>"172.17.8.3"</arg>
<arg>Router ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extRsNodeL3OutAtt.attributes.rtrId}"</arg>
<arg>"172.17.8.3"</arg>
<arg>Router ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.866" endtime="20190524 10:06:47.867"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.865" endtime="20190524 10:06:47.867"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extRsNodeL3OutAtt.attributes.rtrIdLoopBack}"</arg>
<arg>"yes"</arg>
<arg>Use Router ID as Loopback not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extRsNodeL3OutAtt.attributes.rtrIdLoopBack}"</arg>
<arg>"yes"</arg>
<arg>Use Router ID as Loopback not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.869" endtime="20190524 10:06:47.870"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.868" endtime="20190524 10:06:47.870"></status>
</kw>
<doc>Verifies that ACI L3Out Node Profile 'leaf1' under tenant 'tenant1', L3Out 'L3OUT-main_INT' are configured with the expected parameters
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- Node Profile Name: leaf1
- Name Alias:
- Node: pod-1/node-201
- Router ID: 172.17.8.3
- Use Router ID as Loopback: yes
- Multi-POD Enable: no
- Golf Enable: no
- Target DSCP: unspecified</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.790" endtime="20190524 10:06:47.870" critical="yes"></status>
</test>
<test id="s1-t117" name="Verify ACI L3Out Node Profile Configuration - Tenant tenant1, L3Out L3OUT-main_INT, Node Profile leaf1, Node pod-1/node-202">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.873" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1</msg>
<status status="PASS" starttime="20190524 10:06:47.872" endtime="20190524 10:06:47.873"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.874" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.874" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.893" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extLNodeP":{"attributes":{"annotation":"","childAction":"","configIssues":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:53.492+00:00","monPolDn":"uni/tn-common/monepg-default","name":"leaf1","nameAlias":"","ownerKey":"","ownerTag":"","status":"","tag":"yellow-green","targetDscp":"unspecified","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.896" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b91400&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.874" endtime="20190524 10:06:47.896"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.899" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.898" endtime="20190524 10:06:47.899"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>L3Out Node Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.900" endtime="20190524 10:06:47.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLNodeP.attributes.name}"</arg>
<arg>"leaf1"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.902" endtime="20190524 10:06:47.902"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLNodeP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLNodeP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.905" endtime="20190524 10:06:47.906"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.904" endtime="20190524 10:06:47.906"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLNodeP.attributes.targetDscp}"</arg>
<arg>"unspecified"</arg>
<arg>Target DSCP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLNodeP.attributes.targetDscp}"</arg>
<arg>"unspecified"</arg>
<arg>Target DSCP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.908" endtime="20190524 10:06:47.910"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.907" endtime="20190524 10:06:47.910"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/rsnodeL3OutAtt-[topology/pod-1/node-202]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.911" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/rsnodeL3OutAtt-[topology/pod-1/node-202]</msg>
<status status="PASS" starttime="20190524 10:06:47.911" endtime="20190524 10:06:47.911"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.913" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.913" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/rsnodeL3OutAtt-[topology/pod-1/node-202].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.929" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extRsNodeL3OutAtt":{"attributes":{"annotation":"","childAction":"","configIssues":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/rsnodeL3OutAtt-[topology/pod-1/node-202]","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:53.740+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","rtrId":"172.17.8.4","rtrIdLoopBack":"yes","state":"unformed","stateQual":"none","status":"","tCl":"fabricNode","tDn":"topology/pod-1/node-202","tType":"mo","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.933" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bded68&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.912" endtime="20190524 10:06:47.933"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.935" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.934" endtime="20190524 10:06:47.935"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node not associated with Node Profile</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node not associated with Node Profile</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.937" endtime="20190524 10:06:47.938"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.936" endtime="20190524 10:06:47.938"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extRsNodeL3OutAtt.attributes.rtrId}"</arg>
<arg>"172.17.8.4"</arg>
<arg>Router ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extRsNodeL3OutAtt.attributes.rtrId}"</arg>
<arg>"172.17.8.4"</arg>
<arg>Router ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.941" endtime="20190524 10:06:47.942"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.940" endtime="20190524 10:06:47.942"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extRsNodeL3OutAtt.attributes.rtrIdLoopBack}"</arg>
<arg>"yes"</arg>
<arg>Use Router ID as Loopback not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extRsNodeL3OutAtt.attributes.rtrIdLoopBack}"</arg>
<arg>"yes"</arg>
<arg>Use Router ID as Loopback not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.944" endtime="20190524 10:06:47.945"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.943" endtime="20190524 10:06:47.945"></status>
</kw>
<doc>Verifies that ACI L3Out Node Profile 'leaf1' under tenant 'tenant1', L3Out 'L3OUT-main_INT' are configured with the expected parameters
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- Node Profile Name: leaf1
- Name Alias:
- Node: pod-1/node-202
- Router ID: 172.17.8.4
- Use Router ID as Loopback: yes
- Multi-POD Enable: no
- Golf Enable: no
- Target DSCP: unspecified</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.871" endtime="20190524 10:06:47.945" critical="yes"></status>
</test>
<test id="s1-t118" name="Verify ACI L3Out Node Level BGP Peer Configuration - Tenant tenant1, L3Out L3OUT-main_INT, Node Profile leaf1, Peer 10.1.1.3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.949" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]</msg>
<status status="PASS" starttime="20190524 10:06:47.949" endtime="20190524 10:06:47.949"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.951" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.951" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:47.967" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"bgpPeerP":{"attributes":{"addr":"10.1.1.3","allowedSelfAsCnt":"3","annotation":"","childAction":"","ctrl":"send-com,send-ext-com","descr":"10.1.1.3","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:53.982+00:00","monPolDn":"uni/tn-common/monepg-default","name":"peer-10.1.1.3","nameAlias":"","peerCtrl":"","privateASctrl":"","sessionT":"peer","status":"","ttl":"2","uid":"15374","weight":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:47.972" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bbb908&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.950" endtime="20190524 10:06:47.972"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:47.973" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.973" endtime="20190524 10:06:47.973"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>L3Out Node Level BGP Peer does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.975" endtime="20190524 10:06:47.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].bgpPeerP.attributes.addr}"</arg>
<arg>"10.1.1.3"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.976" endtime="20190524 10:06:47.977"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].bgpPeerP.attributes.descr}"</arg>
<arg>"10.1.1.3"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].bgpPeerP.attributes.descr}"</arg>
<arg>"10.1.1.3"</arg>
<arg>Description not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.979" endtime="20190524 10:06:47.979"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.978" endtime="20190524 10:06:47.979"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].bgpPeerP.attributes.ttl}"</arg>
<arg>"2"</arg>
<arg>TTL not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].bgpPeerP.attributes.ttl}"</arg>
<arg>"2"</arg>
<arg>TTL not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.983" endtime="20190524 10:06:47.983"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.981" endtime="20190524 10:06:47.983"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].bgpPeerP.attributes.ctrl}"</arg>
<arg>"send-com,send-ext-com"</arg>
<arg>BGP Controls not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].bgpPeerP.attributes.ctrl}"</arg>
<arg>"send-com,send-ext-com"</arg>
<arg>BGP Controls not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:47.986" endtime="20190524 10:06:47.987"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:47.985" endtime="20190524 10:06:47.987"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]/as</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:47.989" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]/as</msg>
<status status="PASS" starttime="20190524 10:06:47.988" endtime="20190524 10:06:47.989"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:47.990" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:47.990" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]/as.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.007" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"bgpAsP":{"attributes":{"annotation":"","asn":"65555","childAction":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]/as","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:53.982+00:00","monPolDn":"uni/tn-common/monepg-default","name":"remote_as","nameAlias":"","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.009" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb5f28&gt;</msg>
<status status="PASS" starttime="20190524 10:06:47.990" endtime="20190524 10:06:48.009"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.011" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.011" endtime="20190524 10:06:48.011"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].bgpAsP.attributes.asn}"</arg>
<arg>"65555"</arg>
<arg>Remote BGP AS not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].bgpAsP.attributes.asn}"</arg>
<arg>"65555"</arg>
<arg>Remote BGP AS not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.014" endtime="20190524 10:06:48.014"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.012" endtime="20190524 10:06:48.015"></status>
</kw>
<doc>Verifies that ACI L3Out Node Level BGP Peer '10.1.1.3' under tenant 'tenant1', L3Out 'L3OUT-main_INT', Node Profile 'leaf1' are configured with the expected parameters
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- Node Profile Name: leaf1
- BGP Peer: 10.1.1.3
- Description: 10.1.1.3
- Local BGP AS Number:
- Local AS Configuration: replace-as
- Remote BGP AS Number: 65555
- BGP Multihop TTL: 2
- BGP Controls: send-com,send-ext-com
- Golf / L3EVPN BGP Peer: no</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:47.946" endtime="20190524 10:06:48.015" critical="yes"></status>
</test>
<test id="s1-t119" name="Checking ACI L3Out Node Level BGP Peer for Faults - Tenant tenant1, L3Out L3OUT-main_INT, Node Profile leaf1, Peer 10.1.1.3">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.021" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:48.020" endtime="20190524 10:06:48.021"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.023" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.023" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.041" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/peerP-[10.1.1.3]/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.043" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b615c0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.022" endtime="20190524 10:06:48.044"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.048" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.046" endtime="20190524 10:06:48.048"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.052" endtime="20190524 10:06:48.053"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.055" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.055" endtime="20190524 10:06:48.055"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.057" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.057" endtime="20190524 10:06:48.058"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.059" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.059" endtime="20190524 10:06:48.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BGP Peer has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.060" endtime="20190524 10:06:48.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BGP Peer has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.062" endtime="20190524 10:06:48.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"BGP Peer has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.063" endtime="20190524 10:06:48.064"></status>
</kw>
<doc>Verifies ACI faults for L3Out Node Level BGP Peer '10.1.1.3' under tenant 'tenant1', L3Out 'L3OUT-main_INT', Node Profile 'leaf1'
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- Node Profile Name: leaf1
- BGP Peer: 10.1.1.3
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.016" endtime="20190524 10:06:48.064" critical="yes"></status>
</test>
<test id="s1-t120" name="Verify ACI L3Out Interface Profile Configuration - Tenant tenant1, L3Out L3OUT-main_INT, Node Profile leaf1, Interface Profile L3outInt-node1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/lifp-L3outInt-node1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.068" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/lifp-L3outInt-node1</msg>
<status status="PASS" starttime="20190524 10:06:48.068" endtime="20190524 10:06:48.068"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=l3extRsPathL3OutAtt</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:48.070" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=l3extRsPathL3OutAtt</msg>
<status status="PASS" starttime="20190524 10:06:48.069" endtime="20190524 10:06:48.070"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.072" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.072" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/lifp-L3outInt-node1.json?rsp-subtree=full&amp;rsp-subtree-class=l3extRsPathL3OutAtt
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.095" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extLIfP":{"attributes":{"addr":"0.0.0.0","annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/lifp-L3outInt-node1","encap":"unknown","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:54.256+00:00","monPolDn":"uni/tn-common/monepg-default","name":"L3outInt-node1","nameAlias":"","ownerKey":"","ownerTag":"","status":"","tag":"yellow-green","targetDscp":"unspecified","uid":"15374"},"children":[{"l3extRsPathL3OutAtt":{"attributes":{"addr":"0.0.0.0","annotation":"","autostate":"disabled","childAction":"","descr":"","encap":"vlan-200","encapScope":"local","extMngdBy":"","forceResolve":"yes","ifInstT":"ext-svi","ipv6Dad":"enabled","lcOwn":"local","llAddr":"::","mac":"00:22:BD:F8:19:FF","modTs":"2019-05-23T00:35:54.256+00:00","mode":"regular","monPolDn":"uni/tn-common/monepg-default","mtu":"inherit","rType":"mo","rn":"rspathL3OutAtt-[topology/pod-1/protpaths-201-202/pathep-[vPC_Port]]","state":"unformed","stateQual":"none","status":"","tCl":"fabricPathEp","tDn":"topology/pod-1/protpaths-201-202/pathep-[vPC_Port]","tType":"mo","targetDscp":"unspecified","uid":"15374"},"children":[{"l3extMember":{"attributes":{"addr":"10.1.1.2/24","annotation":"","childAction":"","descr":"","extMngdBy":"","ipv6Dad":"enabled","lcOwn":"local","llAddr":"::","modTs":"2019-05-23T00:35:54.256+00:00","monPolDn":"uni/tn-common/monepg-default","name":"side_b","nameAlias":"","rn":"mem-B","side":"B","status":"","uid":"15374"}}},{"l3extMember":{"attributes":{"addr":"10.1.1.1/24","annotation":"","childAction":"","descr":"","extMngdBy":"","ipv6Dad":"enabled","lcOwn":"local","llAddr":"::","modTs":"2019-05-23T00:35:54.256+00:00","monPolDn":"uni/tn-common/monepg-default","name":"side_a","nameAlias":"","rn":"mem-A","side":"A","status":"","uid":"15374"}}}]}}]}}]}"</msg>
<msg timestamp="20190524 10:06:48.102" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb5400&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.072" endtime="20190524 10:06:48.102"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.105" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.104" endtime="20190524 10:06:48.105"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>L3Out Interface Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.106" endtime="20190524 10:06:48.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.attributes.name}"</arg>
<arg>"L3outInt-node1"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.108" endtime="20190524 10:06:48.109"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.111" endtime="20190524 10:06:48.112"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.110" endtime="20190524 10:06:48.112"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.tDn}"</arg>
<arg>"topology/pod-1/protpaths-201-202/pathep-[vPC_Port]"</arg>
<arg>Interface Policy Group/Interface ID, Node(s), or POD not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.tDn}"</arg>
<arg>"topology/pod-1/protpaths-201-202/pathep-[vPC_Port]"</arg>
<arg>Interface Policy Group/Interface ID, Node(s), or POD not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.115" endtime="20190524 10:06:48.115"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.113" endtime="20190524 10:06:48.115"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.ifInstT}"</arg>
<arg>"ext-svi"</arg>
<arg>Interface Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.ifInstT}"</arg>
<arg>"ext-svi"</arg>
<arg>Interface Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.118" endtime="20190524 10:06:48.119"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.117" endtime="20190524 10:06:48.119"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.encap}"</arg>
<arg>"vlan-200"</arg>
<arg>Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.encap}"</arg>
<arg>"vlan-200"</arg>
<arg>Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.121" endtime="20190524 10:06:48.122"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.120" endtime="20190524 10:06:48.122"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.mode}"</arg>
<arg>"regular"</arg>
<arg>Interface Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.mode}"</arg>
<arg>"regular"</arg>
<arg>Interface Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.124" endtime="20190524 10:06:48.126"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.123" endtime="20190524 10:06:48.126"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.mtu}"</arg>
<arg>"inherit"</arg>
<arg>MTU not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.mtu}"</arg>
<arg>"inherit"</arg>
<arg>MTU not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.128" endtime="20190524 10:06:48.129"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.127" endtime="20190524 10:06:48.129"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.autostate}"</arg>
<arg>"disabled"</arg>
<arg>Autostate not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.autostate}"</arg>
<arg>"disabled"</arg>
<arg>Autostate not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.131" endtime="20190524 10:06:48.132"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.130" endtime="20190524 10:06:48.132"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.addr}"</arg>
<arg>"0.0.0.0"</arg>
<arg>'Global' IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.addr}"</arg>
<arg>"0.0.0.0"</arg>
<arg>'Global' IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.135" endtime="20190524 10:06:48.136"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.134" endtime="20190524 10:06:48.136"></status>
</kw>
<kw name="${member} IN [ @{return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.children} ]" type="for">
<kw name="${member} = X(l3extMember=X(attributes=X(addr='10.1.1.2/24', annotation='', childAction='', descr='', extMngdBy='', ipv6Dad='enabled', lcOwn='local', llAddr='::', modTs='2019-05-23T00:35:54.256+00:00', monPolDn='..." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${member.l3extMember.attributes.side}" == "A"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${member.l3extMember.attributes.addr}"</arg>
<arg>"10.1.1.1/24"</arg>
<arg>Side A IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.138" endtime="20190524 10:06:48.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${member.l3extMember.attributes.side}" == "B"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${member.l3extMember.attributes.addr}"</arg>
<arg>"10.1.1.2/24"</arg>
<arg>Side B IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${member.l3extMember.attributes.addr}"</arg>
<arg>"10.1.1.2/24"</arg>
<arg>Side B IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${member.l3extMember.attributes.addr}"</arg>
<arg>"10.1.1.2/24"</arg>
<arg>Side B IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.142" endtime="20190524 10:06:48.142"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.141" endtime="20190524 10:06:48.142"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.140" endtime="20190524 10:06:48.142"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.137" endtime="20190524 10:06:48.142"></status>
</kw>
<kw name="${member} = X(l3extMember=X(attributes=X(addr='10.1.1.1/24', annotation='', childAction='', descr='', extMngdBy='', ipv6Dad='enabled', lcOwn='local', llAddr='::', modTs='2019-05-23T00:35:54.256+00:00', monPolDn='..." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${member.l3extMember.attributes.side}" == "A"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${member.l3extMember.attributes.addr}"</arg>
<arg>"10.1.1.1/24"</arg>
<arg>Side A IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${member.l3extMember.attributes.addr}"</arg>
<arg>"10.1.1.1/24"</arg>
<arg>Side A IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${member.l3extMember.attributes.addr}"</arg>
<arg>"10.1.1.1/24"</arg>
<arg>Side A IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.146" endtime="20190524 10:06:48.146"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.144" endtime="20190524 10:06:48.146"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.143" endtime="20190524 10:06:48.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${member.l3extMember.attributes.side}" == "B"</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>"${member.l3extMember.attributes.addr}"</arg>
<arg>"10.1.1.2/24"</arg>
<arg>Side B IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.147" endtime="20190524 10:06:48.148"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.143" endtime="20190524 10:06:48.148"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.136" endtime="20190524 10:06:48.148"></status>
</kw>
<doc>Verifies that ACI L3Out Interface Profile 'L3outInt-node1' under tenant 'tenant1', L3Out 'L3OUT-main_INT', Node Profile 'leaf1' are configured with the expected parameters
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- Node Profile Name: leaf1
- Interface Profile Name: L3outInt-node1
- Name Alias:
- Interface Type: svi
- Interface Path Type: vPC
- POD: 1
- Node ID (side A): 201
- Node ID (side B: 202
- Interface Policy Group: vPC_Port
- Interface Type: svi
- Interface Mode: regular
- Encapsulation: vlan-200
- IP (side A): 10.1.1.1/24
- IP (side B): 10.1.1.2/24
- MTU: inherit</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.066" endtime="20190524 10:06:48.149" critical="yes"></status>
</test>
<test id="s1-t121" name="Verify ACI L3Out Interface Profile Configuration - Tenant tenant1, L3Out L3OUT-main_INT, Node Profile leaf1, Interface Profile L3outInt-node1-access">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/lifp-L3outInt-node1-access</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.154" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/lifp-L3outInt-node1-access</msg>
<status status="PASS" starttime="20190524 10:06:48.154" endtime="20190524 10:06:48.154"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>rsp-subtree=full&amp;rsp-subtree-class=l3extRsPathL3OutAtt</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:48.157" level="INFO">${filter} = rsp-subtree=full&amp;rsp-subtree-class=l3extRsPathL3OutAtt</msg>
<status status="PASS" starttime="20190524 10:06:48.156" endtime="20190524 10:06:48.157"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.159" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.159" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/lifp-L3outInt-node1-access.json?rsp-subtree=full&amp;rsp-subtree-class=l3extRsPathL3OutAtt
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.178" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extLIfP":{"attributes":{"addr":"0.0.0.0","annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/lnodep-leaf1/lifp-L3outInt-node1-access","encap":"unknown","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:54.526+00:00","monPolDn":"uni/tn-common/monepg-default","name":"L3outInt-node1-access","nameAlias":"","ownerKey":"","ownerTag":"","status":"","tag":"yellow-green","targetDscp":"unspecified","uid":"15374"},"children":[{"l3extRsPathL3OutAtt":{"attributes":{"addr":"11.1.1.1/24","annotation":"","autostate":"disabled","childAction":"","descr":"","encap":"vlan-200","encapScope":"local","extMngdBy":"","forceResolve":"yes","ifInstT":"sub-interface","ipv6Dad":"enabled","lcOwn":"local","llAddr":"::","mac":"00:22:BD:F8:19:FF","modTs":"2019-05-23T00:35:54.526+00:00","mode":"regular","monPolDn":"uni/tn-common/monepg-default","mtu":"inherit","rType":"mo","rn":"rspathL3OutAtt-[topology/pod-1/paths-201/pathep-[eth1/3]]","state":"unformed","stateQual":"none","status":"","tCl":"fabricPathEp","tDn":"topology/pod-1/paths-201/pathep-[eth1/3]","tType":"mo","targetDscp":"unspecified","uid":"15374"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:48.183" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be51d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.158" endtime="20190524 10:06:48.183"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.186" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.185" endtime="20190524 10:06:48.186"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>L3Out Interface Profile does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.187" endtime="20190524 10:06:48.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.attributes.name}"</arg>
<arg>"L3outInt-node1-access"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.189" endtime="20190524 10:06:48.190"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.192" endtime="20190524 10:06:48.193"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.191" endtime="20190524 10:06:48.193"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.tDn}"</arg>
<arg>"topology/pod-1/paths-201/pathep-[eth1/3]"</arg>
<arg>Interface Policy Group/Interface ID, Node(s), or POD not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.tDn}"</arg>
<arg>"topology/pod-1/paths-201/pathep-[eth1/3]"</arg>
<arg>Interface Policy Group/Interface ID, Node(s), or POD not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.195" endtime="20190524 10:06:48.196"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.194" endtime="20190524 10:06:48.196"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.ifInstT}"</arg>
<arg>"sub-interface"</arg>
<arg>Interface Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.ifInstT}"</arg>
<arg>"sub-interface"</arg>
<arg>Interface Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.198" endtime="20190524 10:06:48.199"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.197" endtime="20190524 10:06:48.199"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.encap}"</arg>
<arg>"vlan-200"</arg>
<arg>Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.encap}"</arg>
<arg>"vlan-200"</arg>
<arg>Encapsulation not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.202" endtime="20190524 10:06:48.203"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.201" endtime="20190524 10:06:48.203"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.mode}"</arg>
<arg>"regular"</arg>
<arg>Interface Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.mode}"</arg>
<arg>"regular"</arg>
<arg>Interface Mode not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.206" endtime="20190524 10:06:48.207"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.205" endtime="20190524 10:06:48.207"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.mtu}"</arg>
<arg>"inherit"</arg>
<arg>MTU not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.mtu}"</arg>
<arg>"inherit"</arg>
<arg>MTU not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.209" endtime="20190524 10:06:48.210"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.208" endtime="20190524 10:06:48.210"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.autostate}"</arg>
<arg>"disabled"</arg>
<arg>Autostate not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.autostate}"</arg>
<arg>"disabled"</arg>
<arg>Autostate not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.213" endtime="20190524 10:06:48.214"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.212" endtime="20190524 10:06:48.214"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.addr}"</arg>
<arg>"11.1.1.1/24"</arg>
<arg>IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extLIfP.children[0].l3extRsPathL3OutAtt.attributes.addr}"</arg>
<arg>"11.1.1.1/24"</arg>
<arg>IP Address not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.217" endtime="20190524 10:06:48.218"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.216" endtime="20190524 10:06:48.218"></status>
</kw>
<doc>Verifies that ACI L3Out Interface Profile 'L3outInt-node1-access' under tenant 'tenant1', L3Out 'L3OUT-main_INT', Node Profile 'leaf1' are configured with the expected parameters
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- Node Profile Name: leaf1
- Interface Profile Name: L3outInt-node1-access
- Name Alias:
- Interface Type: routed_sub
- Interface Path Type: Access
- POD: 1
- Node ID: 201
- Interface ID: eth1/3
- Interface Type: routed_sub
- Interface Mode: regular
- Encapsulation: vlan-200
- IP: 11.1.1.1/24
- MTU: inherit</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.151" endtime="20190524 10:06:48.218" critical="yes"></status>
</test>
<test id="s1-t122" name="Verify ACI L3Out External EPG Configuration - Tenant tenant1, L3Out L3OUT-main_INT, External EPG external">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.222" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external</msg>
<status status="PASS" starttime="20190524 10:06:48.222" endtime="20190524 10:06:48.223"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.224" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.224" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.243" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extInstP":{"attributes":{"annotation":"","childAction":"","configIssues":"","configSt":"applied","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/instP-external","exceptionTag":"","extMngdBy":"","floodOnEncap":"disabled","lcOwn":"local","matchT":"AtleastOne","mcast":"no","modTs":"2019-05-23T00:35:54.776+00:00","monPolDn":"uni/tn-common/monepg-default","name":"external","nameAlias":"","pcTag":"49155","prefGrMemb":"exclude","prio":"unspecified","scope":"2686976","status":"","targetDscp":"unspecified","triggerSt":"triggerable","txId":"17293822569102731949","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.246" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b612b0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.224" endtime="20190524 10:06:48.246"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.249" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.248" endtime="20190524 10:06:48.250"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>L3Out External EPG does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.252" endtime="20190524 10:06:48.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extInstP.attributes.name}"</arg>
<arg>"external"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.254" endtime="20190524 10:06:48.255"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extInstP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extInstP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.257" endtime="20190524 10:06:48.258"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.256" endtime="20190524 10:06:48.258"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extInstP.attributes.prefGrMemb}"</arg>
<arg>"exclude"</arg>
<arg>Preferred Group Member not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extInstP.attributes.prefGrMemb}"</arg>
<arg>"exclude"</arg>
<arg>Preferred Group Member not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.260" endtime="20190524 10:06:48.261"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.259" endtime="20190524 10:06:48.261"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extInstP.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extInstP.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.264" endtime="20190524 10:06:48.264"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.262" endtime="20190524 10:06:48.265"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extInstP.attributes.targetDscp}"</arg>
<arg>"unspecified"</arg>
<arg>Target DSCP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extInstP.attributes.targetDscp}"</arg>
<arg>"unspecified"</arg>
<arg>Target DSCP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.267" endtime="20190524 10:06:48.268"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.266" endtime="20190524 10:06:48.268"></status>
</kw>
<doc>Verifies that ACI L3Out External EPG 'external' under tenant 'tenant1', L3Out 'L3OUT-main_INT' are configured with the expected parameters
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- External EPG: external
- Name Alias:
- Prefered Group Member: exclude
- QoS Class: unspecified
- Target DSCP: unspecified</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.219" endtime="20190524 10:06:48.269" critical="yes"></status>
</test>
<test id="s1-t123" name="Checking ACI L3Out External EPG for Faults - Tenant tenant1, L3Out L3OUT-main_INT, External EPG external">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.272" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:48.272" endtime="20190524 10:06:48.273"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.274" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.275" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.292" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/out-L3OUT-main_INT/instP-external/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"1","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.295" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bba128&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.274" endtime="20190524 10:06:48.295"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.297" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.296" endtime="20190524 10:06:48.297"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.299" endtime="20190524 10:06:48.299"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.304" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.303" endtime="20190524 10:06:48.304"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.306" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.305" endtime="20190524 10:06:48.306"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.275" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.274" endtime="20190524 10:06:48.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"External EPG has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.276" endtime="20190524 10:06:48.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"External EPG has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.277" endtime="20190524 10:06:48.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 2</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"External EPG has ${minor_count} minor faults (passing threshold 2)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.279" endtime="20190524 10:06:48.279"></status>
</kw>
<doc>Verifies ACI faults for External EPG 'external' under tenant 'tenant1', L3Out 'L3OUT-main_INT'
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- External EPG: external
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 2</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-vrf</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.270" endtime="20190524 10:06:48.280" critical="yes"></status>
</test>
<test id="s1-t124" name="Verify ACI L3Out External EPG Subnet Configuration - Tenant tenant1, L3Out L3OUT-main_INT, External EPG external, Subnet 0.0.0.0/0, Route Control Profile 'daf'">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/extsubnet-[0.0.0.0/0]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.285" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/extsubnet-[0.0.0.0/0]</msg>
<status status="PASS" starttime="20190524 10:06:48.284" endtime="20190524 10:06:48.285"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.287" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.287" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/extsubnet-[0.0.0.0/0].json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.304" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extSubnet":{"attributes":{"aggregate":"","annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/out-L3OUT-main_INT/instP-external/extsubnet-[0.0.0.0/0]","extMngdBy":"","ip":"0.0.0.0/0","lcOwn":"local","modTs":"2019-05-23T00:35:55.004+00:00","monPolDn":"uni/tn-common/monepg-default","name":"","nameAlias":"","scope":"import-security","status":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.306" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8dabeb8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.287" endtime="20190524 10:06:48.306"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.309" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.309" endtime="20190524 10:06:48.309"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.308" endtime="20190524 10:06:48.309"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Subnet not associated with External EPG</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.311" endtime="20190524 10:06:48.311"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extSubnet.attributes.aggregate}"</arg>
<arg>""</arg>
<arg>Aggregate not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extSubnet.attributes.aggregate}"</arg>
<arg>""</arg>
<arg>Aggregate not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.314" endtime="20190524 10:06:48.315"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.312" endtime="20190524 10:06:48.315"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].l3extSubnet.attributes.scope}"</arg>
<arg>"import-security"</arg>
<arg>Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].l3extSubnet.attributes.scope}"</arg>
<arg>"import-security"</arg>
<arg>Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.317" endtime="20190524 10:06:48.318"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.316" endtime="20190524 10:06:48.318"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/extsubnet-[0.0.0.0/0]/rssubnetToProfile-[daf]-import</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.320" level="INFO">${uri} = /api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/extsubnet-[0.0.0.0/0]/rssubnetToProfile-[daf]-import</msg>
<status status="PASS" starttime="20190524 10:06:48.320" endtime="20190524 10:06:48.320"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.322" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.322" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/out-L3OUT-main_INT/instP-external/extsubnet-[0.0.0.0/0]/rssubnetToProfile-[daf]-import.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.339" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3extRsSubnetToProfile":{"attributes":{"annotation":"","childAction":"","direction":"import","dn":"uni/tn-tenant1/out-L3OUT-main_INT/instP-external/extsubnet-[0.0.0.0/0]/rssubnetToProfile-[daf]-import","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:55.004+00:00","monPolDn":"uni/tn-common/monepg-default","rType":"mo","state":"missing-target","stateQual":"none","status":"","tCl":"rtctrlProfile","tContextDn":"","tDn":"","tRn":"prof-daf","tType":"name","tnRtctrlProfileName":"daf","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.342" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bb5c18&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.322" endtime="20190524 10:06:48.342"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.345" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.345" endtime="20190524 10:06:48.345"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.343" endtime="20190524 10:06:48.345"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Route Profile or Route Profile Direction not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Route Profile or Route Profile Direction not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.348" endtime="20190524 10:06:48.349"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.347" endtime="20190524 10:06:48.349"></status>
</kw>
<doc>Verifies that ACI L3Out External EPG Subnet '' under tenant 'tenant1', L3Out 'L3OUT-main_INT', External EPG 'external' are configured with the expected parameters
- Tenant Name: tenant1
- L3Out Name: L3OUT-main_INT
- External EPG: external
- Subnet: 0.0.0.0/0
- External Subnet for External EPG: yes
- Export Route Control: no
- Shared Route Control: no
- Shared Security Import: no
- Aggregated Shared Route: no
- Route Control Profile: daf
- Route Control Profile Direction: import</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-l3out</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.282" endtime="20190524 10:06:48.350" critical="yes"></status>
</test>
<test id="s1-t125" name="Verify ACI Contract Filter Configuration - Tenant tenant1, Filter any">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-any</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.353" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-any</msg>
<status status="PASS" starttime="20190524 10:06:48.353" endtime="20190524 10:06:48.354"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.356" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.356" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-any.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.373" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzFilter":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/flt-any","extMngdBy":"","fwdId":"11","id":"implicit","lcOwn":"local","modTs":"2019-05-23T00:35:55.950+00:00","monPolDn":"uni/tn-common/monepg-default","name":"any","nameAlias":"","ownerKey":"","ownerTag":"","revId":"12","status":"","txId":"17293822569102731962","uid":"15374","unsupportedEntries":"no","unsupportedMgmtEntries":"no","usesIds":"yes"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.375" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd7208&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.355" endtime="20190524 10:06:48.375"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.377" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.376" endtime="20190524 10:06:48.377"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.379" endtime="20190524 10:06:48.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzFilter.attributes.name}"</arg>
<arg>"any"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.381" endtime="20190524 10:06:48.382"></status>
</kw>
<doc>Verifies that ACI Contract Filter 'any' under tenant 'tenant1' are configured with the expected parameters
- Tenant Name: tenant1
- Name: any</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.351" endtime="20190524 10:06:48.383" critical="yes"></status>
</test>
<test id="s1-t126" name="Verify ACI Contract Filter Configuration - Tenant tenant1, Filter udp">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-udp</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.387" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-udp</msg>
<status status="PASS" starttime="20190524 10:06:48.386" endtime="20190524 10:06:48.387"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.389" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.389" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-udp.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.406" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzFilter":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/tn-tenant1/flt-udp","extMngdBy":"","fwdId":"9","id":"implicit","lcOwn":"local","modTs":"2019-05-23T00:35:56.183+00:00","monPolDn":"uni/tn-common/monepg-default","name":"udp","nameAlias":"","ownerKey":"","ownerTag":"","revId":"13","status":"","txId":"17293822569102731964","uid":"15374","unsupportedEntries":"no","unsupportedMgmtEntries":"no","usesIds":"yes"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.409" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8be7fd0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.388" endtime="20190524 10:06:48.409"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.411" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.411" endtime="20190524 10:06:48.411"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.413" endtime="20190524 10:06:48.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzFilter.attributes.name}"</arg>
<arg>"udp"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.416" endtime="20190524 10:06:48.416"></status>
</kw>
<doc>Verifies that ACI Contract Filter 'udp' under tenant 'tenant1' are configured with the expected parameters
- Tenant Name: tenant1
- Name: udp</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.384" endtime="20190524 10:06:48.417" critical="yes"></status>
</test>
<test id="s1-t127" name="Checking ACI Contract Filter for Faults - Tenant tenant1, Filter any">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-any/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.421" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-any/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:48.420" endtime="20190524 10:06:48.421"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.422" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.422" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-any/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.439" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/flt-any/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.441" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b508d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.422" endtime="20190524 10:06:48.441"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.443" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.443" endtime="20190524 10:06:48.443"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.444" endtime="20190524 10:06:48.445"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.447" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.446" endtime="20190524 10:06:48.447"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.449" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.448" endtime="20190524 10:06:48.449"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.451" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.450" endtime="20190524 10:06:48.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.453" endtime="20190524 10:06:48.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.455" endtime="20190524 10:06:48.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.457" endtime="20190524 10:06:48.457"></status>
</kw>
<doc>Verifies ACI faults for Contract Filter 'any' under tenant 'tenant1'
- Tenant Name: tenant1
- Filter Name: any
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.418" endtime="20190524 10:06:48.458" critical="yes"></status>
</test>
<test id="s1-t128" name="Checking ACI Contract Filter for Faults - Tenant tenant1, Filter udp">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-udp/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.461" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-udp/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:48.461" endtime="20190524 10:06:48.461"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.463" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.463" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-udp/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.480" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/flt-udp/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.484" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c41ba8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.462" endtime="20190524 10:06:48.484"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.486" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.485" endtime="20190524 10:06:48.486"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.487" endtime="20190524 10:06:48.488"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.491" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.490" endtime="20190524 10:06:48.491"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.493" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.492" endtime="20190524 10:06:48.493"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.494" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.494" endtime="20190524 10:06:48.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.496" endtime="20190524 10:06:48.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.498" endtime="20190524 10:06:48.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.500" endtime="20190524 10:06:48.501"></status>
</kw>
<doc>Verifies ACI faults for Contract Filter 'udp' under tenant 'tenant1'
- Tenant Name: tenant1
- Filter Name: udp
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.459" endtime="20190524 10:06:48.501" critical="yes"></status>
</test>
<test id="s1-t129" name="Verify ACI Contract Filter Entry Configuration - Tenant tenant1, Filter any, Entry any_ent">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-any/e-any_ent</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.506" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-any/e-any_ent</msg>
<status status="PASS" starttime="20190524 10:06:48.506" endtime="20190524 10:06:48.506"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.508" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.508" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-any/e-any_ent.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.525" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzEntry":{"attributes":{"annotation":"","applyToFrag":"no","arpOpc":"unspecified","childAction":"","dFromPort":"unspecified","dToPort":"unspecified","descr":"","dn":"uni/tn-tenant1/flt-any/e-any_ent","etherT":"ip","extMngdBy":"","icmpv4T":"unspecified","icmpv6T":"unspecified","lcOwn":"local","matchDscp":"unspecified","modTs":"2019-05-23T00:35:55.714+00:00","monPolDn":"uni/tn-common/monepg-default","name":"any_ent","nameAlias":"","prot":"unspecified","sFromPort":"unspecified","sToPort":"unspecified","stateful":"no","status":"","tcpRules":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.528" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bba860&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.508" endtime="20190524 10:06:48.528"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.531" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.530" endtime="20190524 10:06:48.531"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter Entry does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.532" endtime="20190524 10:06:48.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.name}"</arg>
<arg>"any_ent"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.534" endtime="20190524 10:06:48.535"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.etherT}"</arg>
<arg>"ip"</arg>
<arg>Ether Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.etherT}"</arg>
<arg>"ip"</arg>
<arg>Ether Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.538" endtime="20190524 10:06:48.538"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.536" endtime="20190524 10:06:48.538"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.prot}"</arg>
<arg>"unspecified"</arg>
<arg>IP Protocol not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.prot}"</arg>
<arg>"unspecified"</arg>
<arg>IP Protocol not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.541" endtime="20190524 10:06:48.541"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.540" endtime="20190524 10:06:48.541"></status>
</kw>
<doc>Verifies that ACI Contract Filter Entry 'any_ent' are configured under tenant 'tenant1', Filter 'any' are configured with the expected parameters
- Tenant Name: tenant1
- Filter Name: any
- Filter Entry Name: any_ent
- Ether Type: ip
- IP Protocol: unspecified</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.502" endtime="20190524 10:06:48.542" critical="yes"></status>
</test>
<test id="s1-t130" name="Verify ACI Contract Filter Entry Configuration - Tenant tenant1, Filter any, Entry tcp_ent">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-any/e-tcp_ent</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.547" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-any/e-tcp_ent</msg>
<status status="PASS" starttime="20190524 10:06:48.546" endtime="20190524 10:06:48.547"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.549" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.549" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-any/e-tcp_ent.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.567" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzEntry":{"attributes":{"annotation":"","applyToFrag":"no","arpOpc":"unspecified","childAction":"","dFromPort":"http","dToPort":"81","descr":"","dn":"uni/tn-tenant1/flt-any/e-tcp_ent","etherT":"ip","extMngdBy":"","icmpv4T":"unspecified","icmpv6T":"unspecified","lcOwn":"local","matchDscp":"unspecified","modTs":"2019-05-23T00:35:55.940+00:00","monPolDn":"uni/tn-common/monepg-default","name":"tcp_ent","nameAlias":"","prot":"tcp","sFromPort":"unspecified","sToPort":"unspecified","stateful":"no","status":"","tcpRules":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.570" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c12f60&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.548" endtime="20190524 10:06:48.570"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.572" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.571" endtime="20190524 10:06:48.573"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter Entry does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.574" endtime="20190524 10:06:48.575"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.name}"</arg>
<arg>"tcp_ent"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.576" endtime="20190524 10:06:48.577"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.etherT}"</arg>
<arg>"ip"</arg>
<arg>Ether Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.etherT}"</arg>
<arg>"ip"</arg>
<arg>Ether Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.579" endtime="20190524 10:06:48.580"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.578" endtime="20190524 10:06:48.580"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.prot}"</arg>
<arg>"tcp"</arg>
<arg>IP Protocol not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.prot}"</arg>
<arg>"tcp"</arg>
<arg>IP Protocol not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.583" endtime="20190524 10:06:48.583"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.582" endtime="20190524 10:06:48.584"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.sFromPort}"</arg>
<arg>"unspecified"</arg>
<arg>Start Source Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.sFromPort}"</arg>
<arg>"unspecified"</arg>
<arg>Start Source Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.586" endtime="20190524 10:06:48.586"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.585" endtime="20190524 10:06:48.587"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.sToPort}"</arg>
<arg>"unspecified"</arg>
<arg>End Source Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.sToPort}"</arg>
<arg>"unspecified"</arg>
<arg>End Source Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.589" endtime="20190524 10:06:48.590"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.588" endtime="20190524 10:06:48.590"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.dFromPort}"</arg>
<arg>"http"</arg>
<arg>Start Destination Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.dFromPort}"</arg>
<arg>"http"</arg>
<arg>Start Destination Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.592" endtime="20190524 10:06:48.593"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.591" endtime="20190524 10:06:48.593"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.dToPort}"</arg>
<arg>"81"</arg>
<arg>End Destination Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.dToPort}"</arg>
<arg>"81"</arg>
<arg>End Destination Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.595" endtime="20190524 10:06:48.596"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.594" endtime="20190524 10:06:48.596"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.tcpRules}"</arg>
<arg>""</arg>
<arg>TCP Flags not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.tcpRules}"</arg>
<arg>""</arg>
<arg>TCP Flags not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.599" endtime="20190524 10:06:48.599"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.598" endtime="20190524 10:06:48.600"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.applyToFrag}"</arg>
<arg>"no"</arg>
<arg>Match Only Fragments not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.applyToFrag}"</arg>
<arg>"no"</arg>
<arg>Match Only Fragments not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.602" endtime="20190524 10:06:48.603"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.601" endtime="20190524 10:06:48.603"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.stateful}"</arg>
<arg>"no"</arg>
<arg>Stateful not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.stateful}"</arg>
<arg>"no"</arg>
<arg>Stateful not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.606" endtime="20190524 10:06:48.607"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.605" endtime="20190524 10:06:48.607"></status>
</kw>
<doc>Verifies that ACI Contract Filter Entry 'tcp_ent' are configured under tenant 'tenant1', Filter 'any' are configured with the expected parameters
- Tenant Name: tenant1
- Filter Name: any
- Filter Entry Name: tcp_ent
- Ether Type: ip
- IP Protocol: tcp
- Source Port (from): unspecified
- Source Port (to): unspecified
- Destination Port (from): 80
- Destination Port (to): 81
- TCP Flags:
- Apply to Fragments: no
- Stateful: no</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.543" endtime="20190524 10:06:48.607" critical="yes"></status>
</test>
<test id="s1-t131" name="Verify ACI Contract Filter Entry Configuration - Tenant tenant1, Filter udp, Entry udp_ent">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-udp/e-udp_ent</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.611" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-udp/e-udp_ent</msg>
<status status="PASS" starttime="20190524 10:06:48.610" endtime="20190524 10:06:48.611"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.612" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.612" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-udp/e-udp_ent.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.630" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzEntry":{"attributes":{"annotation":"","applyToFrag":"no","arpOpc":"unspecified","childAction":"","dFromPort":"123","dToPort":"123","descr":"","dn":"uni/tn-tenant1/flt-udp/e-udp_ent","etherT":"ip","extMngdBy":"","icmpv4T":"unspecified","icmpv6T":"unspecified","lcOwn":"local","matchDscp":"unspecified","modTs":"2019-05-23T00:35:56.175+00:00","monPolDn":"uni/tn-common/monepg-default","name":"udp_ent","nameAlias":"","prot":"udp","sFromPort":"unspecified","sToPort":"unspecified","stateful":"no","status":"","tcpRules":"","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.634" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c41b38&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.612" endtime="20190524 10:06:48.634"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.636" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.635" endtime="20190524 10:06:48.636"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter Entry does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.637" endtime="20190524 10:06:48.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.name}"</arg>
<arg>"udp_ent"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.639" endtime="20190524 10:06:48.640"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.etherT}"</arg>
<arg>"ip"</arg>
<arg>Ether Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.etherT}"</arg>
<arg>"ip"</arg>
<arg>Ether Type not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.643" endtime="20190524 10:06:48.643"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.641" endtime="20190524 10:06:48.643"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.prot}"</arg>
<arg>"udp"</arg>
<arg>IP Protocol not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.prot}"</arg>
<arg>"udp"</arg>
<arg>IP Protocol not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.646" endtime="20190524 10:06:48.646"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.645" endtime="20190524 10:06:48.647"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.sFromPort}"</arg>
<arg>"unspecified"</arg>
<arg>Start Source Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.sFromPort}"</arg>
<arg>"unspecified"</arg>
<arg>Start Source Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.649" endtime="20190524 10:06:48.650"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.648" endtime="20190524 10:06:48.650"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.sToPort}"</arg>
<arg>"unspecified"</arg>
<arg>End Source Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.sToPort}"</arg>
<arg>"unspecified"</arg>
<arg>End Source Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.652" endtime="20190524 10:06:48.654"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.651" endtime="20190524 10:06:48.654"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.dFromPort}"</arg>
<arg>"123"</arg>
<arg>Start Destination Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.dFromPort}"</arg>
<arg>"123"</arg>
<arg>Start Destination Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.657" endtime="20190524 10:06:48.658"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.656" endtime="20190524 10:06:48.658"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.dToPort}"</arg>
<arg>"123"</arg>
<arg>End Destination Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.dToPort}"</arg>
<arg>"123"</arg>
<arg>End Destination Port Block not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.660" endtime="20190524 10:06:48.661"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.659" endtime="20190524 10:06:48.661"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzEntry.attributes.applyToFrag}"</arg>
<arg>"no"</arg>
<arg>Match Only Fragments not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzEntry.attributes.applyToFrag}"</arg>
<arg>"no"</arg>
<arg>Match Only Fragments not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.664" endtime="20190524 10:06:48.664"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.662" endtime="20190524 10:06:48.664"></status>
</kw>
<doc>Verifies that ACI Contract Filter Entry 'udp_ent' are configured under tenant 'tenant1', Filter 'udp' are configured with the expected parameters
- Tenant Name: tenant1
- Filter Name: udp
- Filter Entry Name: udp_ent
- Ether Type: ip
- IP Protocol: udp
- Source Port (from): unspecified
- Source Port (to): unspecified
- Destination Port (from): 123
- Destination Port (to): 123
- Apply to Fragments: no</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.608" endtime="20190524 10:06:48.665" critical="yes"></status>
</test>
<test id="s1-t132" name="Checking ACI Contract Filter Entry for Faults - Tenant tenant1, Filter any, Entry any_ent">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-any/e-any_ent/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.668" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-any/e-any_ent/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:48.668" endtime="20190524 10:06:48.668"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.670" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.670" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-any/e-any_ent/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.688" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/flt-any/e-any_ent/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.690" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd7f98&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.669" endtime="20190524 10:06:48.690"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.692" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.692" endtime="20190524 10:06:48.692"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.694" endtime="20190524 10:06:48.694"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.696" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.696" endtime="20190524 10:06:48.696"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.699" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.698" endtime="20190524 10:06:48.699"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.701" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.700" endtime="20190524 10:06:48.701"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.702" endtime="20190524 10:06:48.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.704" endtime="20190524 10:06:48.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.707" endtime="20190524 10:06:48.707"></status>
</kw>
<doc>Verifies ACI faults for Contract Filter Entry 'any_ent' under tenant 'tenant1', filter 'any'
- Tenant Name: tenant1
- Filter Name: any
- Filter Entry Name: any_ent
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.666" endtime="20190524 10:06:48.708" critical="yes"></status>
</test>
<test id="s1-t133" name="Checking ACI Contract Filter Entry for Faults - Tenant tenant1, Filter any, Entry tcp_ent">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-any/e-tcp_ent/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.711" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-any/e-tcp_ent/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:48.711" endtime="20190524 10:06:48.711"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.713" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.714" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-any/e-tcp_ent/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.730" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/flt-any/e-tcp_ent/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.733" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b69a58&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.713" endtime="20190524 10:06:48.733"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.736" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.735" endtime="20190524 10:06:48.736"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.737" endtime="20190524 10:06:48.738"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.741" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.740" endtime="20190524 10:06:48.741"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.743" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.742" endtime="20190524 10:06:48.743"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.744" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.744" endtime="20190524 10:06:48.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.746" endtime="20190524 10:06:48.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.748" endtime="20190524 10:06:48.749"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.750" endtime="20190524 10:06:48.751"></status>
</kw>
<doc>Verifies ACI faults for Contract Filter Entry 'tcp_ent' under tenant 'tenant1', filter 'any'
- Tenant Name: tenant1
- Filter Name: any
- Filter Entry Name: tcp_ent
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.709" endtime="20190524 10:06:48.751" critical="yes"></status>
</test>
<test id="s1-t134" name="Checking ACI Contract Filter Entry for Faults - Tenant tenant1, Filter udp, Entry udp_ent">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/flt-udp/e-udp_ent/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.755" level="INFO">${uri} = /api/mo/uni/tn-tenant1/flt-udp/e-udp_ent/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:48.754" endtime="20190524 10:06:48.755"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.757" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.757" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/flt-udp/e-udp_ent/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.775" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/flt-udp/e-udp_ent/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.778" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bc21d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.757" endtime="20190524 10:06:48.778"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.781" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.780" endtime="20190524 10:06:48.781"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.782" endtime="20190524 10:06:48.783"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.785" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.785" endtime="20190524 10:06:48.785"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.788" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.787" endtime="20190524 10:06:48.788"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.790" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.790" endtime="20190524 10:06:48.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.792" endtime="20190524 10:06:48.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.793" endtime="20190524 10:06:48.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract Filter Entry has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.795" endtime="20190524 10:06:48.796"></status>
</kw>
<doc>Verifies ACI faults for Contract Filter Entry 'udp_ent' under tenant 'tenant1', filter 'udp'
- Tenant Name: tenant1
- Filter Name: udp
- Filter Entry Name: udp_ent
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.752" endtime="20190524 10:06:48.796" critical="yes"></status>
</test>
<test id="s1-t135" name="Verify ACI Contract Configuration - Tenant tenant1, Contract permit_any">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/brc-permit_any</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.800" level="INFO">${uri} = /api/mo/uni/tn-tenant1/brc-permit_any</msg>
<status status="PASS" starttime="20190524 10:06:48.800" endtime="20190524 10:06:48.800"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.802" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.802" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/brc-permit_any.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.820" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzBrCP":{"attributes":{"annotation":"","childAction":"","configIssues":"","descr":"","dn":"uni/tn-tenant1/brc-permit_any","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:56.869+00:00","monPolDn":"uni/tn-common/monepg-default","name":"permit_any","nameAlias":"","ownerKey":"","ownerTag":"","prio":"unspecified","reevaluateAll":"no","scope":"context","status":"","targetDscp":"unspecified","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.824" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bda470&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.801" endtime="20190524 10:06:48.824"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.826" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.825" endtime="20190524 10:06:48.827"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Contract does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.828" endtime="20190524 10:06:48.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzBrCP.attributes.name}"</arg>
<arg>"permit_any"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.830" endtime="20190524 10:06:48.831"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzBrCP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzBrCP.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.834" endtime="20190524 10:06:48.834"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.833" endtime="20190524 10:06:48.834"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzBrCP.attributes.scope}"</arg>
<arg>"context"</arg>
<arg>Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzBrCP.attributes.scope}"</arg>
<arg>"context"</arg>
<arg>Scope not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.837" endtime="20190524 10:06:48.838"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.836" endtime="20190524 10:06:48.838"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzBrCP.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>Priority / QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzBrCP.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>Priority / QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.840" endtime="20190524 10:06:48.841"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.839" endtime="20190524 10:06:48.841"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzBrCP.attributes.targetDscp}"</arg>
<arg>"unspecified"</arg>
<arg>Target DSCP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzBrCP.attributes.targetDscp}"</arg>
<arg>"unspecified"</arg>
<arg>Target DSCP not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.843" endtime="20190524 10:06:48.844"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.842" endtime="20190524 10:06:48.844"></status>
</kw>
<doc>Verifies that ACI Contract 'permit_any' under tenant 'tenant1' are configured with the expected parameters
- Tenant Name: tenant1
- Contract Name: permit_any
- Name Alias:
- Scope: context
- Priority / QoS Class: unspecified
- Target DSCP: unspecified</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.798" endtime="20190524 10:06:48.845" critical="yes"></status>
</test>
<test id="s1-t136" name="Checking ACI Contract for Faults - Tenant tenant1, Contract permit_any">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/brc-permit_any/fltCnts</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.848" level="INFO">${uri} = /api/mo/uni/tn-tenant1/brc-permit_any/fltCnts</msg>
<status status="PASS" starttime="20190524 10:06:48.848" endtime="20190524 10:06:48.848"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.850" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.851" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/brc-permit_any/fltCnts.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.867" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"faultCounts":{"attributes":{"childAction":"","crit":"0","critAcked":"0","critAckedandDelegated":"0","critDelegated":"0","critDelta":"0","dn":"uni/tn-tenant1/brc-permit_any/fltCnts","maj":"0","majAcked":"0","majAckedandDelegated":"0","majDelegated":"0","majDelta":"0","minor":"0","minorAcked":"0","minorAckedandDelegated":"0","minorDelegated":"0","minorDelta":"0","modTs":"never","status":"","warn":"0","warnAcked":"0","warnAckedandDelegated":"0","warnDelegated":"0","warnDelta":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.871" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b6d1d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.850" endtime="20190524 10:06:48.871"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.873" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.872" endtime="20190524 10:06:48.873"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving faults</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.874" endtime="20190524 10:06:48.875"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.crit}</arg>
</arguments>
<assign>
<var>${critical_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.877" level="INFO">${critical_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.877" endtime="20190524 10:06:48.877"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.maj}</arg>
</arguments>
<assign>
<var>${major_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.880" level="INFO">${major_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.879" endtime="20190524 10:06:48.880"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return.payload[0].faultCounts.attributes.minor}</arg>
</arguments>
<assign>
<var>${minor_count}</var>
</assign>
<msg timestamp="20190524 10:06:48.883" level="INFO">${minor_count} = 0</msg>
<status status="PASS" starttime="20190524 10:06:48.882" endtime="20190524 10:06:48.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${critical_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract has ${critical_count} critical faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.884" endtime="20190524 10:06:48.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${major_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract has ${major_count} major faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.886" endtime="20190524 10:06:48.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not ${minor_count} &lt;= 0</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Fail</arg>
<arg>"Contract has ${minor_count} minor faults (passing threshold 0)"</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.888" endtime="20190524 10:06:48.889"></status>
</kw>
<doc>Verifies ACI faults for Contract 'permit_any' under tenant 'tenant1'
- Tenant Name: tenant1
- Contract Name: permit_any
- Critical fault count &lt;= 0
- Major fault count &lt;= 0
- Minor fault count &lt;= 0</doc>
<tags>
<tag>aci</tag>
<tag>aci-faults</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.846" endtime="20190524 10:06:48.889" critical="yes"></status>
</test>
<test id="s1-t137" name="Verify ACI Contract Subject Configuration Tenant tenant1, Contract permit_any, Subject any_subj, Filter any">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.893" level="INFO">${uri} = /api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj</msg>
<status status="PASS" starttime="20190524 10:06:48.893" endtime="20190524 10:06:48.893"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.895" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.895" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:48.912" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzSubj":{"attributes":{"annotation":"","childAction":"","configIssues":"","consMatchT":"AtleastOne","descr":"","dn":"uni/tn-tenant1/brc-permit_any/subj-any_subj","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:56.638+00:00","monPolDn":"uni/tn-common/monepg-default","name":"any_subj","nameAlias":"","prio":"unspecified","provMatchT":"AtleastOne","revFltPorts":"yes","status":"","targetDscp":"unspecified","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:48.915" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b4c7f0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.895" endtime="20190524 10:06:48.915"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:48.917" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.917" endtime="20190524 10:06:48.917"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Contract Subject does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.919" endtime="20190524 10:06:48.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzSubj.attributes.name}"</arg>
<arg>"any_subj"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.922" endtime="20190524 10:06:48.923"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzSubj.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzSubj.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.925" endtime="20190524 10:06:48.926"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.924" endtime="20190524 10:06:48.926"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzSubj.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>Priority / QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzSubj.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>Priority / QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.929" endtime="20190524 10:06:48.930"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.928" endtime="20190524 10:06:48.930"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzSubj.attributes.revFltPorts}"</arg>
<arg>"yes"</arg>
<arg>Reverse Filter Ports not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzSubj.attributes.revFltPorts}"</arg>
<arg>"yes"</arg>
<arg>Reverse Filter Ports not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:48.933" endtime="20190524 10:06:48.933"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:48.932" endtime="20190524 10:06:48.934"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj/rssubjFiltAtt-any</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:48.935" level="INFO">${uri} = /api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj/rssubjFiltAtt-any</msg>
<status status="PASS" starttime="20190524 10:06:48.935" endtime="20190524 10:06:48.935"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:48.937" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:48.937" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj/rssubjFiltAtt-any.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:49.012" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzRsSubjFiltAtt":{"attributes":{"action":"permit","annotation":"","childAction":"","directives":"","dn":"uni/tn-tenant1/brc-permit_any/subj-any_subj/rssubjFiltAtt-any","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:56.638+00:00","monPolDn":"uni/tn-common/monepg-default","priorityOverride":"default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"vzFilter","tContextDn":"","tDn":"uni/tn-tenant1/flt-any","tRn":"flt-any","tType":"name","tnVzFilterName":"any","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.016" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b4c470&gt;</msg>
<status status="PASS" starttime="20190524 10:06:48.937" endtime="20190524 10:06:49.017"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.019" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.018" endtime="20190524 10:06:49.019"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter not associated with Contract Subject</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter not associated with Contract Subject</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.023" endtime="20190524 10:06:49.024"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.021" endtime="20190524 10:06:49.024"></status>
</kw>
<doc>Verifies that ACI Contract Subject 'any_subj' under tenant 'tenant1', contract 'permit_any' are configured with the expected parameters
- Tenant Name: tenant1
- Contract Name: permit_any
- Subject Name: any_subj
- Name Alias:
- Priority / QoS Class: unspecified
- Apply Both Directions: yes
- Reverse Filter Ports: yes
- Target DSCP: unspecified
- Associated Filter: any</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:48.891" endtime="20190524 10:06:49.025" critical="yes"></status>
</test>
<test id="s1-t138" name="Verify ACI Contract Subject Configuration Tenant tenant1, Contract permit_any, Subject any_subj, Filter udp">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:49.028" level="INFO">${uri} = /api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj</msg>
<status status="PASS" starttime="20190524 10:06:49.028" endtime="20190524 10:06:49.028"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.031" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.031" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:49.049" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzSubj":{"attributes":{"annotation":"","childAction":"","configIssues":"","consMatchT":"AtleastOne","descr":"","dn":"uni/tn-tenant1/brc-permit_any/subj-any_subj","extMngdBy":"","lcOwn":"local","modTs":"2019-05-23T00:35:56.638+00:00","monPolDn":"uni/tn-common/monepg-default","name":"any_subj","nameAlias":"","prio":"unspecified","provMatchT":"AtleastOne","revFltPorts":"yes","status":"","targetDscp":"unspecified","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.052" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b6d550&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.030" endtime="20190524 10:06:49.052"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.054" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.054" endtime="20190524 10:06:49.054"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Contract Subject does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.056" endtime="20190524 10:06:49.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzSubj.attributes.name}"</arg>
<arg>"any_subj"</arg>
<arg>Failure retreiving configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.058" endtime="20190524 10:06:49.059"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzSubj.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzSubj.attributes.nameAlias}"</arg>
<arg>""</arg>
<arg>Name Alias not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.062" endtime="20190524 10:06:49.062"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.061" endtime="20190524 10:06:49.062"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzSubj.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>Priority / QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzSubj.attributes.prio}"</arg>
<arg>"unspecified"</arg>
<arg>Priority / QoS Class not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.065" endtime="20190524 10:06:49.065"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.064" endtime="20190524 10:06:49.065"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].vzSubj.attributes.revFltPorts}"</arg>
<arg>"yes"</arg>
<arg>Reverse Filter Ports not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].vzSubj.attributes.revFltPorts}"</arg>
<arg>"yes"</arg>
<arg>Reverse Filter Ports not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.068" endtime="20190524 10:06:49.069"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.067" endtime="20190524 10:06:49.069"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj/rssubjFiltAtt-udp</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:49.071" level="INFO">${uri} = /api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj/rssubjFiltAtt-udp</msg>
<status status="PASS" starttime="20190524 10:06:49.070" endtime="20190524 10:06:49.071"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.073" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.073" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/brc-permit_any/subj-any_subj/rssubjFiltAtt-udp.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:49.091" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"vzRsSubjFiltAtt":{"attributes":{"action":"permit","annotation":"","childAction":"","directives":"","dn":"uni/tn-tenant1/brc-permit_any/subj-any_subj/rssubjFiltAtt-udp","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:56.869+00:00","monPolDn":"uni/tn-common/monepg-default","priorityOverride":"default","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"vzFilter","tContextDn":"","tDn":"uni/tn-tenant1/flt-udp","tRn":"flt-udp","tType":"name","tnVzFilterName":"udp","uid":"15374"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.094" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bc2da0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.072" endtime="20190524 10:06:49.094"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.096" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.095" endtime="20190524 10:06:49.096"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter not associated with Contract Subject</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Filter not associated with Contract Subject</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.099" endtime="20190524 10:06:49.100"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.098" endtime="20190524 10:06:49.100"></status>
</kw>
<doc>Verifies that ACI Contract Subject 'any_subj' under tenant 'tenant1', contract 'permit_any' are configured with the expected parameters
- Tenant Name: tenant1
- Contract Name: permit_any
- Subject Name: any_subj
- Name Alias:
- Priority / QoS Class: unspecified
- Apply Both Directions: yes
- Reverse Filter Ports: yes
- Target DSCP: unspecified
- Associated Filter: udp</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-contract</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.026" endtime="20190524 10:06:49.100" critical="yes"></status>
</test>
<test id="s1-t139" name="Verify ACI EPG Contract Configuration - App Profile app1, EPG epg1, Contract permit_any">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rscons-permit_any</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:49.103" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rscons-permit_any</msg>
<status status="PASS" starttime="20190524 10:06:49.103" endtime="20190524 10:06:49.103"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.105" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.105" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rscons-permit_any.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:49.123" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsCons":{"attributes":{"annotation":"","childAction":"","ctrctUpd":"ctrct","deplInfo":"","dn":"uni/tn-tenant1/ap-app1/epg-epg1/rscons-permit_any","extMngdBy":"","forceResolve":"yes","lcOwn":"local","modTs":"2019-05-23T00:35:57.096+00:00","monPolDn":"uni/tn-common/monepg-default","prio":"unspecified","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"vzBrCP","tContextDn":"","tDn":"uni/tn-tenant1/brc-permit_any","tRn":"brc-permit_any","tType":"name","tnVzBrCPName":"permit_any","triggerSt":"triggerable","uid":"15374","updateCollection":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.125" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c308d0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.105" endtime="20190524 10:06:49.125"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.127" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.127" endtime="20190524 10:06:49.127"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Contract not consumed by EPG</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Contract not consumed by EPG</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.129" endtime="20190524 10:06:49.130"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.128" endtime="20190524 10:06:49.130"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsCons.attributes.tnVzBrCPName}"</arg>
<arg>"permit_any"</arg>
<arg>Consumed Contract not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsCons.attributes.tnVzBrCPName}"</arg>
<arg>"permit_any"</arg>
<arg>Consumed Contract not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.133" endtime="20190524 10:06:49.134"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.132" endtime="20190524 10:06:49.134"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsprov-permit_any</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:49.136" level="INFO">${uri} = /api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsprov-permit_any</msg>
<status status="PASS" starttime="20190524 10:06:49.135" endtime="20190524 10:06:49.136"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.138" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.138" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/tn-tenant1/ap-app1/epg-epg1/rsprov-permit_any.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:49.158" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fvRsProv":{"attributes":{"annotation":"","childAction":"","ctrctUpd":"ctrct","dn":"uni/tn-tenant1/ap-app1/epg-epg1/rsprov-permit_any","extMngdBy":"","forceResolve":"yes","lcOwn":"local","matchT":"AtleastOne","modTs":"2019-05-23T00:35:57.096+00:00","monPolDn":"uni/tn-common/monepg-default","prio":"unspecified","rType":"mo","state":"formed","stateQual":"none","status":"","tCl":"vzBrCP","tContextDn":"","tDn":"uni/tn-tenant1/brc-permit_any","tRn":"brc-permit_any","tType":"name","tnVzBrCPName":"permit_any","triggerSt":"triggerable","uid":"15374","updateCollection":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.161" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c413c8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.137" endtime="20190524 10:06:49.161"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.163" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.162" endtime="20190524 10:06:49.163"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Contract not provided by EPG</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Contract not provided by EPG</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.166" endtime="20190524 10:06:49.167"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.165" endtime="20190524 10:06:49.167"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>"${return.payload[0].fvRsProv.attributes.tnVzBrCPName}"</arg>
<arg>"permit_any"</arg>
<arg>Provided Contract not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>"${return.payload[0].fvRsProv.attributes.tnVzBrCPName}"</arg>
<arg>"permit_any"</arg>
<arg>Provided Contract not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.169" endtime="20190524 10:06:49.170"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.168" endtime="20190524 10:06:49.170"></status>
</kw>
<doc>Verifies that ACI EPG Contract association for 'permit_any' are configured under tenant 'tenant1'are configured with the expected parameters
- Tenant Name: tenant1
- Application Profile Name: app1
- EPG Name: epg1
- Contract name: permit_any
- Consume Contract: yes
- Provide Contract: yes</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-tenant</tag>
<tag>aci-tenant-epg</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.101" endtime="20190524 10:06:49.170" critical="yes"></status>
</test>
<test id="s1-t140" name="Verify APIC Software Version - APIC 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/mo/topology/pod-1/node-1/sys/ctrlrfwstatuscont/ctrlrrunning</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:49.175" level="INFO">${uri} = /api/mo/topology/pod-1/node-1/sys/ctrlrfwstatuscont/ctrlrrunning</msg>
<status status="PASS" starttime="20190524 10:06:49.174" endtime="20190524 10:06:49.175"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.177" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.177" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/topology/pod-1/node-1/sys/ctrlrfwstatuscont/ctrlrrunning.json
Payload: 
Cookies: {'APIC-cookie': 'IgwAAAAAAAAAAAAAAAAAAOdnUfuKJiNoJW78R8n3OyqXsGstn+t176mENPzDoFf3KUpXU2UN+Bf8OAg3KQNQN/vsIinHhnbI/KAy+dWVRRx02VbXhvgtfZ6yIjB8njMUxwIeTiXTPVrcw7nUJY3bbLUkBR4a3wueD74oOwoOMZ34iSxBv4xmtnkWuobJGmoTEmOjmL5k54MaT27DEygaqQ=='}</msg>
<msg timestamp="20190524 10:06:49.194" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"firmwareCtrlrRunning":{"attributes":{"childAction":"","descr":"","dn":"topology/pod-1/node-1/sys/ctrlrfwstatuscont/ctrlrrunning","internalLabel":"52ad08625b28d6c894de06ec5bd911f97a05b778","lcOwn":"local","modTs":"2019-05-22T06:11:25.278+00:00","mode":"normal","status":"","tpmInUse":"no","ts":"2019-05-22T06:11:25.279+00:00","type":"controller","version":"3.2(1m)"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.197" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c0bf28&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.176" endtime="20190524 10:06:49.197"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.200" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.200" endtime="20190524 10:06:49.201"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Failure retreiving controller software information</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.202" endtime="20190524 10:06:49.203"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].firmwareCtrlrRunning.attributes.version}</arg>
<arg>3.2(1m)</arg>
<arg>APIC controller not running expected software version</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].firmwareCtrlrRunning.attributes.version}</arg>
<arg>3.2(1m)</arg>
<arg>APIC controller not running expected software version</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.206" endtime="20190524 10:06:49.207"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.205" endtime="20190524 10:06:49.207"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].firmwareCtrlrRunning.attributes.mode}</arg>
<arg>normal</arg>
<arg>Software running mode not matching expected configration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].firmwareCtrlrRunning.attributes.mode}</arg>
<arg>normal</arg>
<arg>Software running mode not matching expected configration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.209" endtime="20190524 10:06:49.210"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.208" endtime="20190524 10:06:49.210"></status>
</kw>
<doc>Verifies that APIC 1 in POD 1 are running the expeced software version
POD: 1
APIC ID: 1
Software Version: 3.2(1m)
Software Running Mode: normal</doc>
<tags>
<tag>aci</tag>
<tag>aci-operations</tag>
<tag>aci-software-version</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.172" endtime="20190524 10:06:49.210" critical="yes"></status>
</test>
<test id="s1-t141" name="Verify ACI Login">
<kw name="ACI REST login on ${apic}" library="RASTA.RastaACIRest">
<doc>Optional keyword, as session creation and maintenance are implicitly performed by the other keywords.</doc>
<assign>
<var>${auth_cookie}</var>
</assign>
<msg timestamp="20190524 10:06:49.213" level="INFO">Sending REST POST request to https://10.49.96.69:443/api/aaaLogin.json
Payload: b'{"aaaUser": {"attributes": {"name": "admin", "pwd": "Cisco123"}}}'
Cookies: None</msg>
<msg timestamp="20190524 10:06:49.252" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"aaaLogin":{"attributes":{"token":"JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g==","siteFingerprint":"npq5AiKRgtj6fsIp","refreshTimeoutSeconds":"600","maximumLifetimeSeconds":"86400","guiIdleTimeoutSeconds":"1200","restTimeoutSeconds":"90","creationTime":"1558664455","firstLoginTime":"1558664455","userName":"admin","remoteUser":"false","unixUserId":"15374","sessionId":"ulLWyiyQR82Hl5FXH2ZT2A==","lastName":"","firstName":"","changePassword":"no","version":"3.2(1m)","buildTime":"Fri May 25 05:17:37 PDT 2018","node":"topology/pod-1/node-1"},"children":[{"aaaUserDomain":{"attributes":{"name":"all","rolesR":"admin","rolesW":"admin"},"children":[{"aaaReadRoles":{"attributes":{}}},{"aaaWriteRoles":{"attributes":{},"children":[{"role":{"attributes":{"name":"admin"}}}]}}]}},{"DnDomainMapEntry":{"attributes":{"dn":"uni/tn-common","readPrivileges":"admin","writePrivileges":"admin"}}},{"DnDomainMapEntry":{"attributes":{"dn":"uni/tn-infra","readPrivileges":"admin","writePrivileges":"admin"}}},{"DnDomainMapEntry":{"attributes":{"dn":"uni/tn-mgmt","readPrivileges":"admin","writePrivileges":"admin"}}}]}}]}"</msg>
<msg timestamp="20190524 10:06:49.253" level="INFO">Authentication cookie saved {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.253" level="INFO">Authentication refresh timeout 600 seconds</msg>
<msg timestamp="20190524 10:06:49.253" level="INFO">Authentication session created at 1558692409</msg>
<msg timestamp="20190524 10:06:49.254" level="INFO">${auth_cookie} = {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg...</msg>
<status status="PASS" starttime="20190524 10:06:49.213" endtime="20190524 10:06:49.254"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Authentication successful, received authentication token '${auth_cookie}"</arg>
</arguments>
<msg timestamp="20190524 10:06:49.257" level="INFO">"Authentication successful, received authentication token '{'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}"</msg>
<status status="PASS" starttime="20190524 10:06:49.256" endtime="20190524 10:06:49.257"></status>
</kw>
<doc>Verifies ACI user login</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric-aaa</tag>
<tag>aci-operations</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.211" endtime="20190524 10:06:49.258" critical="yes"></status>
</test>
<test id="s1-t142" name="Verify ACI Fabric Infrastructure VLAN Configuration - APIC1">
<kw name="via ACI REST API retrieve &quot;/api/node/mo/topology/pod-1/node-1/sys/inst-bond0.json?query-target=subtree&amp;target-subtree-class=l3EncRtdIf&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.264" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.264" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-1/sys/inst-bond0.json?query-target=subtree&amp;target-subtree-class=l3EncRtdIf
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.283" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"l3EncRtdIf":{"attributes":{"adminSt":"up","bw":"0","childAction":"","delay":"1","descr":"","dn":"topology/pod-1/node-1/sys/inst-bond0/encrtd-[po1.4]","encap":"vlan-4","ethpmCfgFailedBmp":"","ethpmCfgFailedTs":"00:00:00:00.000","ethpmCfgState":"0","id":"po1.4","ifConnDn":"","lcOwn":"local","linkLogEn":"default","modTs":"2019-05-22T06:09:55.330+00:00","monPolDn":"uni/tn-common/monepg-default","mtu":"1500","mtuInherit":"yes","name":"bond0.4","routerMac":"46:B9:EC:6D:47:E1","status":""}}}]}"</msg>
<msg timestamp="20190524 10:06:49.285" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd2e10&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.264" endtime="20190524 10:06:49.286"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.287" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.287" endtime="20190524 10:06:49.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>APIC does not exist within fabric</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.289" endtime="20190524 10:06:49.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].l3EncRtdIf.attributes.encap}</arg>
<arg>vlan-4</arg>
<arg>Fabric Infrastructure VLAN matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.291" endtime="20190524 10:06:49.291"></status>
</kw>
<doc>Verifies that ACI Fabric Infrastructure VLAN Configuration on APIC1
- APIC Hostname: apic1
- Fabric ID: 1
- POD ID: 1
- Infrastructure VLAN ID: 4</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric-infra-vlan</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.260" endtime="20190524 10:06:49.292" critical="yes"></status>
</test>
<test id="s1-t143" name="Verify ACI Fabric Infrastructure VLAN Configuration - Node 201">
<kw name="via ACI REST API retrieve &quot;/api/node/mo/topology/pod-1/node-201/sys/lldp/inst&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.295" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.296" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-201/sys/lldp/inst.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.359" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lldpInst":{"attributes":{"adminSt":"enabled","childAction":"","ctrl":"","dn":"topology/pod-1/node-201/sys/lldp/inst","holdTime":"120","infraVlan":"4","initDelayTime":"2","lcOwn":"local","modTs":"2019-05-23T00:37:12.728+00:00","monPolDn":"uni/fabric/monfab-default","name":"","operErr":"","optTlvSel":"mgmt-addr,port-desc,port-vlan,sys-cap,sys-desc,sys-name","status":"","sysDesc":"topology\/pod-1\/node-201","txFreq":"30"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.363" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c18f60&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.295" endtime="20190524 10:06:49.364"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.367" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.366" endtime="20190524 10:06:49.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node does not exist within fabric</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.369" endtime="20190524 10:06:49.370"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.payload[0].lldpInst.attributes.infraVlan}</arg>
<arg>4</arg>
<arg>Fabric Infrastructure VLAN matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.372" endtime="20190524 10:06:49.373"></status>
</kw>
<doc>Verifies that ACI Fabric Infrastructure VLAN Configuration on Node 201
- Node Hostname: leaf1
- Fabric ID: 201
- POD ID: 1
- Infrastructure VLAN ID: 4</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric-infra-vlan</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.293" endtime="20190524 10:06:49.373" critical="yes"></status>
</test>
<test id="s1-t144" name="Verify ACI Fabric Infrastructure VLAN Configuration - Node 202">
<kw name="via ACI REST API retrieve &quot;/api/node/mo/topology/pod-1/node-202/sys/lldp/inst&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.377" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.377" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-202/sys/lldp/inst.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.399" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lldpInst":{"attributes":{"adminSt":"enabled","childAction":"","ctrl":"","dn":"topology/pod-1/node-202/sys/lldp/inst","holdTime":"120","infraVlan":"4","initDelayTime":"2","lcOwn":"local","modTs":"2019-05-23T00:36:07.112+00:00","monPolDn":"uni/fabric/monfab-default","name":"","operErr":"","optTlvSel":"mgmt-addr,port-desc,port-vlan,sys-cap,sys-desc,sys-name","status":"","sysDesc":"topology\/pod-1\/node-202","txFreq":"30"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.402" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c12e10&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.376" endtime="20190524 10:06:49.402"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.404" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.403" endtime="20190524 10:06:49.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node does not exist within fabric</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.406" endtime="20190524 10:06:49.406"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.payload[0].lldpInst.attributes.infraVlan}</arg>
<arg>4</arg>
<arg>Fabric Infrastructure VLAN matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.408" endtime="20190524 10:06:49.408"></status>
</kw>
<doc>Verifies that ACI Fabric Infrastructure VLAN Configuration on Node 202
- Node Hostname: leaf2
- Fabric ID: 202
- POD ID: 1
- Infrastructure VLAN ID: 4</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric-infra-vlan</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.374" endtime="20190524 10:06:49.409" critical="yes"></status>
</test>
<test id="s1-t145" name="Verify ACI Fabric Infrastructure VLAN Configuration - Node 101">
<kw name="via ACI REST API retrieve &quot;/api/node/mo/topology/pod-1/node-101/sys/lldp/inst&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.412" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.412" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-101/sys/lldp/inst.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.473" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lldpInst":{"attributes":{"adminSt":"enabled","childAction":"","ctrl":"","dn":"topology/pod-1/node-101/sys/lldp/inst","holdTime":"120","infraVlan":"4","initDelayTime":"2","lcOwn":"local","modTs":"2019-05-23T00:36:40.419+00:00","monPolDn":"uni/fabric/monfab-default","name":"","operErr":"","optTlvSel":"mgmt-addr,port-desc,port-vlan,sys-cap,sys-desc,sys-name","status":"","sysDesc":"topology\/pod-1\/node-101","txFreq":"30"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.476" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd2748&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.412" endtime="20190524 10:06:49.476"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.478" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.477" endtime="20190524 10:06:49.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Node does not exist within fabric</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.479" endtime="20190524 10:06:49.480"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.payload[0].lldpInst.attributes.infraVlan}</arg>
<arg>4</arg>
<arg>Fabric Infrastructure VLAN matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.482" endtime="20190524 10:06:49.483"></status>
</kw>
<doc>Verifies that ACI Fabric Infrastructure VLAN Configuration on Node 101
- Node Hostname: spine1
- Fabric ID: 101
- POD ID: 1
- Infrastructure VLAN ID: 4</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric-infra-vlan</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.410" endtime="20190524 10:06:49.483" critical="yes"></status>
</test>
<test id="s1-t146" name="Verify ACI TEP Pool Configuration - POD 1">
<kw name="via ACI REST API retrieve &quot;/api/mo/uni/controller/setuppol/setupp-1&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.487" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.487" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/mo/uni/controller/setuppol/setupp-1.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.506" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricSetupP":{"attributes":{"annotation":"","childAction":"","descr":"","dn":"uni/controller/setuppol/setupp-1","extMngdBy":"","lcOwn":"local","modTs":"2019-05-22T06:10:03.196+00:00","monPolDn":"uni/fabric/monfab-default","name":"","nameAlias":"","podId":"1","status":"","tepPool":"10.0.0.0/16","uid":"0"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.508" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd7da0&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.487" endtime="20190524 10:06:49.508"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.511" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.510" endtime="20190524 10:06:49.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Fabric POD does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.513" endtime="20190524 10:06:49.514"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].fabricSetupP.attributes.tepPool}</arg>
<arg>10.0.0.0/16</arg>
<arg>TEP Pool not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].fabricSetupP.attributes.tepPool}</arg>
<arg>10.0.0.0/16</arg>
<arg>TEP Pool not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.518" endtime="20190524 10:06:49.519"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.516" endtime="20190524 10:06:49.520"></status>
</kw>
<doc>Verifies that ACI TEP Pool Configuration for POD 1
- POD ID: 1
- TEP Pool: 10.0.0.0/16</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric-tep-pool</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.484" endtime="20190524 10:06:49.521" critical="yes"></status>
</test>
<test id="s1-t147" name="Verify ACI APIC Provisioning Configuration - APIC 1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/topology/pod-1/node-1/sys</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20190524 10:06:49.525" level="INFO">${url} = /api/node/mo/topology/pod-1/node-1/sys</msg>
<status status="PASS" starttime="20190524 10:06:49.525" endtime="20190524 10:06:49.525"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${url}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.528" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.528" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-1/sys.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.550" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"topSystem":{"attributes":{"address":"10.0.0.1","bootstrapState":"none","childAction":"","configIssues":"","controlPlaneMTU":"9000","currentTime":"2019-05-24T02:20:55.980+00:00","dn":"topology/pod-1/node-1/sys","enforceSubnetCheck":"no","etepAddr":"0.0.0.0","fabricDomain":"ACI Fabric1","fabricId":"1","fabricMAC":"00:22:BD:F8:19:FF","id":"1","inbMgmtAddr":"192.168.11.1","inbMgmtAddr6":"fc00::1","inbMgmtAddr6Mask":"0","inbMgmtAddrMask":"24","inbMgmtGateway":"192.168.11.254","inbMgmtGateway6":"::","lcOwn":"local","modTs":"2019-05-22T06:10:05.980+00:00","mode":"unspecified","monPolDn":"uni/fabric/monfab-default","name":"apic1","nameAlias":"","nodeType":"unspecified","oobMgmtAddr":"10.49.96.69","oobMgmtAddr6":"fe80::200:ff:fe0:0","oobMgmtAddr6Mask":"0","oobMgmtAddrMask":"28","oobMgmtGateway":"10.49.96.65","oobMgmtGateway6":"2001:420:28e:2020:acc:68ff:fe28:b540","podId":"1","remoteNetworkId":"0","remoteNode":"no","role":"controller","serial":"VMware-42 27 09 9f 3b ae 37 34-3f 96 7f 73 49 f2 a6 14","siteId":"0","state":"in-service","status":"","systemUpTime":"01:20:14:23.000","tepPool":"0.0.0.0","unicastXrEpLearnDisable":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.554" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bd2f28&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.527" endtime="20190524 10:06:49.554"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.557" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.556" endtime="20190524 10:06:49.557"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>APIC does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.560" endtime="20190524 10:06:49.561"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.name}</arg>
<arg>apic1</arg>
<arg>Hostname not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.name}</arg>
<arg>apic1</arg>
<arg>Hostname not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.566" endtime="20190524 10:06:49.566"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.565" endtime="20190524 10:06:49.567"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.569" endtime="20190524 10:06:49.570"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.568" endtime="20190524 10:06:49.570"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.id}</arg>
<arg>1</arg>
<arg>Node ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.id}</arg>
<arg>1</arg>
<arg>Node ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.574" endtime="20190524 10:06:49.574"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.572" endtime="20190524 10:06:49.575"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.role}</arg>
<arg>controller</arg>
<arg>Node Role not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.role}</arg>
<arg>controller</arg>
<arg>Node Role not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.577" endtime="20190524 10:06:49.578"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.576" endtime="20190524 10:06:49.578"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.oobMgmtAddr}</arg>
<arg>10.49.96.69</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.oobMgmtAddr}</arg>
<arg>10.49.96.69</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.581" endtime="20190524 10:06:49.582"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.579" endtime="20190524 10:06:49.583"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.oobMgmtAddrMask}</arg>
<arg>28</arg>
<arg>OOB Management Address Mask (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.oobMgmtAddrMask}</arg>
<arg>28</arg>
<arg>OOB Management Address Mask (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.585" endtime="20190524 10:06:49.586"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.584" endtime="20190524 10:06:49.586"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.oobMgmtGateway}</arg>
<arg>10.49.96.65</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.oobMgmtGateway}</arg>
<arg>10.49.96.65</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.588" endtime="20190524 10:06:49.589"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.587" endtime="20190524 10:06:49.589"></status>
</kw>
<doc>Verifies that APIC 1 are provisioned with the expected parameters
- Hostname: apic1
- POD ID: 1
- Node ID: 1
- Role: controller
- OOB Address (IPv4): 10.49.96.69/28
- OOB Gateway (IPv4): 10.49.96.65
- OOB Address (IPv6):
- OOB Gateway (IPv6):
- Inband Address (IPv4):
- Inband Gateway (IPv4):
- Inband Address (IPv6):
- Inband Gateway (IPv6):</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-node-provisioning</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.522" endtime="20190524 10:06:49.589" critical="yes"></status>
</test>
<test id="s1-t148" name="Verify ACI Node Provisioning Configuration - Node 201">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/topology/pod-1/node-201/sys</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20190524 10:06:49.592" level="INFO">${url} = /api/node/mo/topology/pod-1/node-201/sys</msg>
<status status="PASS" starttime="20190524 10:06:49.592" endtime="20190524 10:06:49.593"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${url}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.594" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.595" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-201/sys.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.617" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"topSystem":{"attributes":{"address":"10.0.104.66","bootstrapState":"none","childAction":"","configIssues":"","controlPlaneMTU":"9000","currentTime":"2019-05-24T02:20:56.048+00:00","dn":"topology/pod-1/node-201/sys","enforceSubnetCheck":"no","etepAddr":"0.0.0.0","fabricDomain":"ACI Fabric1","fabricId":"1","fabricMAC":"00:22:BD:F8:19:FF","id":"201","inbMgmtAddr":"0.0.0.0","inbMgmtAddr6":"::","inbMgmtAddr6Mask":"0","inbMgmtAddrMask":"0","inbMgmtGateway":"0.0.0.0","inbMgmtGateway6":"::","lcOwn":"local","modTs":"2019-05-23T00:38:28.810+00:00","mode":"unspecified","monPolDn":"uni/fabric/monfab-default","name":"leaf1","nameAlias":"","nodeType":"unspecified","oobMgmtAddr":"1.1.1.1","oobMgmtAddr6":"::","oobMgmtAddr6Mask":"0","oobMgmtAddrMask":"0","oobMgmtGateway":"0.0.0.0","oobMgmtGateway6":"::","podId":"1","remoteNetworkId":"0","remoteNode":"no","role":"leaf","serial":"TEP-1-102","siteId":"0","state":"in-service","status":"","systemUpTime":"01:20:14:23.000","tepPool":"10.0.0.0/16","unicastXrEpLearnDisable":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.621" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c30c50&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.594" endtime="20190524 10:06:49.621"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.623" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.623" endtime="20190524 10:06:49.623"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>APIC does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.625" endtime="20190524 10:06:49.626"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.name}</arg>
<arg>leaf1</arg>
<arg>Hostname not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.name}</arg>
<arg>leaf1</arg>
<arg>Hostname not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.629" endtime="20190524 10:06:49.629"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.627" endtime="20190524 10:06:49.629"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.632" endtime="20190524 10:06:49.633"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.631" endtime="20190524 10:06:49.633"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.id}</arg>
<arg>201</arg>
<arg>Node ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.id}</arg>
<arg>201</arg>
<arg>Node ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.635" endtime="20190524 10:06:49.636"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.634" endtime="20190524 10:06:49.636"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.serial}</arg>
<arg>TEP-1-102</arg>
<arg>Serial Number not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.serial}</arg>
<arg>TEP-1-102</arg>
<arg>Serial Number not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.639" endtime="20190524 10:06:49.639"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.637" endtime="20190524 10:06:49.639"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.role}</arg>
<arg>leaf</arg>
<arg>Node Role not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.role}</arg>
<arg>leaf</arg>
<arg>Node Role not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.642" endtime="20190524 10:06:49.642"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.641" endtime="20190524 10:06:49.643"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-201]</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20190524 10:06:49.644" level="INFO">${url} = /api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-201]</msg>
<status status="PASS" starttime="20190524 10:06:49.644" endtime="20190524 10:06:49.644"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${url}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${oob}</var>
</assign>
<msg timestamp="20190524 10:06:49.646" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.647" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-201].json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.666" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"mgmtRsOoBStNode":{"attributes":{"addr":"1.1.1.1/24","annotation":"","childAction":"","dn":"uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-201]","extMngdBy":"","forceResolve":"yes","gw":"1.1.1.254","lcOwn":"local","modTs":"2019-05-23T00:35:30.909+00:00","rType":"mo","state":"unformed","stateQual":"none","status":"","tCl":"fabricNode","tDn":"topology/pod-1/node-201","tType":"mo","uid":"15374","v6Addr":"::","v6Gw":"::"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.669" level="INFO">${oob} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8c47550&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.646" endtime="20190524 10:06:49.669"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${oob.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.671" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.671" endtime="20190524 10:06:49.671"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${oob.totalCount}</arg>
<arg>1</arg>
<arg>Out-of-Band Management not configured</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${oob.totalCount}</arg>
<arg>1</arg>
<arg>Out-of-Band Management not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.674" endtime="20190524 10:06:49.674"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.673" endtime="20190524 10:06:49.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${oob.totalCount} == 1</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.1/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.1/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.1/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.1/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.679" endtime="20190524 10:06:49.681"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.678" endtime="20190524 10:06:49.681"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.683" endtime="20190524 10:06:49.683"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.682" endtime="20190524 10:06:49.683"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.677" endtime="20190524 10:06:49.683"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.676" endtime="20190524 10:06:49.683"></status>
</kw>
<doc>Verifies that Node 201 are provisioned with the expected parameters
- Hostname: leaf1
- POD ID: 1
- Node ID: 201
- Serial Number: TEP-1-102
- Role: leaf
- OOB Address (IPv4): 1.1.1.1/24
- OOB Gateway (IPv4): 1.1.1.254
- OOB Address (IPv6):
- OOB Gateway (IPv6):
- Inband Address (IPv4):
- Inband Gateway (IPv4):
- Inband Address (IPv6):
- Inband Gateway (IPv6):</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-node-provisioning</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.590" endtime="20190524 10:06:49.684" critical="yes"></status>
</test>
<test id="s1-t149" name="Verify ACI Node Provisioning Configuration - Node 202">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/topology/pod-1/node-202/sys</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20190524 10:06:49.687" level="INFO">${url} = /api/node/mo/topology/pod-1/node-202/sys</msg>
<status status="PASS" starttime="20190524 10:06:49.687" endtime="20190524 10:06:49.688"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${url}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.689" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.689" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-202/sys.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.714" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"topSystem":{"attributes":{"address":"10.0.104.64","bootstrapState":"none","childAction":"","configIssues":"","controlPlaneMTU":"9000","currentTime":"2019-05-24T02:20:56.143+00:00","dn":"topology/pod-1/node-202/sys","enforceSubnetCheck":"no","etepAddr":"0.0.0.0","fabricDomain":"ACI Fabric1","fabricId":"1","fabricMAC":"00:22:BD:F8:19:FF","id":"202","inbMgmtAddr":"0.0.0.0","inbMgmtAddr6":"::","inbMgmtAddr6Mask":"0","inbMgmtAddrMask":"0","inbMgmtGateway":"0.0.0.0","inbMgmtGateway6":"::","lcOwn":"local","modTs":"2019-05-23T00:36:26.161+00:00","mode":"unspecified","monPolDn":"uni/fabric/monfab-default","name":"leaf2","nameAlias":"","nodeType":"unspecified","oobMgmtAddr":"1.1.1.2","oobMgmtAddr6":"::","oobMgmtAddr6Mask":"0","oobMgmtAddrMask":"0","oobMgmtGateway":"0.0.0.0","oobMgmtGateway6":"::","podId":"1","remoteNetworkId":"0","remoteNode":"no","role":"leaf","serial":"TEP-1-101","siteId":"0","state":"in-service","status":"","systemUpTime":"01:20:14:24.000","tepPool":"10.0.0.0/16","unicastXrEpLearnDisable":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.717" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b985f8&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.689" endtime="20190524 10:06:49.717"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.719" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.719" endtime="20190524 10:06:49.719"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>APIC does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.721" endtime="20190524 10:06:49.721"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.name}</arg>
<arg>leaf2</arg>
<arg>Hostname not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.name}</arg>
<arg>leaf2</arg>
<arg>Hostname not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.724" endtime="20190524 10:06:49.724"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.723" endtime="20190524 10:06:49.725"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.727" endtime="20190524 10:06:49.728"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.726" endtime="20190524 10:06:49.728"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.id}</arg>
<arg>202</arg>
<arg>Node ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.id}</arg>
<arg>202</arg>
<arg>Node ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.730" endtime="20190524 10:06:49.731"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.729" endtime="20190524 10:06:49.731"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.serial}</arg>
<arg>TEP-1-101</arg>
<arg>Serial Number not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.serial}</arg>
<arg>TEP-1-101</arg>
<arg>Serial Number not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.734" endtime="20190524 10:06:49.734"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.732" endtime="20190524 10:06:49.734"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.role}</arg>
<arg>leaf</arg>
<arg>Node Role not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.role}</arg>
<arg>leaf</arg>
<arg>Node Role not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.736" endtime="20190524 10:06:49.737"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.735" endtime="20190524 10:06:49.737"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-202]</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20190524 10:06:49.739" level="INFO">${url} = /api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-202]</msg>
<status status="PASS" starttime="20190524 10:06:49.738" endtime="20190524 10:06:49.739"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${url}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${oob}</var>
</assign>
<msg timestamp="20190524 10:06:49.741" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.741" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-202].json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.759" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"mgmtRsOoBStNode":{"attributes":{"addr":"1.1.1.2/24","annotation":"","childAction":"","dn":"uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-202]","extMngdBy":"","forceResolve":"yes","gw":"1.1.1.254","lcOwn":"local","modTs":"2019-05-23T00:35:31.140+00:00","rType":"mo","state":"unformed","stateQual":"none","status":"","tCl":"fabricNode","tDn":"topology/pod-1/node-202","tType":"mo","uid":"15374","v6Addr":"::","v6Gw":"::"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.762" level="INFO">${oob} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bdac50&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.741" endtime="20190524 10:06:49.762"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${oob.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.765" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.764" endtime="20190524 10:06:49.765"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${oob.totalCount}</arg>
<arg>1</arg>
<arg>Out-of-Band Management not configured</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${oob.totalCount}</arg>
<arg>1</arg>
<arg>Out-of-Band Management not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.767" endtime="20190524 10:06:49.768"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.766" endtime="20190524 10:06:49.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${oob.totalCount} == 1</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.2/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.2/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.2/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.2/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.773" endtime="20190524 10:06:49.774"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.772" endtime="20190524 10:06:49.774"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.776" endtime="20190524 10:06:49.777"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.775" endtime="20190524 10:06:49.777"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.770" endtime="20190524 10:06:49.777"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.769" endtime="20190524 10:06:49.777"></status>
</kw>
<doc>Verifies that Node 202 are provisioned with the expected parameters
- Hostname: leaf2
- POD ID: 1
- Node ID: 202
- Serial Number: TEP-1-101
- Role: leaf
- OOB Address (IPv4): 1.1.1.2/24
- OOB Gateway (IPv4): 1.1.1.254
- OOB Address (IPv6):
- OOB Gateway (IPv6):
- Inband Address (IPv4):
- Inband Gateway (IPv4):
- Inband Address (IPv6):
- Inband Gateway (IPv6):</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-node-provisioning</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.685" endtime="20190524 10:06:49.778" critical="yes"></status>
</test>
<test id="s1-t150" name="Verify ACI Node Provisioning Configuration - Node 101">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/topology/pod-1/node-101/sys</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20190524 10:06:49.782" level="INFO">${url} = /api/node/mo/topology/pod-1/node-101/sys</msg>
<status status="PASS" starttime="20190524 10:06:49.782" endtime="20190524 10:06:49.782"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${url}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.785" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.785" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-101/sys.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.809" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"topSystem":{"attributes":{"address":"10.0.104.65","bootstrapState":"none","childAction":"","configIssues":"","controlPlaneMTU":"9000","currentTime":"2019-05-24T02:20:56.239+00:00","dn":"topology/pod-1/node-101/sys","enforceSubnetCheck":"no","etepAddr":"0.0.0.0","fabricDomain":"ACI Fabric1","fabricId":"1","fabricMAC":"00:22:BD:F8:19:FF","id":"101","inbMgmtAddr":"0.0.0.0","inbMgmtAddr6":"::","inbMgmtAddr6Mask":"0","inbMgmtAddrMask":"0","inbMgmtGateway":"0.0.0.0","inbMgmtGateway6":"::","lcOwn":"local","modTs":"2019-05-23T00:37:33.692+00:00","mode":"unspecified","monPolDn":"uni/fabric/monfab-default","name":"spine1","nameAlias":"","nodeType":"unspecified","oobMgmtAddr":"1.1.1.3","oobMgmtAddr6":"::","oobMgmtAddr6Mask":"0","oobMgmtAddrMask":"0","oobMgmtGateway":"0.0.0.0","oobMgmtGateway6":"::","podId":"1","remoteNetworkId":"0","remoteNode":"no","role":"spine","serial":"TEP-1-103","siteId":"0","state":"in-service","status":"","systemUpTime":"01:20:14:24.000","tepPool":"10.0.0.0/16","unicastXrEpLearnDisable":"no"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.815" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bda160&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.784" endtime="20190524 10:06:49.815"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.818" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.817" endtime="20190524 10:06:49.818"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>APIC does not exist</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.820" endtime="20190524 10:06:49.821"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.name}</arg>
<arg>spine1</arg>
<arg>Hostname not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.name}</arg>
<arg>spine1</arg>
<arg>Hostname not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.824" endtime="20190524 10:06:49.825"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.823" endtime="20190524 10:06:49.825"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.podId}</arg>
<arg>1</arg>
<arg>POD ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.827" endtime="20190524 10:06:49.828"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.826" endtime="20190524 10:06:49.828"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.id}</arg>
<arg>101</arg>
<arg>Node ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.id}</arg>
<arg>101</arg>
<arg>Node ID not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.831" endtime="20190524 10:06:49.832"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.829" endtime="20190524 10:06:49.832"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.serial}</arg>
<arg>TEP-1-103</arg>
<arg>Serial Number not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.serial}</arg>
<arg>TEP-1-103</arg>
<arg>Serial Number not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.834" endtime="20190524 10:06:49.835"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.833" endtime="20190524 10:06:49.835"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${return.payload[0].topSystem.attributes.role}</arg>
<arg>spine</arg>
<arg>Node Role not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].topSystem.attributes.role}</arg>
<arg>spine</arg>
<arg>Node Role not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.837" endtime="20190524 10:06:49.838"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.836" endtime="20190524 10:06:49.839"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-101]</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg timestamp="20190524 10:06:49.841" level="INFO">${url} = /api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-101]</msg>
<status status="PASS" starttime="20190524 10:06:49.840" endtime="20190524 10:06:49.841"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${url}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${oob}</var>
</assign>
<msg timestamp="20190524 10:06:49.843" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.843" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-101].json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.861" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"mgmtRsOoBStNode":{"attributes":{"addr":"1.1.1.3/24","annotation":"","childAction":"","dn":"uni/tn-mgmt/mgmtp-default/oob-default/rsooBStNode-[topology/pod-1/node-101]","extMngdBy":"","forceResolve":"yes","gw":"1.1.1.254","lcOwn":"local","modTs":"2019-05-23T00:35:31.360+00:00","rType":"mo","state":"unformed","stateQual":"none","status":"","tCl":"fabricNode","tDn":"topology/pod-1/node-101","tType":"mo","uid":"15374","v6Addr":"::","v6Gw":"::"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.863" level="INFO">${oob} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b98048&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.842" endtime="20190524 10:06:49.863"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${oob.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.866" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.865" endtime="20190524 10:06:49.866"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${oob.totalCount}</arg>
<arg>1</arg>
<arg>Out-of-Band Management not configured</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${oob.totalCount}</arg>
<arg>1</arg>
<arg>Out-of-Band Management not configured</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.869" endtime="20190524 10:06:49.869"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.867" endtime="20190524 10:06:49.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${oob.totalCount} == 1</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.3/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.3/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.3/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.addr}</arg>
<arg>1.1.1.3/24</arg>
<arg>OOB Management Address (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.875" endtime="20190524 10:06:49.876"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.874" endtime="20190524 10:06:49.876"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Strings</arg>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${oob.payload[0].mgmtRsOoBStNode.attributes.gw}</arg>
<arg>1.1.1.254</arg>
<arg>OOB Management Gateway (IPv4) not matching expected configuration</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.878" endtime="20190524 10:06:49.878"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.877" endtime="20190524 10:06:49.878"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.872" endtime="20190524 10:06:49.878"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.870" endtime="20190524 10:06:49.878"></status>
</kw>
<doc>Verifies that Node 101 are provisioned with the expected parameters
- Hostname: spine1
- POD ID: 1
- Node ID: 101
- Serial Number: TEP-1-103
- Role: spine
- OOB Address (IPv4): 1.1.1.3/24
- OOB Gateway (IPv4): 1.1.1.254
- OOB Address (IPv6):
- OOB Gateway (IPv6):
- Inband Address (IPv4):
- Inband Gateway (IPv4):
- Inband Address (IPv6):
- Inband Gateway (IPv6):</doc>
<tags>
<tag>aci</tag>
<tag>aci-conf</tag>
<tag>aci-fabric</tag>
<tag>aci-fabric-node-provisioning</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.779" endtime="20190524 10:06:49.879" critical="yes"></status>
</test>
<test id="s1-t151" name="Verify ACI Fabric Connectivity - Node 201 (eth1/49) to Node 101 (eth5/2)">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/topology/pod-1/node-201/sys/lldp/inst/if-[eth1/49]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:49.884" level="INFO">${uri} = /api/node/mo/topology/pod-1/node-201/sys/lldp/inst/if-[eth1/49]</msg>
<status status="PASS" starttime="20190524 10:06:49.883" endtime="20190524 10:06:49.884"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>query-target=children&amp;target-subtree-class=lldpAdjEp&amp;query-target=subtree</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:49.885" level="INFO">${filter} = query-target=children&amp;target-subtree-class=lldpAdjEp&amp;query-target=subtree</msg>
<status status="PASS" starttime="20190524 10:06:49.885" endtime="20190524 10:06:49.885"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.887" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.887" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-201/sys/lldp/inst/if-[eth1/49].json?query-target=children&amp;target-subtree-class=lldpAdjEp&amp;query-target=subtree
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.908" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lldpAdjEp":{"attributes":{"capability":"router","chassisIdT":"mac","chassisIdV":"d2:df:b9:20:5b:d7","childAction":"","dn":"topology/pod-1/node-201/sys/lldp/inst/if-[eth1/49]/adj-1","enCap":"","id":"1","mgmtId":"0","mgmtIp":"10.0.104.65","mgmtPortMac":"unspecified","modTs":"2019-05-23T00:37:33.569+00:00","monPolDn":"uni/fabric/monfab-default","name":"","portDesc":"topology\/pod-1\/paths-101\/pathep-[eth5\/2]","portIdT":"mac","portIdV":"d2:df:b9:20:5b:d7","portVlan":"unspecified","stQual":"","status":"","sysDesc":"topology\/pod-1\/node-101","sysName":"spine1","ttl":"120"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.910" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bba940&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.886" endtime="20190524 10:06:49.910"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.913" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.912" endtime="20190524 10:06:49.913"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>No LLDP neighbor found</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>No LLDP neighbor found</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.916" endtime="20190524 10:06:49.916"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.914" endtime="20190524 10:06:49.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${return.totalCount}" == "1"</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.sysDesc}</arg>
<arg>topology/pod-1/node-101</arg>
<arg>LLDP neighbor not matching expected system name (sysDesc)</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.portDesc}</arg>
<arg>topology/pod-1/paths-101/pathep-[eth5/2]</arg>
<arg>LLDP neighbor not matching expected port (portDesc)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.sysDesc}</arg>
<arg>topology/pod-1/node-101</arg>
<arg>LLDP neighbor not matching expected system name (sysDesc)</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.portDesc}</arg>
<arg>topology/pod-1/paths-101/pathep-[eth5/2]</arg>
<arg>LLDP neighbor not matching expected port (portDesc)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.sysDesc}</arg>
<arg>topology/pod-1/node-101</arg>
<arg>LLDP neighbor not matching expected system name (sysDesc)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpAdjEp.attributes.sysDesc}</arg>
<arg>topology/pod-1/node-101</arg>
<arg>LLDP neighbor not matching expected system name (sysDesc)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.921" endtime="20190524 10:06:49.922"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.920" endtime="20190524 10:06:49.922"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.portDesc}</arg>
<arg>topology/pod-1/paths-101/pathep-[eth5/2]</arg>
<arg>LLDP neighbor not matching expected port (portDesc)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpAdjEp.attributes.portDesc}</arg>
<arg>topology/pod-1/paths-101/pathep-[eth5/2]</arg>
<arg>LLDP neighbor not matching expected port (portDesc)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.925" endtime="20190524 10:06:49.926"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.924" endtime="20190524 10:06:49.926"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.919" endtime="20190524 10:06:49.926"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.918" endtime="20190524 10:06:49.926"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/topology/pod-1/lnkcnt-101/lnk-201-1-49-to-101-5-2</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:49.927" level="INFO">${uri} = /api/node/mo/topology/pod-1/lnkcnt-101/lnk-201-1-49-to-101-5-2</msg>
<status status="PASS" starttime="20190524 10:06:49.927" endtime="20190524 10:06:49.928"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.930" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.930" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/lnkcnt-101/lnk-201-1-49-to-101-5-2.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.946" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricLink":{"attributes":{"childAction":"","dn":"topology/pod-1/lnkcnt-101/lnk-201-1-49-to-101-5-2","lcOwn":"local","linkState":"ok","modTs":"2019-05-23T00:41:34.356+00:00","monPolDn":"uni/fabric/monfab-default","n1":"201","n2":"101","p1":"49","p2":"2","r1":"leaf","r2":"unsupported","s1":"1","s2":"5","status":"","wiringIssues":""}}}]}"</msg>
<msg timestamp="20190524 10:06:49.949" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b61710&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.929" endtime="20190524 10:06:49.949"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.951" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.950" endtime="20190524 10:06:49.951"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Port usage is not "Fabric" as expected</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Port usage is not "Fabric" as expected</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.953" endtime="20190524 10:06:49.954"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.952" endtime="20190524 10:06:49.954"></status>
</kw>
<doc>Verifies that ACI Fabric Connectivity from node 201 (eth1/49) to node 101 (eth5/2) are connected and operates as expected
- From POD ID: 1
- From Node: leaf1
- From Node ID: 201
- From Port: eth1/49
- To Node: spine1
- To Node ID: 101
- To Port: eth5/2</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric-connectivity</tag>
<tag>aci-operations</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.881" endtime="20190524 10:06:49.955" critical="yes"></status>
</test>
<test id="s1-t152" name="Verify ACI Fabric Connectivity - Node 202 (eth1/49) to Node 101 (eth5/1)">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/topology/pod-1/node-202/sys/lldp/inst/if-[eth1/49]</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:49.959" level="INFO">${uri} = /api/node/mo/topology/pod-1/node-202/sys/lldp/inst/if-[eth1/49]</msg>
<status status="PASS" starttime="20190524 10:06:49.958" endtime="20190524 10:06:49.959"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>query-target=children&amp;target-subtree-class=lldpAdjEp&amp;query-target=subtree</arg>
</arguments>
<assign>
<var>${filter}</var>
</assign>
<msg timestamp="20190524 10:06:49.961" level="INFO">${filter} = query-target=children&amp;target-subtree-class=lldpAdjEp&amp;query-target=subtree</msg>
<status status="PASS" starttime="20190524 10:06:49.961" endtime="20190524 10:06:49.961"></status>
</kw>
<kw name="via filtered ACI REST API retrieve &quot;${uri}&quot; using filter &quot;${filter}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST using an ACI API filter.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:49.963" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:49.963" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/node-202/sys/lldp/inst/if-[eth1/49].json?query-target=children&amp;target-subtree-class=lldpAdjEp&amp;query-target=subtree
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:49.984" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"lldpAdjEp":{"attributes":{"capability":"router","chassisIdT":"mac","chassisIdV":"6e:7b:91:7e:f9:15","childAction":"","dn":"topology/pod-1/node-202/sys/lldp/inst/if-[eth1/49]/adj-1","enCap":"","id":"1","mgmtId":"0","mgmtIp":"10.0.104.65","mgmtPortMac":"unspecified","modTs":"2019-05-23T00:37:56.077+00:00","monPolDn":"uni/fabric/monfab-default","name":"","portDesc":"topology\/pod-1\/paths-101\/pathep-[eth5\/1]","portIdT":"mac","portIdV":"6e:7b:91:7e:f9:15","portVlan":"unspecified","stQual":"","status":"","sysDesc":"topology\/pod-1\/node-101","sysName":"spine1","ttl":"120"}}}]}"</msg>
<msg timestamp="20190524 10:06:49.987" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8bbbe80&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.963" endtime="20190524 10:06:49.987"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:49.989" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:49.988" endtime="20190524 10:06:49.989"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>No LLDP neighbor found</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>No LLDP neighbor found</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.992" endtime="20190524 10:06:49.993"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.991" endtime="20190524 10:06:49.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${return.totalCount}" == "1"</arg>
<arg>run keywords</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.sysDesc}</arg>
<arg>topology/pod-1/node-101</arg>
<arg>LLDP neighbor not matching expected system name (sysDesc)</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.portDesc}</arg>
<arg>topology/pod-1/paths-101/pathep-[eth5/1]</arg>
<arg>LLDP neighbor not matching expected port (portDesc)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.sysDesc}</arg>
<arg>topology/pod-1/node-101</arg>
<arg>LLDP neighbor not matching expected system name (sysDesc)</arg>
<arg>values=False</arg>
<arg>AND</arg>
<arg>Run keyword And Continue on Failure</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.portDesc}</arg>
<arg>topology/pod-1/paths-101/pathep-[eth5/1]</arg>
<arg>LLDP neighbor not matching expected port (portDesc)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.sysDesc}</arg>
<arg>topology/pod-1/node-101</arg>
<arg>LLDP neighbor not matching expected system name (sysDesc)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpAdjEp.attributes.sysDesc}</arg>
<arg>topology/pod-1/node-101</arg>
<arg>LLDP neighbor not matching expected system name (sysDesc)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:49.999" endtime="20190524 10:06:50.000"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.998" endtime="20190524 10:06:50.000"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${return.payload[0].lldpAdjEp.attributes.portDesc}</arg>
<arg>topology/pod-1/paths-101/pathep-[eth5/1]</arg>
<arg>LLDP neighbor not matching expected port (portDesc)</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return.payload[0].lldpAdjEp.attributes.portDesc}</arg>
<arg>topology/pod-1/paths-101/pathep-[eth5/1]</arg>
<arg>LLDP neighbor not matching expected port (portDesc)</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:50.001" endtime="20190524 10:06:50.002"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:50.001" endtime="20190524 10:06:50.002"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.997" endtime="20190524 10:06:50.002"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:49.994" endtime="20190524 10:06:50.003"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/api/node/mo/topology/pod-1/lnkcnt-101/lnk-202-1-49-to-101-5-1</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20190524 10:06:50.004" level="INFO">${uri} = /api/node/mo/topology/pod-1/lnkcnt-101/lnk-202-1-49-to-101-5-1</msg>
<status status="PASS" starttime="20190524 10:06:50.004" endtime="20190524 10:06:50.004"></status>
</kw>
<kw name="via ACI REST API retrieve &quot;${uri}&quot; from &quot;${apic}&quot; as &quot;object&quot;" library="RASTA.RastaACIRest">
<doc>Retrieves an URI from ACI using REST.</doc>
<assign>
<var>${return}</var>
</assign>
<msg timestamp="20190524 10:06:50.006" level="INFO">Active ACI REST session found towards apic1</msg>
<msg timestamp="20190524 10:06:50.006" level="INFO">Sending REST GET request to https://10.49.96.69:443/api/node/mo/topology/pod-1/lnkcnt-101/lnk-202-1-49-to-101-5-1.json
Payload: 
Cookies: {'APIC-cookie': 'JAwAAAAAAAAAAAAAAAAAAGmuIQy9lEezLlQI2ibKqisz7SSV7WEO93pt6Hrvcm81Hd9Q5ppf6Uw3HTe8qKJP+a0DdW+mSV1o+K5XJHl7WatbCo+LZ7FHQiEWCn/VJzfUy+a9fN7yU+J/2WGon738yx04MPmvQTB8xRsXiQj+DXpTlmxqsaIGeKg/FCFglL36j80d8xtJ+5S9DlAsta4g8g=='}</msg>
<msg timestamp="20190524 10:06:50.026" level="INFO">Request returned with status code 200 and text "{"totalCount":"1","imdata":[{"fabricLink":{"attributes":{"childAction":"","dn":"topology/pod-1/lnkcnt-101/lnk-202-1-49-to-101-5-1","lcOwn":"local","linkState":"ok","modTs":"2019-05-23T00:37:34.272+00:00","monPolDn":"uni/fabric/monfab-default","n1":"202","n2":"101","p1":"49","p2":"1","r1":"leaf","r2":"unsupported","s1":"1","s2":"5","status":"","wiringIssues":""}}}]}"</msg>
<msg timestamp="20190524 10:06:50.032" level="INFO">${return} = &lt;RASTA.RastaACIRest.ReturnObject object at 0x7f5fa8b50278&gt;</msg>
<status status="PASS" starttime="20190524 10:06:50.006" endtime="20190524 10:06:50.032"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.status}</arg>
<arg>200</arg>
<arg>Failure executing API call</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20190524 10:06:50.035" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20190524 10:06:50.035" endtime="20190524 10:06:50.036"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal as Integers</arg>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Port usage is not "Fabric" as expected</arg>
<arg>values=False</arg>
</arguments>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${return.totalCount}</arg>
<arg>1</arg>
<arg>Port usage is not "Fabric" as expected</arg>
<arg>values=False</arg>
</arguments>
<status status="PASS" starttime="20190524 10:06:50.038" endtime="20190524 10:06:50.039"></status>
</kw>
<status status="PASS" starttime="20190524 10:06:50.037" endtime="20190524 10:06:50.039"></status>
</kw>
<doc>Verifies that ACI Fabric Connectivity from node 202 (eth1/49) to node 101 (eth5/1) are connected and operates as expected
- From POD ID: 1
- From Node: leaf2
- From Node ID: 202
- From Port: eth1/49
- To Node: spine1
- To Node ID: 101
- To Port: eth5/1</doc>
<tags>
<tag>aci</tag>
<tag>aci-fabric-connectivity</tag>
<tag>aci-operations</tag>
</tags>
<status status="PASS" starttime="20190524 10:06:49.956" endtime="20190524 10:06:50.041" critical="yes"></status>
</test>
<status status="PASS" starttime="20190524 10:06:34.686" endtime="20190524 10:06:50.054"></status>
</suite>
<statistics>
<total>
<stat pass="152" fail="0">Critical Tests</stat>
<stat pass="152" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="152" fail="0">aci</stat>
<stat pass="109" fail="0">aci-conf</stat>
<stat pass="89" fail="0">aci-fabric</stat>
<stat pass="1" fail="0">aci-fabric-aaa</stat>
<stat pass="8" fail="0">aci-fabric-aaep</stat>
<stat pass="2" fail="0">aci-fabric-bgp</stat>
<stat pass="2" fail="0">aci-fabric-connectivity</stat>
<stat pass="3" fail="0">aci-fabric-dns</stat>
<stat pass="12" fail="0">aci-fabric-domain</stat>
<stat pass="4" fail="0">aci-fabric-infra-vlan</stat>
<stat pass="22" fail="0">aci-fabric-interface-policy</stat>
<stat pass="8" fail="0">aci-fabric-interface-policy-group</stat>
<stat pass="11" fail="0">aci-fabric-interface-profile</stat>
<stat pass="4" fail="0">aci-fabric-node-provisioning</stat>
<stat pass="4" fail="0">aci-fabric-ntp</stat>
<stat pass="6" fail="0">aci-fabric-switch-profile</stat>
<stat pass="1" fail="0">aci-fabric-tep-pool</stat>
<stat pass="7" fail="0">aci-fabric-vlan-pool</stat>
<stat pass="2" fail="0">aci-fabric-vpc-domain</stat>
<stat pass="39" fail="0">aci-faults</stat>
<stat pass="4" fail="0">aci-operations</stat>
<stat pass="1" fail="0">aci-software-version</stat>
<stat pass="52" fail="0">aci-tenant</stat>
<stat pass="1" fail="0">aci-tenant-ap</stat>
<stat pass="10" fail="0">aci-tenant-bd</stat>
<stat pass="14" fail="0">aci-tenant-contract</stat>
<stat pass="8" fail="0">aci-tenant-epg</stat>
<stat pass="10" fail="0">aci-tenant-l3out</stat>
<stat pass="7" fail="0">aci-tenant-vrf</stat>
<stat pass="2" fail="0">aci-vmm</stat>
<stat pass="2" fail="0">aci-vmm-vmware</stat>
</tag>
<suite>
<stat pass="152" fail="0" id="s1" name="Aci Tests">Aci Tests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
